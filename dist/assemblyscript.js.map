{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/util/collectionutil.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","OperatorKind","common_1","diagnostics_1","types_1","ast_1","util_1","abi_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","diagnostics","_this","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","getAbiInfo","AbiInfo","getSource","normalizedPath","k","source","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","range","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createFunctionType","createNamedType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","DiagnosticCode","File_0_not_found","queuedImport","element","lookupForeign","text","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","join","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","push","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","substring","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","DiagnosticEmitter","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","emitDiagnostic","console","log","stack","info","infoRelated","warning","warningRelated","errorRelated","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","typeName","TypeName","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","nameStr","ACTION","DATABASE","IGNORE","PRIMARYID","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","findDecorator","isTypeOmitted","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","_BinaryenCall","call_indirect","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","isSimpleType","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveTypeArguments","Cannot_find_name_0","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","astutil_1","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","AstUtil","location","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","expr_1","theOperands","numOperands","isCallImport","allOptionalsAreConstant","expr_2","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","AbiTypeEnum","collectionutil_1","haveSpecifyDecorator","getSpecifyDecorator","isString","getInternalName","getArrayTypeArgument","declareType","isArrayType","bracketIndex","indexOf","endIndex","isMapType","isArrayMap","impledSerializable","impledInterface","impledReturnable","classDeclaration","interfaceName","implementsTypes_1","implementsTypes_1_1","extendedContract","isClassPrototype","isSpecifyElement","impledInterfaces","tempClz","interfaces","implTypes","implTypes_1","e_4","implTypes_1_1","TypeNodeAnalyzer","getDeclareType","isVoid","MAP","findElement","AbiHelper","abiTypeLookup","NUMBER","isArray","abiTypeEnum","getArrayArgAbiTypeEnum","getArgs","findSourceAsElement","isPrimaryType","findSourceAsTypeName","getArrayArg","getAbiDeclareType","abiType","argType","args_1","args_1_1","getAsTypes","Collections","isEmptyArray","asTypeName","sourceTypeName","aliasTypeName","findSourceAbiType","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","inserter_1","primitiveutil_1","StructDef","fields","addField","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","isValidAbility","proposals","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","addAbiTypeAlias","typeNodeAnalyzer","asTypes","asTypes_1","asTypes_1_1","asType","getStructFromClzPrototype","isActionFnPrototype","funcType","resolveDatabaseDecorator","clsProto","decorators_1","decorators_1_1","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","protoEle","Strings","isAroundQuotation","ele","addFieldsFromClassPrototype","struct","fieldDeclare","memberType","addToStruct","resolveClassDispatcher","clzPrototype","hasActionDecorators","contractName","contractVarName","funcProto","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","argTypeName","rtnNodeAnly","declaration_1","impledInterfaces_1","impledInterfaces_1_1","getActionAbility","funcPrototype","decoratorNode","parameters_1","parameters_1_1","parameter","typeInfo","serializePoints","SerializeInserter","getInsertPoints","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","addAll","dispatch","assemblyDispatch","getContent","undefined","beginChar","removeQuotation","name_1","name_1_1","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","indent","increase","row","decrease","body_1","body_1_1","Verify","verify","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","typeToString","members_2","members_2_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","insertCode","insertPoints","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getCodes","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","existing","fnName","checkSerializable","hasImpl","getSerializePoint","serializePoint","SerializePoint","countOfPkDecorator","serialize","deserialize","fieldDeclaration","serializeField","deserializeField","primaryKey","serializeClassname","indentity","newArray"],"mappings":"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AM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"uabort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  AbiInfo\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  getAbiInfo(): AbiInfo {\n    var abiInfo = new AbiInfo(this);\n    return abiInfo;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          // this.warning( // TODO: not yet supported\n          //   DiagnosticCode.Operation_not_supported,\n          //   implementsTypes[i].range\n          // );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10,\n  /** Is a database */\n  DATABASE = 1 << 11,\n  /** Is a action */\n  ACTION = 1 << 12,\n  /** Is a ignore */\n  IGNORE = 1 << 13\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n    // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n    // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      console.log(<string>new Error(\"stack\").stack);\n      throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.p: {\n        if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   // TODO: there's more\n//   switch (_BinaryenExpressionGetId(expr)) {\n//     case ExpressionId.LocalGet:\n//     case ExpressionId.GlobalGet:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.FUNCTIONTYPE) {\n      let explicitThisType = (<FunctionTypeNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<FunctionTypeNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.NAMEDTYPE);\n    var typeNode = <NamedTypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var isSimpleType = !typeName.next;\n\n    // look up in contextual type arguments if a simple type\n    if (isSimpleType) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle built-in types\n      if (isSimpleType) {\n        switch (typeName.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(typeNode, context, contextualTypeArguments, reportMode);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              typeNode.name.range, typeName.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          // if (!arrayType) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementExpression.range, (<Class>target).internalName\n              );\n              return null;\n            }\n            let arrayType = indexedGet.signature.returnType;\n\n          // }\n          let classReference = arrayType.classReference;\n          if (!classReference) {\n            let typeClasses = this.program.typeClasses;\n            if (!arrayType.is(TypeFlags.REFERENCE) && typeClasses.has(arrayType.kind)) {\n              classReference = typeClasses.get(arrayType.kind)!;\n            } else {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                propertyAccess.property.range, propertyName, arrayType.toString()\n              );\n              return null;\n            }\n          }\n          target = classReference;\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n        // if (!arrayType) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementAccess.range, (<Class>target).internalName\n              );\n            }\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n        // }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        expression.arguments.length > 0\n      ) {\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        } else {\n          let typeClasses = this.program.typeClasses;\n          if (!returnType.is(TypeFlags.REFERENCE) && typeClasses.has(returnType.kind)) {\n            return typeClasses.get(returnType.kind);\n          }\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\nimport { AstUtil } from \"./util/astutil\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    try {\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    } catch (exception) {\n      console.log(`Compile expression failed, the location in ${AstUtil.location(expression.range)}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.LOCAL: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.functionTypeNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\n              ? (<NamedTypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          Constraints.CONV_IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, constraints);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            initExpr,\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.local_get(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n\n  if (element.parent && element.parent.kind == ElementKind.NAMESPACE) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = element.name;\n  }\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeDeclaration,\n    NamedTypeNode\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    TypeDefinition\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"../abi\";\nimport { PATH_DELIMITER } from \"../common\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): bool {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): bool {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): bool {\n        return declareType == \"Map\" || declareType == \"ArrayMap\";\n    }\n\n    static isArrayMap(declareType: string): bool {\n        return \"ArrayMap\" == declareType;\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): bool {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(<ClassDeclaration>classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): bool {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.name == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): bool {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): bool {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = (<ClassDeclaration>tempClz.declaration).implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    parent: Element;\n    typeNode: NamedTypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(parent: Element ,typeNode: NamedTypeNode) {\n        this.parent = parent;\n        this.typeNode = typeNode;\n        // Here various clz[]'s type name is [], not clz.\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): bool {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findElement(typeName);\n\n        if (type) {\n            if (type.kind == ElementKind.TYPEDEFINITION) {\n                let typeDefine = <TypeDefinition>type;\n                let declaration = <TypeDeclaration>typeDefine.declaration;\n                let _typeNode = <NamedTypeNode>declaration.type;\n                let name = _typeNode.name.range.toString();\n                if (AbiHelper.abiTypeLookup.get(name) && name != \"Asset\") {\n                    return AbiTypeEnum.NUMBER;\n                }\n            }\n            if (type.kind == ElementKind.CLASS_PROTOTYPE) {\n                return AbiTypeEnum.CLASS;\n            }\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): bool {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsElement(typeName);\n        if (type != null && type.kind == ElementKind.CLASS_PROTOTYPE) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): bool {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                if (AstUtil.isArrayMap(typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                } else {\n                    return `${this.getArgs().join(\",\")}{}`;\n                }\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        return this.parent.lookup(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    private findSourceAsElement(asTypeName: string): Element | null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Element | null = this.parent.lookup(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    private findSourceAsTypeName(typeName: string): string {\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | null = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition> element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            Constraints.CONV_IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","import {\n  SerializeInserter,\n  InsertPoint\n} from \"./inserter\";\n\nimport {\n  Type,\n  TypeKind,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  TypeNode,\n  DecoratorNode,\n  Node,\n  ClassDeclaration,\n  NamedTypeNode\n} from \"./ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./util/primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n  private addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        continue;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  resolveDatabaseDecorator(clsProto: ClassPrototype): void {\n    var decorators = clsProto.decoratorNodes;\n    if (!decorators) {\n      return;\n    }\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(clsProto ,decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(clsProto, decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value.\n   * @param expr\n   */\n  getExprValue(protoEle: Element,expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var element = protoEle.lookup(arg);\n    var internalName = AstUtil.getInternalName(expr);\n    if (!element) {\n      element = this.program.elementsByName.get(internalName);\n    }\n    if (element) {\n      let declaration = <VariableLikeDeclarationStatement> (<VariableLikeElement>element).declaration;\n      if (declaration.initializer) {\n        let literal = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  private getStructFromNode(ele: Element, node: Node): void {\n    var element = ele.lookup(node.range.toString());\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  private addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = (<ClassDeclaration>classPrototype.declaration).members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: TypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(classPrototype, <NamedTypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  private getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.name) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.name;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  private resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.name; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let [key, instance] of clzPrototype.instanceMembers) {\n        if (this.isActionFnPrototype(instance)) {\n          let funcProto = <FunctionPrototype>instance;\n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(funcProto);\n          let declaration = funcProto.declaration;\n\n          let funcName = declaration.name.range.toString();\n          let params = funcProto.functionTypeNode.parameters; // FunctionDeclaration parameter types\n          let returnType = funcProto.functionTypeNode.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>type.type);\n\n            if (typeNodeAnalyzer.isArray()) {\n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(funcProto, type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = <ClassDeclaration>(<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  private getActionAbility(funcPrototype: FunctionPrototype): string {\n    var statement = funcPrototype.declaration;\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function don't have action decorator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(funcPrototype, args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  private resolveFunctionPrototype(funcProto: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = <FunctionDeclaration> funcProto.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = declaration.signature;\n\n    var struct = new StructDef();\n    struct.name = funcName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: TypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(funcProto,  <NamedTypeNode>type);\n      let abiType = typeInfo.getAbiDeclareType();\n      struct.addField(parameter.name.range.toString(), abiType);\n      this.addAbiTypeAlias(typeInfo);\n    }\n\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(funcProto)));\n  }\n\n  private resolve(): void {\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let [key, element] of this.program.elementsByName) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(key)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(key, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        var beginChar = str.charCodeAt(0);\n        var endChar = str.charCodeAt(str.length - 1);\n        return (beginChar == endChar) && (beginChar == 0x22 || beginChar == 0x27);\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    // TODO To support super()\n    } else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  // signbit: {\n  //   value: function signbit(x) {\n  //     F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n  //   }\n  // },\n  // sincos: {\n  //   value: function sincos(x) {\n  //     this.sincos_sin = Math.sin(x);\n  //     this.sincos_cos = Math.cos(x);\n  //   }\n  // }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    NamedTypeNode\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter,\n    Verify\n} from \"./util/primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line - 2;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: NamedTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsByName.get(internalName);\n\n        // var element = this.classPrototype.lookup(typeNode.range.toString());\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = <ClassDeclaration>this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = <FieldDeclaration>fieldPrototype.declaration;\n                let commonType: TypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <NamedTypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.name} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype,  <NamedTypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.name} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsByName) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n"],"sourceRoot":""}