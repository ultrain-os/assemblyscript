{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/util/collectionutil.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","OperatorKind","common_1","diagnostics_1","types_1","ast_1","abi_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","assert","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","diagnostics","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","getAbiInfo","AbiInfo","getSource","normalizedPath","k","source","makeNativeVariableDeclaration","flags","NONE","range","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","DiagnosticCode","File_0_not_found","queuedImport","element","lookupForeign","text","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","join","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","returnType","byteSize","_l","values","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Operation_not_supported","push","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","substring","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","Namespace","DECLARE","DiagnosticEmitter","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","FieldDeclaration","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","emitDiagnostic","console","log","stack","info","infoRelated","warningRelated","errorRelated","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","typeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","ACTION","DATABASE","IGNORE","PRIMARYID","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","align","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","createSIMDExtract","vec","idx","_BinaryenSIMDExtract","createSIMDReplace","_BinaryenSIMDReplace","createSIMDShuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","createSIMDBitselect","cond","_BinaryenSIMDBitselect","createSIMDShift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","kindOnly","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","astutil_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","AstUtil","location","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","AllTrueVecI8x16","EqVecI8x16","NeI32","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","buffer_offset","length_offset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","AbiTypeEnum","collectionutil_1","haveSpecifyDecorator","getSpecifyDecorator","isString","getInternalName","getArrayTypeArgument","declareType","isArrayType","bracketIndex","indexOf","endIndex","isMapType","isArrayMap","impledSerializable","impledInterface","impledReturnable","classDeclaration","interfaceName","implementsTypes_1","implementsTypes_1_1","extendedContract","isClassPrototype","isSpecifyElement","impledInterfaces","tempClz","interfaces","implTypes","implTypes_1","implTypes_1_1","TypeNodeAnalyzer","getDeclareType","isVoid","MAP","findElement","_typeNode","AbiHelper","abiTypeLookup","NUMBER","aliasType","isArray","abiTypeEnum","getArrayArgAbiTypeEnum","getArgs","findSourceAsElement","isPrimaryType","findSourceAsTypeName","getArrayArg","getAbiDeclareType","abiType","argType","args_1","args_1_1","getAsTypes","Collections","isEmptyArray","asTypeName","sourceTypeName","aliasTypeName","findSourceAbiType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","inserter_1","primitiveutil_1","StructDef","fields","addField","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","isValidAbility","proposals","Set","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","addAbiTypeAlias","typeNodeAnalyzer","asTypes","asTypes_1","asTypes_1_1","asType","getStructFromClzPrototype","isActionFnPrototype","funcType","resolveDatabaseDecorator","clsProto","decorators_1","decorators_1_1","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","Strings","isAroundQuotation","ele","addFieldsFromClassPrototype","struct","fieldDeclare","memberType","addToStruct","resolveClassDispatcher","clzPrototype","hasActionDecorators","contractName","contractVarName","funcProto","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","argTypeName","rtnNodeAnly","declaration_1","impledInterfaces_1","impledInterfaces_1_1","getActionAbility","decoratorNode","funcPrototype","parameters_1","parameters_1_1","parameter","typeInfo","printProgramInfo","elements_1","elements_1_1","serializePoints","SerializeInserter","getInsertPoints","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","addAll","dispatch","assemblyDispatch","getContent","undefined","removeQuotation","name_1","name_1_1","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","indent","increase","row","decrease","body_1","body_1_1","Verify","verify","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","y","sign","isTrueish","radix","parseInt","fromCodePoint","Number","isInteger","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","isAsm","evaluateConstantType","isFloat","isSigned","isReference","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","alignLog2","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","atomic_notify","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","alreadyUnchecked","call_indirect","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","iterateRoots","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","insertCode","insertPoints","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getCodes","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","existing","fnName","checkSerializable","hasImpl","getSerializePoint","serializePoint","SerializePoint","countOfPkDecorator","serialize","deserialize","fieldDeclaration","serializeField","deserializeField","primaryKey","serializeClassname","indentity","newArray","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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E,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n}\n\n/** Common standard library symbols. */\nexport namespace LibrarySymbols {\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  // runtime\n  export const memory = \"memory\";\n  export const allocate = \"allocate\";\n  export const abort = \"abort\";\n  export const main = \"main\";\n  // other\n  export const length = \"length\";\n  export const byteLength = \"byteLength\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  LibrarySymbols\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  AbiInfo\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Explicitly annotated start function. */\n  explicitStartFunction: FunctionPrototype | null = null;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n\n  // runtime references\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  // gc integration\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  getAbiInfo(): AbiInfo {\n    var abiInfo = new AbiInfo(this);\n    return abiInfo;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range,\n            queuedImport.foreignPath,\n            foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let elementsByName = this.elementsByName;\n          let element = elementsByName.get(name);\n          if (element) {\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n            elementsByName.set(alias, element);\n          }\n          else throw new Error(\"no such global element: \" + name);\n        }\n      }\n    }\n\n    // register global library elements\n    {\n      let element: Element | null;\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayPrototype = <ClassPrototype>element;\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n        }\n      }\n    }\n\n    // register GC hooks if present\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\n    // code cannot call without explicitly enabling it with a flag.\n    if (\n      this.elementsByName.has(\"__gc_allocate\") &&\n      this.elementsByName.has(\"__gc_link\") &&\n      this.elementsByName.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsByName.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): void {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name);\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (decorator.range.source.isLibrary) {\n              flags |= flag;\n            } else {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** SO far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.NONE;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\n        validDecorators |= DecoratorFlags.START;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return;\n    if (element.hasDecorator(DecoratorFlags.START)) {\n      if (this.explicitStartFunction) {\n        this.error(\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\n        );\n      } else this.explicitStartFunction = element;\n    }\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new Namespace(name, parent, declaration);\n    if (!parent.add(name, element)) return;\n    element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, element);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, element);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, element);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, element);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, element);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is the explicit start function. */\n  START = 1 << 10,\n  /** Is a database */\n  DATABASE = 1 << 11,\n  /** Is a action */\n  ACTION = 1 << 12,\n  /** Is a ignore */\n  IGNORE = 1 << 13\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n    // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n    // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.START: return DecoratorFlags.START;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple na,e */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do {\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    // console.log(`class proto add Instance name: ${name}, kind: ${ElementKind[element.kind]}`);\n    FieldDeclaration\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(this.program.options.usizeType.asClass(this));\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      console.log(<string>new Error(\"stack\").stack);\n      throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  START\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.p: {\n        if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        if (nameStr == \"start\") return DecoratorKind.START;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: CommonTypeNode): bool {\n  if (type.kind == NodeKind.TYPE) {\n    let name = (<TypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createV128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr, type);\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenSetGlobal(this.ref, cStr, value);\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  createMemoryCopy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  createMemoryFill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  createSIMDExtract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  createSIMDReplace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  createSIMDShuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createSIMDBitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  createSIMDShift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64:\n    case NativeType.V128: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.name + \" | null\"\n          : classReference.name;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n      case TypeKind.V128: return module.createV128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < this.end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      return this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook,\n  BuiltinSymbols\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  LibrarySymbols,\n  CommonSymbols,\n  INDEX_SUFFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\nimport { AstUtil } from \"./util/astutil\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or called by main\n    var explicitStartFunction = program.explicitStartFunction;\n    if (startFunctionBody.length || explicitStartFunction) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStartFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.makeModuleExports(file);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private makeModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  // general\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    this.currentFlow = startFunction.flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.createBlock(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.createCall(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // globals\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // resolve now if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // infer from initializer if not annotated\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpressionRetainType( // reports\n          initializerNode,\n          Type.void,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // must either be annotated or have an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(\n          initializerNode,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              initializerNode.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          global.identifierNode.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(\n            valueNode,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.currentBody.push(\n            module.createSetGlobal(val.internalName, initExpr)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, true, initExpr);\n          }\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    var stmts: BinaryenExportRef[];\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let stmt = this.compileExpression(\n        (<ExpressionStatement>bodyNode).expression,\n        returnType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      flow.set(FlowFlags.RETURNS);\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      stmts = [ stmt ];\n    }\n\n    // make the main function call `start` implicitly, but only once\n    if (instance.prototype == this.program.explicitStartFunction) {\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\n      stmts.unshift(\n        module.createIf(\n          module.createUnary(\n            UnaryOp.EqzI32,\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\n          ),\n          module.createBlock(null, [\n            module.createCall(\"start\", null, NativeType.None),\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\n          ])\n        )\n      );\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n          : 0;\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.createIf(\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\n              ),\n              module.createSetLocal(thisLocalIndex,\n                this.makeAllocation(<Class>classInstance)\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n\n        // implicitly return `this`\n        stmts.push(\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\n        );\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches return\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      this.currentFlow = instance.flow;\n      let stmts = this.compileFunctionBody(instance);\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmts.length\n          ? stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\n          : module.createNop()\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    return true;\n  }\n\n  // classes\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.createUnreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n    var actualFunction = outerFlow.actualFunction;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Each arm initiates a branch\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.createUnreachable();\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\n\n    return module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.compileAssignmentWithValue(declaration.name, initExpr)\n          );\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary loops if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Statements initiate a new branch with its own break context\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    try {\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      // TODO To remove, to support the super();\n      // case NodeKind.SUPER: {\n      //   expr = this.compileNopExpression();\n      //   break;\n      // }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    } catch (exception) {\n      console.log(`Compile expression failed, the location in ${AstUtil.location(expression.range)}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          this.currentFlow.actualFunction,\n          this.currentFlow.contextualTypeArguments\n        );\n        if (!toType) return this.module.createUnreachable();\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.createUnreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AllTrueVecI8x16,\n              module.createBinary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AnyTrueVecI8x16,\n              module.createBinary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.createUnreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var target = this.resolver.resolveExpression(expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.createUnreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.createUnreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n          this.makeCallDirect(getterInstance) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\n        let tempLocalIndex = tempLocal.index;\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.createTeeLocal(tempLocalIndex, thisExpr),\n            valueWithCorrectType\n          ]),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\n          ])\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let stmts: ExpressionRef[] = [\n        module.createSetLocal(thisLocal.index,\n          this.compileCallDirect(\n            this.ensureConstructor(baseClassInstance, expression),\n            expression.arguments,\n            expression,\n            module.createIf(\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              this.makeAllocation(<Class>classInstance)\n            )\n          )\n        )\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing allocating `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.createBlock(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.createUnreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlinePrechecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\n      body.push(\n        module.createSetLocal(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    }\n\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, paramExpr)\n      );\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    this.currentFlow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    {\n      let stmts = this.compileFunctionBody(instance);\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n    this.currentType = returnType;\n\n    // Create an outer block that we can break to when returning a value out of order\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    this.currentFlow = trampoline.flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFlow = previousFlow;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        CompilerSymbols.argc,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return CompilerSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = CompilerSymbols.setargc;\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.signatureNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.createUnreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.createUnreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.createUnreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.createUnreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.createUnreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.createUnreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.createIf(\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\n                  ),\n                  module.createSetLocal(thisLocal.index,\n                    this.makeAllocation(<Class>classInstance)\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.createGetLocal(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.createBlock(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      this.currentFlow.actualFunction\n    );\n    this.currentType = Type.bool;\n    if (!expectedType) return module.createUnreachable();\n\n    // instanceof <basicType> must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.createI32(actualType == expectedType ? 1 : 0);\n    }\n    // <nullable> instanceof <nonNullable> must be != 0\n    if (\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\n      actualType.nonNullableType.isAssignableTo(expectedType)\n    ) {\n      return module.createBinary(\n        actualType.is(TypeFlags.LONG)\n          ? BinaryOp.NeI64\n          : BinaryOp.NeI32,\n        expr,\n        actualType.toNativeZero(module)\n      );\n    }\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\n          default: return module.createI32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    var buffer_offset = pos + arrayInstance.offsetof(\"buffer_\");\n    var length_offset = pos + arrayInstance.offsetof(\"length_\");\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? this.compileExpression(<Expression>expression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(expr);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var flow = this.currentFlow;\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    flow.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    this.currentFlow = instance.flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.createIf(\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.createGetLocal(0, nativeSizeType)\n        ),\n        module.createSetLocal(0,\n          this.makeAllocation(classInstance)\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.createGetLocal(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.createSetLocal(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    stmts.push(\n      module.createGetLocal(0, nativeSizeType)\n    );\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\n      stmts.length == 1\n        ? stmts[0]\n        : module.createBlock(null, stmts, nativeSizeType)\n    );\n    instance.finalize(module, funcRef);\n    this.currentFlow = previousFlow;\n    return instance;\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect(\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module)\n    );\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.freeScopedLocals();\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    ifElseFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(classInstance: Class): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n\n    // __gc_allocate(size, markFn)\n    if (program.hasGC && classInstance.type.isManaged(program)) {\n      let allocateInstance = assert(program.gcAllocateInstance);\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset),\n          module.createI32(\n            ensureGCHook(this, classInstance)\n          )\n        ],\n        options.nativeSizeType\n      );\n\n    // memory.allocate(size)\n    } else {\n      let allocateInstance = program.memoryAllocateInstance;\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset)\n        ],\n        options.nativeSizeType\n      );\n    }\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            this.compileExpression( // reports\n              initializerNode,\n              fieldType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            ),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.createGetLocal(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n\n  if (element.parent && element.parent.kind == ElementKind.NAMESPACE) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = element.name;\n  }\n  \n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Special compiler symbols. */\nnamespace CompilerSymbols {\n  /** Module started global. Used if an explicit start function is present. */\n  export const started = \"~lib/started\";\n  /** Argument count global. Used to call trampolines for varargs functions. */\n  export const argc = \"~lib/argc\";\n  /** Argument count setter. Exported for use by host calls. */\n  export const setargc = \"~lib/setargc\";\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeNode,\n    TypeDeclaration\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    TypeDefinition\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"../abi\";\nimport { PATH_DELIMITER } from \"../common\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): bool {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): bool {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): bool {\n        return declareType == \"Map\" || declareType == \"ArrayMap\";\n    }\n\n    static isArrayMap(declareType: string): bool {\n        return \"ArrayMap\" == declareType;\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): bool {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(<ClassDeclaration>classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): bool {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.name == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): bool {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): bool {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = (<ClassDeclaration>tempClz.declaration).implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    parent: Element;\n    typeNode: TypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(parent: Element ,typeNode: TypeNode) {\n        this.parent = parent;\n        this.typeNode = typeNode;\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): bool {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findElement(typeName);\n\n        if (type){\n\n            if (type.kind == ElementKind.TYPEDEFINITION) {\n\n                let typeDefine = <TypeDefinition>type;\n                let declaration = <TypeDeclaration>typeDefine.declaration;\n                let _typeNode = <TypeNode>declaration.type;\n                let name = _typeNode.name.range.toString();\n                if (AbiHelper.abiTypeLookup.get(name) && name != \"Asset\") {\n                    return AbiTypeEnum.NUMBER;\n                }\n                let path = _typeNode.range.source.internalPath;\n                let internalName = path + PATH_DELIMITER + name;\n                console.log(`simple path: ${_typeNode.range.source.simplePath}, ${internalName}`);\n                let aliasType = this.parent.lookup(internalName);\n                if (aliasType) {\n                    console.log(`Element kind: ${ElementKind[aliasType.kind]}`)\n                }\n                console.log(`abiTypeEnum/path: ${path}, name: ${name}`);\n            }\n            if (type.kind == ElementKind.CLASS_PROTOTYPE) {\n                return AbiTypeEnum.CLASS;\n            } \n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): bool {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsElement(typeName);\n        if (type == null) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): bool {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                if (AstUtil.isArrayMap(typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                } else {\n                    return `${this.getArgs().join(\",\")}{}`;\n                }\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        return this.parent.lookup(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    private findSourceAsElement(asTypeName: string): Element| null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Element | null = this.parent.lookup(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    private findSourceAsTypeName(typeName: string): string {\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | null = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition> element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getGetGlobalName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  bitsetIs,\n  bitsetSet\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow throws. */\n  THROWS = 1 << 2,\n  /** This flow breaks. */\n  BREAKS = 1 << 3,\n  /** This flow continues. */\n  CONTINUES = 1 << 4,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 6,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 7,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 8,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 9,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 10,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 11,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 12,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 13,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.wrappedLocals = i64_new(0);\n    flow.wrappedLocalsExt = null;\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `currentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = parentFunction.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = parentFunction.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(\n      name,\n      index,\n      type,\n      this.parentFunction\n    );\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the value of the local at the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    if (index < 0) return true; // inlined constant\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!(ext && i < ext.length)) return false;\n    return bitsetIs(ext[i], index - (i + 1) * 64);\n  }\n\n  /** Sets if the value of the local at the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    if (index < 0) return; // inlined constant\n    if (index < 64) {\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\n      return;\n    }\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!ext) {\n      this.wrappedLocalsExt = ext = new Array(i + 1);\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\n    } else {\n      while (ext.length <= i) ext.push(i64_new(0));\n    }\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !this.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","import {\n  SerializeInserter,\n  InsertPoint\n} from \"./inserter\";\n\nimport {\n  Type,\n  TypeKind,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  SignatureNode,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  CommonTypeNode,\n  TypeNode,\n  DecoratorNode,\n  Node,\n  ClassDeclaration,\n  TypeDeclaration\n} from \"./ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./util/primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n\n  private addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        return;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  resolveDatabaseDecorator(clsProto: ClassPrototype): void {\n    var decorators = clsProto.decoratorNodes;\n    if (!decorators) {\n      return;\n    }\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(clsProto, decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value\n   * @param expr\n   */\n  getExprValue(expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var internalName = AstUtil.getInternalName(expr);\n    var element: Element | null = this.program.elementsByName.get(internalName);\n    if (element) {\n      let declaration: VariableLikeDeclarationStatement | null = <VariableLikeDeclarationStatement> (<VariableLikeElement>element).declaration;\n      if (declaration && declaration.initializer) {\n        let literal: StringLiteralExpression = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  private getStructFromNode(ele: Element, node: Node): void {\n    var element = ele.lookup(node.range.toString())\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  private addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = (<ClassDeclaration>classPrototype.declaration).members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: CommonTypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(classPrototype, <TypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  private getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.name) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.name;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  private resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.name; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let [key, instance] of clzPrototype.instanceMembers) {\n        if (this.isActionFnPrototype(instance)) {\n          let funcProto = <FunctionPrototype>instance;\n  \n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(funcProto);\n          let declaration = funcProto.declaration;\n\n          let funcName = declaration.name.range.toString();\n          let params = funcProto.signatureNode.parameters; // FunctionDeclaration parameter types\n          let returnType = funcProto.signatureNode.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(funcProto, <TypeNode>type.type);\n\n            if (typeNodeAnalyzer.isArray()) {\n          \n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(funcProto, type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(funcProto, <TypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = <ClassDeclaration>(<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  private getActionAbility(statement: DeclarationStatement): string {\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function havn't action decoreator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  private resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = <FunctionDeclaration> funcPrototype.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = declaration.signature;\n    // var struct = this.parseSignatureToAbiStruct(funcName, signature);\n\n    var struct = new StructDef();\n    struct.name = funcName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: CommonTypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(funcPrototype,  <TypeNode>type);\n      let abiType = typeInfo.getAbiDeclareType();\n      struct.addField(parameter.name.range.toString(), abiType);\n      this.addAbiTypeAlias(typeInfo);\n    }\n\n\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(declaration)));\n  }\n\n  private printProgramInfo(): void {\n    var elements = this.program.elementsByName;\n    for (let [key, element] of elements) {\n      // if (element.name != \"---Token\"){\n      //   console.log(`element key: ${key}, type name: ${element.name}, type internal name: ${element.internalName}`);\n      //   console.log(`Element : ${element.toString()}`);\n      //   console.log(`------------------------------`)\n      // }\n\n      if (element.kind == ElementKind.TYPEDEFINITION && false) {\n        let type = <TypeDefinition>element;\n\n        console.log(`element key: ${key}, type name: ${type.name}, type internal name: ${type.internalName}`);\n        let declaration = <TypeDeclaration> type.declaration;\n        // declaration\n        console.log(`type declaration is: ${NodeKind[declaration.kind]}`);\n        console.log(`type declaration name: ${declaration.range.toString()}`)\n        console.log(`type declaration name: ${declaration.name.range.toString()}`)\n\n        let typeNode = <TypeNode>declaration.type;\n        console.log(`type common type node: ${typeNode.name.identifier.text}`);\n        console.log(`type common type node: ${typeNode.name.range.toString()}`);\n        console.log(`type common type node path: ${typeNode.range.toString()}`);\n        console.log(`type common type node path: ${typeNode.range.source.simplePath}`);\n        console.log(`type common type node path: ${typeNode.range.source.internalPath}`);\n        console.log(`type common type node: ${declaration.type.range.toString()}`);\n        // console.log()\n        console.log(`========`);\n      }\n    }\n\n    console.log(`Type Class ========`);\n\n    if (false) {\n      for (let [typeKind, aclass] of this.program.typeClasses) {\n        console.log(`TypeKind: ${typeKind}, class: ${aclass.name}`);\n      }\n    }\n    if (false) {\n      for (let [key, element] of this.program.instancesByName) {\n        console.log(`The program instance key: ${key}, instance type: ${ElementKind[element.kind]}`);\n      }\n    }\n\n    if (false) {\n      for (let [statement, declare] of this.program.elementsByDeclaration) {\n        console.log(`The program declaration`);\n        console.log(`  The statement: ${NodeKind[statement.kind]}`);\n        console.log(`  The declare: ${ElementKind[declare.kind]}`);\n      }\n    }\n  }\n\n  private resolve(): void {\n    // this.printProgramInfo();\n\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let [key, element] of this.program.elementsByName) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(key)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(key, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        return str.charCodeAt(0) == 0x22 && str.charCodeAt(str.length - 1) == 0x22;\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      let members = file.members;\n      if (!members) continue;\n      for (let member of members.values()) {\n        // FIXME: doesn't honor the actual externally visible name\n        this.visitElement(member);\n      }\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(<PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.name);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.name); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.parent.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    // TODO To support super()\n    } else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (arrowKind) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (member) members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n}\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64\n} from \"./module\";\n\nimport {\n  ElementKind,\n  OperatorKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n  export const i32_notify = \"~lib/builtins/i32.notify\";\n  export const i64_notify = \"~lib/builtins/i64.notify\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n  // std/memory.ts\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  // std/gc.ts\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      let classPrototype = classReference.prototype;\n      return module.createI32(\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\n          ? 1\n          : 0\n      );\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      return module.createI32(\n        classReference.lookupInSelf(\"length\") && (\n          classReference.lookupOverload(OperatorKind.INDEXED_GET) ||\n          classReference.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET)\n        ) ? 1 : 0\n      );\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.createI32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(byteSize);\n        } else {\n          expr = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(byteSize, 0);\n        } else {\n          expr = module.createI32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(alignLog2);\n        } else {\n          expr = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(alignLog2, 0);\n        } else {\n          expr = module.createI32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.createBinary(BinaryOp.XorI32,\n            module.createBinary(BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  wasm64 ? module.createI64(63) : module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.createBinary(BinaryOp.XorI64,\n            module.createBinary(BinaryOp.AddI64,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI64,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI64(63)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          expr = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.createLoad(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = outType;\n      return module.createAtomicLoad(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createAtomicStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.createAtomicRMW(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        inType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(\n          arg2,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = inType;\n      return module.createAtomicCmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        Type.i64,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicWait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicWake(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.createSelect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.createUnreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.GrowMemory, null, [\n        compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryCopy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u8,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryFill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        toType,\n        WrapMode.NONE\n      );\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.createUnreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(type, true /* arg0 is wrapped */);\n            expr = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      let expr = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.createUnreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.createUnreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i8, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i16, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.createUnreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      return module.createSIMDExtract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDReplace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = module.precomputeExpression(\n          compiler.compileExpression(operand, Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n        );\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createSIMDShuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDShift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createUnary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createSIMDBitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createUnary(op, arg0);\n    }\n\n    // === GC integration =========================================================================\n\n    case BuiltinSymbols.iterateRoots: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      compiler.currentType = Type.void;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.createUnreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringInstance.type.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        // messageArg,\n        // filenameArg,\n        // module.createI32(reportNode.range.line),\n        // module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if required. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeName = Signature.makeSignatureString([ Type.i32 ], Type.void);\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            typeName\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            typeName\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for library elements)\n  var members = classInstance.members;\n  if (classInstance.isDeclaredInLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        \"FUNCSIG$\" + (nativeSizeType == NativeType.I64 ? \"vj\" : \"vi\")\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    CommonTypeNode,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter, Verify\n} from \"./util/primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: CommonTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsByName.get(internalName);\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = <ClassDeclaration>this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = <FieldDeclaration>fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.TYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.name} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype,  <TypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.name} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsByName) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}