{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/util/collectionutil.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","Token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","diagnostics","super","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY_ENTRY","nativeFile","File","set","internalName","resolver","Resolver","AbiInfo","internalPath","source","text","buffer","offset","classInstance","payloadSize","writeI32","id","flags","NONE","range","Node","createVariableDeclaration","createIdentifierExpression","identifier","createTypeDeclaration","createOmittedType","createFunctionDeclaration","createFunctionType","createNamedType","createSimpleTypeName","createNamespaceDeclaration","signature","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","declaration","has","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","DiagnosticCode","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","join","A_class_may_only_extend_another_class","globalAliases","alias","firstChar","parseInt","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","values","sourceKind","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","typeArguments","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","type","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","decorators","acceptedFlags","decorator","fromNode","flag","fromKind","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","ClassPrototype","checkDecorators","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","push","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","UNSAFE","AMBIENT","EXTERNAL","STATIC","INTERFACE_PROTOTYPE","LAZY","READONLY","INLINE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","substring","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","AcyclicState","typedElements","TypedElement","RESOLVED","normalizedPath","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","bound","instanceKey","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","memoryOffset","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","x","NULL","TRUE","FALSE","typeName","TypeName","next","createTypeName","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","defaultType","elem","TypeParameterNode","ParameterNode","parameterKind","args","stmt","DecoratorNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","ClassExpression","expressions","CommaExpression","ConstructorExpression","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","BlockStatement","label","BreakStatement","ClassDeclaration","ContinueStatement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","NAMEDTYPE","typeArgumentNodes","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","nameNode","IDENTIFIER","nameStr","ACTION","DATABASE","IGNORE","PRIMARYID","PROPERTYACCESS","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","CALL","numArguments","COMMA","ELEMENTACCESS","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","exportPaths","pos","lastIndexOf","simplePath","LIBRARY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","relatedRange","arg0","arg1","arg2","replace","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","withRange","console","log","emitDiagnostic","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenSIMDLoadId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAndNotVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenMinSVecI8x16","_BinaryenMinUVecI8x16","_BinaryenMaxSVecI8x16","_BinaryenMaxUVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenMinSVecI16x8","_BinaryenMinUVecI16x8","_BinaryenMaxSVecI16x8","_BinaryenMaxUVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenMinSVecI32x4","_BinaryenMinUVecI32x4","_BinaryenMaxSVecI32x4","_BinaryenMaxUVecI32x4","_BinaryenDotSVecI16x8ToVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","_BinaryenSwizzleVec8x16","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","SIMDLoadOp","_BinaryenLoadSplatVec8x16","_BinaryenLoadSplatVec16x8","_BinaryenLoadSplatVec32x4","_BinaryenLoadSplatVec64x2","_BinaryenLoadExtSVec8x8ToVecI16x8","_BinaryenLoadExtUVec8x8ToVecI16x8","_BinaryenLoadExtSVec16x4ToVecI32x4","_BinaryenLoadExtUVec16x4ToVecI32x4","_BinaryenLoadExtSVec32x2ToVecI64x2","_BinaryenLoadExtUVec32x2ToVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","_BinaryenHost","_BinaryenLocalGet","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","result","paramTypes","_BinaryenAddFunctionType","_BinaryenGetFunctionTypeBySignature","_BinaryenRemoveFunctionType","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","tempName","typeRef","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","eventType","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","load","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","getExpressionId","UNLIMITED_MEMORY","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","ftype","_BinaryenFunctionTypeGetName","_BinaryenFunctionTypeGetNumParams","_BinaryenFunctionTypeGetParam","_BinaryenFunctionTypeGetResult","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Unreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Host","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","Exnref","types","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","Not_implemented","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","fieldInstance","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","RETURNED","CONDITIONALLY_RETURNED","inheritConditional","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","numThisLocalFlags","numOtherLocalFlags","min","isLocalFlag","WRAPPED","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","Options","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","Compiler","currentInlineFunctions","currentParent","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","events","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","ensureFunctionType","typesToNativeTypes","block","finalize","addFunctionExport","setStart","compileVisitGlobals","compileVisitMembers","removeGlobal","compileRTTI","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","local_get","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeReplace","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileElement","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","precomputeExpression","fromName","isGlobalMutable","getGlobal","warning","Mutable_value_cannot_be_inlined","makeZero","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","compileFunction","resultType","getFunctionTypeBySignature","addFunctionType","funcType","addEvent","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","isNonnull","temp","local_set","unary","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileClass","staticMembers","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","nop","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condFlow","condExpr","makeIsTrueish","hasScopedLocals","unifyLocalFlags","alwaysFalse","terminates","continues","breaks","fallsThrough","loop","popBreakLabel","unset","alwaysTrue","incrExpr","incrFlow","bodyFlow","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","CONSTANT","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","AstUtil","location","wrap","convertExpression","ensureSmallIntegerWrap","explicit","drop","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","info","Expression_is_never_null","local_tee","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","argc","Optional_parameter_must_have_an_initializer","setargc","ensureArgcVar","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","arrayType","tempDataStart","nativeElementType","ensureStaticArrayBuffer","bufferAddress","arraySegment","ensureStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","thisLocalIndex","fieldPrototype","idTemp","idExpr","conditions","single","Auto","declareType","isArrayType","bracketIndex","indexOf","endIndex","impledInterface","impledSerializable","classDeclaration","interfaceName","_type","tempClz","interfaces","implTypes","AbiTypeEnum","isString","isMapType","MAP","findElement","AbiHelper","abiTypeLookup","NUMBER","abiTypeEnum","getArgs","findSourceAsElement","findSourceAsTypeName","abiType","isArrayMap","argType","Collections","isEmptyArray","asTypeName","sourceTypeName","aliasTypeName","findSourceAbiType","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","call_direct","arg0Type","Type_0_is_not_a_function_index_or_function_reference","operandExprs","nativeParamTypes","operandType","Expression_must_be_a_compile_time_constant","instantiate","User_defined_0","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","isAcyclic","getArrayValueType","StructDef","fields","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","proposals","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","typeNodeAnalyzer","asTypes","getAsTypes","asType","getStructFromClzPrototype","haveSpecifyDecorator","clsProto","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","protoEle","Strings","isAroundQuotation","getInternalName","ele","struct","addFieldsFromClassPrototype","fieldDeclare","memberType","TypeNodeAnalyzer","getAbiDeclareType","addField","addAbiTypeAlias","addToStruct","clzPrototype","extendedContract","hasActionDecorators","contractName","contractVarName","isActionFnPrototype","funcProto","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","getArrayArgAbiTypeEnum","argTypeName","getArrayArg","rtnNodeAnly","isClassPrototype","impledReturnable","resolveDatabaseDecorator","impledInterfaces","funcPrototype","decoratorNode","getSpecifyDecorator","isValidAbility","parameter","typeInfo","getActionAbility","serializePoints","SerializeInserter","getInsertPoints","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","resolveClassDispatcher","addAll","dispatch","assemblyDispatch","getContent","undefined","beginChar","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","row","Decompiler","functionId","decompiler","decompile","finish","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","unknown","numMembers","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","clear","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","toText","binaryen","wrapModule","emitStackIR","toAsmjs","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","parser","parseFile","nextFile","getDependee","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","cls","map","isSet","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","readI32","readI64","valueI64","insertCode","insertPoints","insertPoint","insertPointArr","_","descComparator","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","fnName","hasImpl","Verify","verify","serializePoint","SerializePoint","countOfPkDecorator","serialize","increase","deserialize","fieldDeclaration","checkSerializable","serializeField","deserializeField","isPrimaryType","primaryKey","getDeclareType","serializeClassname","getSerializePoint","indentity"],"mappings":"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KAAK/iD,EAAMwqB,IACX,KAAKxqB,EAAM8R,IACX,KAAK9R,EAAM4oB,WACX,KAAK5oB,EAAMkjD,GACX,KAAKljD,EAAMmjD,MACX,KAAKnjD,EAAMqjD,OACX,KAAKrjD,EAAMkX,UACX,KAAKlX,EAAM8e,KACX,KAAK9e,EAAMyS,SACX,KAAKzS,EAAM+R,IACX,KAAK/R,EAAM2jD,KACX,KAAK3jD,EAAMkrB,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYlrB,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYkiD,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAwKA,0BAwBA,uCAA4C5uD,GAE1C,OADAiK,OAAOjK,EAAKkK,QACJlK,EAAKsK,WAAW,IACtB,KAAK,IAA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1vC,MAAqB6zE,GACxC,IAAK,IAAIh7E,EAAI,EAAGA,EAAIg7E,IAASh7E,EAAG62C,EAAS72C,GAAK,EAAAkqE,cAAcuhB,EAAQzrF,GACpE,OAAOV,EAAO8uE,MAAM,EAAArE,aAAa0hB,GAAS50C,EAAU76B,IAGxD,OAAO1c,EAAO8uE,MAAM,KAAMwF,EACxB53D,GAAQ,EAAAse,WAAWoxD,KACf,EAAAjmB,kBAAkBmO,EAAMnpE,EAAS,IACjCuR,GAhBR,a,8ECh+RA,SAAYvF,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA1IF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA8I1B,kCAAuCyiB,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,m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ACAhpE,QACEu+D,QACAzgH,QAAQmR,KAGZswG,QACEyJ,EACA/I,QACEjgE,QACEu+D,QACAzgH,QAAQmR,Q,8EC9BpB,SAAkBi6G,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B3+H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAM4+H,EAAS,GAAJ5+H,EACX,OAAO4+H,GAAM,IAAcA,GAAM,KACrB,IAAL5+H,GACK,IAALA,GACAA,EAAI,SAmLqB64B,EAnLY74B,GAoL9B,KAAO64B,EAAO,QACrBgmG,EAAmBhmG,EAAaimG,IAFzC,IAAkCjmG,GA/KlC,8BAAmC74B,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAM4+H,EAAS,GAAJ5+H,EACX,OAAO4+H,GAAM,IAAcA,GAAM,KAC1B5+H,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB64B,EAzKY74B,GA0K7B,KAAO64B,EAAO,QACrBgmG,EAAmBhmG,EAAakmG,IAFzC,IAAiClmG,GArKjC,MAAMimG,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  AbiInfo\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  getAbiInfo(): AbiInfo {\n    var abiInfo = new AbiInfo(this);\n    return abiInfo;\n  }\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {    \n          // this.warning(\n          //   DiagnosticCode.Not_implemented,\n          //   implementsTypes[i].range\n          // );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10,\n  /** Is a database */\n  DATABASE = 1 << 11,\n  /** Is a action */\n  ACTION = 1 << 12,\n  /** Is a ignore */\n  IGNORE = 1 << 13\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\n// export function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n//   switch (kind) {\n//     case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n//     case DecoratorKind.OPERATOR:\n//     case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n//     case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n//     case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n//     case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n//     case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n//     case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n//     case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n//     case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n//     // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n//     // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n//     // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n//     case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n//     case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n//     default: return DecoratorFlags.NONE;\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.typeName = typeName;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.a: {\n          if (nameStr == \"action\") return DecoratorKind.ACTION;\n          break;\n        }\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.d: {\n          if (nameStr == \"database\") return DecoratorKind.DATABASE\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.p: {\n          if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  kind = NodeKind.NEW;\n\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      //console.log(<string>new Error(\"stack\").stack);\n      //throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Anyref = _BinaryenTypeAnyref(),\n  Exnref = _BinaryenTypeExnref(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = _BinaryenFeatureMVP(),\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\n  TailCall = _BinaryenFeatureTailCall(),\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\n  All = _BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  AtomicFence = _BinaryenAtomicFenceId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDTernary = _BinaryenSIMDTernaryId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  SIMDLoad = _BinaryenSIMDLoadId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId(),\n  Try = _BinaryenTryId(),\n  Throw = _BinaryenThrowId(),\n  Rethrow = _BinaryenRethrowId(),\n  BrOnExn = _BinaryenBrOnExnId(),\n  Push = _BinaryenPushId(),\n  Pop = _BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\n  NotV128 = _BinaryenNotVec128(),\n  NegI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\n  NegF32x4 = _BinaryenNegVecF32x4(),\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\n  NegF64x2 = _BinaryenNegVecF64x2(),\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = _BinaryenEqVecI8x16(),\n  NeI8x16 = _BinaryenNeVecI8x16(),\n  LtI8x16 = _BinaryenLtSVecI8x16(),\n  LtU8x16 = _BinaryenLtUVecI8x16(),\n  LeI8x16 = _BinaryenLeSVecI8x16(),\n  LeU8x16 = _BinaryenLeUVecI8x16(),\n  GtI8x16 = _BinaryenGtSVecI8x16(),\n  GtU8x16 = _BinaryenGtUVecI8x16(),\n  GeI8x16 = _BinaryenGeSVecI8x16(),\n  GeU8x16 = _BinaryenGeUVecI8x16(),\n  EqI16x8 = _BinaryenEqVecI16x8(),\n  NeI16x8 = _BinaryenNeVecI16x8(),\n  LtI16x8 = _BinaryenLtSVecI16x8(),\n  LtU16x8 = _BinaryenLtUVecI16x8(),\n  LeI16x8 = _BinaryenLeSVecI16x8(),\n  LeU16x8 = _BinaryenLeUVecI16x8(),\n  GtI16x8 = _BinaryenGtSVecI16x8(),\n  GtU16x8 = _BinaryenGtUVecI16x8(),\n  GeI16x8 = _BinaryenGeSVecI16x8(),\n  GeU16x8 = _BinaryenGeUVecI16x8(),\n  EqI32x4 = _BinaryenEqVecI32x4(),\n  NeI32x4 = _BinaryenNeVecI32x4(),\n  LtI32x4 = _BinaryenLtSVecI32x4(),\n  LtU32x4 = _BinaryenLtUVecI32x4(),\n  LeI32x4 = _BinaryenLeSVecI32x4(),\n  LeU32x4 = _BinaryenLeUVecI32x4(),\n  GtI32x4 = _BinaryenGtSVecI32x4(),\n  GtU32x4 = _BinaryenGtUVecI32x4(),\n  GeI32x4 = _BinaryenGeSVecI32x4(),\n  GeU32x4 = _BinaryenGeUVecI32x4(),\n  EqF32x4 = _BinaryenEqVecF32x4(),\n  NeF32x4 = _BinaryenNeVecF32x4(),\n  LtF32x4 = _BinaryenLtVecF32x4(),\n  LeF32x4 = _BinaryenLeVecF32x4(),\n  GtF32x4 = _BinaryenGtVecF32x4(),\n  GeF32x4 = _BinaryenGeVecF32x4(),\n  EqF64x2 = _BinaryenEqVecF64x2(),\n  NeF64x2 = _BinaryenNeVecF64x2(),\n  LtF64x2 = _BinaryenLtVecF64x2(),\n  LeF64x2 = _BinaryenLeVecF64x2(),\n  GtF64x2 = _BinaryenGtVecF64x2(),\n  GeF64x2 = _BinaryenGeVecF64x2(),\n  AndV128 = _BinaryenAndVec128(),\n  OrV128 = _BinaryenOrVec128(),\n  XorV128 = _BinaryenXorVec128(),\n  AndNotV128 = _BinaryenAndNotVec128(),\n  AddI8x16 = _BinaryenAddVecI8x16(),\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\n  SubI8x16 = _BinaryenSubVecI8x16(),\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\n  MulI8x16 = _BinaryenMulVecI8x16(),\n  MinI8x16 = _BinaryenMinSVecI8x16(),\n  MinU8x16 = _BinaryenMinUVecI8x16(),\n  MaxI8x16 = _BinaryenMaxSVecI8x16(),\n  MaxU8x16 = _BinaryenMaxUVecI8x16(),\n  AddI16x8 = _BinaryenAddVecI16x8(),\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\n  SubI16x8 = _BinaryenSubVecI16x8(),\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\n  MulI16x8 = _BinaryenMulVecI16x8(),\n  MinI16x8 = _BinaryenMinSVecI16x8(),\n  MinU16x8 = _BinaryenMinUVecI16x8(),\n  MaxI16x8 = _BinaryenMaxSVecI16x8(),\n  MaxU16x8 = _BinaryenMaxUVecI16x8(),\n  AddI32x4 = _BinaryenAddVecI32x4(),\n  SubI32x4 = _BinaryenSubVecI32x4(),\n  MulI32x4 = _BinaryenMulVecI32x4(),\n  MinI32x4 = _BinaryenMinSVecI32x4(),\n  MinU32x4 = _BinaryenMinUVecI32x4(),\n  MaxI32x4 = _BinaryenMaxSVecI32x4(),\n  MaxU32x4 = _BinaryenMaxUVecI32x4(),\n  DotI16x8 = _BinaryenDotSVecI16x8ToVecI32x4(),\n  AddI64x2 = _BinaryenAddVecI64x2(),\n  SubI64x2 = _BinaryenSubVecI64x2(),\n  AddF32x4 = _BinaryenAddVecF32x4(),\n  SubF32x4 = _BinaryenSubVecF32x4(),\n  MulF32x4 = _BinaryenMulVecF32x4(),\n  DivF32x4 = _BinaryenDivVecF32x4(),\n  MinF32x4 = _BinaryenMinVecF32x4(),\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\n  AddF64x2 = _BinaryenAddVecF64x2(),\n  SubF64x2 = _BinaryenSubVecF64x2(),\n  MulF64x2 = _BinaryenMulVecF64x2(),\n  DivF64x2 = _BinaryenDivVecF64x2(),\n  MinF64x2 = _BinaryenMinVecF64x2(),\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8(),\n  SwizzleV8x16 = _BinaryenSwizzleVec8x16()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = _BinaryenShlVecI8x16(),\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\n  ShlI16x8 = _BinaryenShlVecI16x8(),\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\n  ShlI32x4 = _BinaryenShlVecI32x4(),\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\n  ShlI64x2 = _BinaryenShlVecI64x2(),\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\n  ShrU64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = _BinaryenBitselectVec128(),\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = _BinaryenLoadSplatVec8x16(),\n  LoadSplatV16x8 = _BinaryenLoadSplatVec16x8(),\n  LoadSplatV32x4 = _BinaryenLoadSplatVec32x4(),\n  LoadSplatV64x2 = _BinaryenLoadSplatVec64x2(),\n  LoadI8ToI16x8 = _BinaryenLoadExtSVec8x8ToVecI16x8(),\n  LoadU8ToU16x8 = _BinaryenLoadExtUVec8x8ToVecI16x8(),\n  LoadI16ToI32x4 = _BinaryenLoadExtSVec16x4ToVecI32x4(),\n  LoadU16ToU32x4 = _BinaryenLoadExtUVec16x4ToVecI32x4(),\n  LoadI32ToI64x2 = _BinaryenLoadExtSVec32x2ToVecI64x2(),\n  LoadU32ToU64x2 = _BinaryenLoadExtUVec32x2ToVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return _BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return _BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // function types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionTypeRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  // table\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    try {\n      _BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  // meta\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// function types\n\nexport function getFunctionTypeName(ftype: FunctionTypeRef): string | null {\n  return readString(_BinaryenFunctionTypeGetName(ftype));\n}\n\nexport function getFunctionTypeParamCount(ftype: FunctionTypeRef): Index {\n  return _BinaryenFunctionTypeGetNumParams(ftype);\n}\n\nexport function getFunctionTypeParam(ftype: FunctionTypeRef, index: Index): NativeType {\n  return _BinaryenFunctionTypeGetParam(ftype, index);\n}\n\nexport function getFunctionTypeResult(ftype: FunctionTypeRef): NativeType {\n  return _BinaryenFunctionTypeGetResult(ftype);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(_BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return _BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return _BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return _BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(_BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return _BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(_BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return _BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return _BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(_BinaryenIfGetCondition(expr))\n          || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(_BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(_BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(_BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(_BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(_BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(_BinaryenTryGetBody(expr), data);\n      visit(_BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(_BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(_BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n  /** An internal exception reference. */\n  EXNREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: assert(false);\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.EXNREF: return \"e\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** An internal exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is a function parameter. */\n  PARAMETER = 1 << 1,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 2,\n  /** Local is non-null. */\n  NONNULL = 1 << 3,\n  /** Local is read from. */\n  READFROM = 1 << 4,\n  /** Local is written to. */\n  WRITTENTO = 1 << 5,\n  /** Local is retained. */\n  RETAINED = 1 << 6,\n  /** Local is returned. */\n  RETURNED = 1 << 7,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 8,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 9,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 10,\n  /** Local is conditionally returned. */\n  CONDITIONALLY_RETURNED = 1 << 11,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | PARAMETER\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED\n                  | RETURNED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED\n                  | CONDITIONALLY_RETURNED,\n\n  /** Any written to flag. */\n  ANY_WRITTENTO = WRITTENTO\n                | CONDITIONALLY_WRITTENTO,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED,\n\n  /** Any returned flag. */\n  ANY_RETURNED = RETURNED\n               | CONDITIONALLY_RETURNED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && scope.has(name)) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n      if (flags & LocalFlags.RETURNED)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  EventRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\nimport { AstUtil } from \"./util/astutil\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Registered event types. */\n  events: Map<string, EventRef> = new Map();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable, module.i32(0));\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeReplace(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = this.makeZero(type);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Either reuses or creates the event type matching the specified name. */\n  ensureEventType(\n    name: string,\n    parameterTypes: Type[] | null\n  ): EventRef {\n    var events = this.events;\n    if (events.has(name)) return events.get(name)!;\n    var module = this.module;\n    var funcType = this.ensureFunctionType(parameterTypes, Type.void);\n    var eventType = module.addEvent(name, 0, funcType);\n    events.set(name, eventType);\n    return eventType;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    // Compile the condition before the body in order to...\n    var condFlow = outerFlow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    assert(!condFlow.hasScopedLocals);\n    // ...unify local states before and after the condition has been executed the first time\n    innerFlow.unifyLocalFlags(condFlow);\n    this.currentFlow = innerFlow;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) {\n      this.performAutoreleases(innerFlow, stmts);\n      if (!alwaysFalse) { // (4)\n        stmts.push(module.br(continueLabel, condExpr));\n      }\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile the incrementor before the body in order to...\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) {\n      let incrFlow = innerFlow.fork();\n      this.currentFlow = incrFlow;\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n      assert(!incrFlow.hasScopedLocals);\n      this.currentFlow = innerFlow;\n      // ...unify local states before and after the incrementor has been executed the first time\n      innerFlow.unifyLocalFlags(incrFlow);\n    }\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var bodyFlow = innerFlow.fork();\n    this.currentFlow = bodyFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\n    bodyFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    bodyFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    // Finalize body flow\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\n    bodyFlow.freeScopedLocals();\n    innerFlow.inherit(bodyFlow);\n    this.currentFlow = innerFlow;\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            let index = getLocalGetIndex(expr);\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    try {\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    } catch (exception) {\n      console.log(`Compile expression failed, the location in ${AstUtil.location(expression.range)}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(type);\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(temp.index, expr),\n            module.local_get(temp.index, type.toNativeType()),\n            module.unreachable()\n          );\n          flow.freeTempLocal(temp);\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n              module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, parent.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, parent.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let targetType = (<Class>parent).type;\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(targetType);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          module.local_get(localIndex, type.toNativeType()),\n          valueExpr,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          module.global_get(global.internalName, nativeType), // oldRef\n          valueExpr, // newRef\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              module.local_tee(tempValue.index, valueExpr), // newRef\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            valueExpr, // newRef\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(oldExpr: ExpressionRef, newExpr: ExpressionRef, alreadyRetained: bool = false): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.block(null, stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          // TODO: anyref context yields <usize>0\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        if (target.parent != flow.parentFunction) {\n          // Closures are not yet supported\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          this.currentType = type;\n          return module.unreachable();\n        }\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = this.makeZero(fieldType);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n\n  if (element.parent && element.parent.kind == ElementKind.NAMESPACE) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = element.name;\n  }\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeDeclaration,\n    NamedTypeNode\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    TypeDefinition\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"../abi\";\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): bool {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): bool {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): bool {\n        return declareType == \"Map\" || declareType == \"ArrayMap\";\n    }\n\n    static isArrayMap(declareType: string): bool {\n        return \"ArrayMap\" == declareType;\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): bool {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(<ClassDeclaration>classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): bool {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.name == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): bool {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): bool {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = (<ClassDeclaration>tempClz.declaration).implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    parent: Element;\n    typeNode: NamedTypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(parent: Element ,typeNode: NamedTypeNode) {\n        this.parent = parent;\n        this.typeNode = typeNode;\n        // Here various clz[]'s type name is [], not clz.\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): bool {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findElement(typeName);\n\n        if (type) {\n            if (type.kind == ElementKind.TYPEDEFINITION) {\n                let typeDefine = <TypeDefinition>type;\n                let declaration = <TypeDeclaration>typeDefine.declaration;\n                let _typeNode = <NamedTypeNode>declaration.type;\n                let name = _typeNode.name.range.toString();\n                if (AbiHelper.abiTypeLookup.get(name) && name != \"Asset\") {\n                    return AbiTypeEnum.NUMBER;\n                }\n            }\n            if (type.kind == ElementKind.CLASS_PROTOTYPE) {\n                return AbiTypeEnum.CLASS;\n            }\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): bool {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsElement(typeName);\n        if (type != null && type.kind == ElementKind.CLASS_PROTOTYPE) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): bool {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                if (AstUtil.isArrayMap(typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                } else {\n                    return `${this.getArgs().join(\",\")}{}`;\n                }\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        return this.parent.lookup(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    private findSourceAsElement(asTypeName: string): Element | null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Element | null = this.parent.lookup(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    private findSourceAsTypeName(typeName: string): string {\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition>element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | undefined = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        var element = this.parent.lookup(typeName);\n        if (element && element.kind == ElementKind.TYPEDEFINITION) {\n            let typeDefine = <TypeDefinition> element;\n            let aliasTypeName = typeDefine.typeNode.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          case TypeKind.EXNREF: { value = \"exnref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct:\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\n          operands[0].range, arg0Type.toString()\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinSymbols.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_dot_i16x8_s: return deferASM(BuiltinSymbols.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = compiler.makeZero(stringInstance.type);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        // messageArg,\n        // filenameArg,\n        // module.i32(reportNode.range.line),\n        // module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","import {\n  SerializeInserter,\n  InsertPoint\n} from \"./inserter\";\n\nimport {\n  Type,\n  TypeKind,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  TypeNode,\n  DecoratorNode,\n  Node,\n  ClassDeclaration,\n  NamedTypeNode\n} from \"./ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./util/primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n  private addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        continue;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  resolveDatabaseDecorator(clsProto: ClassPrototype): void {\n    var decorators = clsProto.decoratorNodes;\n    if (!decorators) {\n      return;\n    }\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(clsProto ,decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(clsProto, decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value.\n   * @param expr\n   */\n  getExprValue(protoEle: Element,expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var element: Element | null | undefined = protoEle.lookup(arg);\n    var internalName = AstUtil.getInternalName(expr);\n    if (!element) {\n      element = this.program.elementsByName.get(internalName);\n    }\n    if (element) {\n      let declaration = <VariableLikeDeclarationStatement> (<VariableLikeElement>element).declaration;\n      if (declaration.initializer) {\n        let literal = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  private getStructFromNode(ele: Element, node: Node): void {\n    var element = ele.lookup(node.range.toString());\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  private addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = (<ClassDeclaration>classPrototype.declaration).members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: TypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(classPrototype, <NamedTypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  private getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.name) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.name;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  private resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.name; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let [key, instance] of clzPrototype.instanceMembers) {\n        if (this.isActionFnPrototype(instance)) {\n          let funcProto = <FunctionPrototype>instance;\n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(funcProto);\n          let declaration = funcProto.declaration;\n\n          let funcName = declaration.name.range.toString();\n          let params = funcProto.functionTypeNode.parameters; // FunctionDeclaration parameter types\n          let returnType = funcProto.functionTypeNode.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>type.type);\n\n            if (typeNodeAnalyzer.isArray()) {\n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(funcProto, type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(funcProto, <NamedTypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = <ClassDeclaration>(<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  private getActionAbility(funcPrototype: FunctionPrototype): string {\n    var statement = funcPrototype.declaration;\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function don't have action decorator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(funcPrototype, args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  private resolveFunctionPrototype(funcProto: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = <FunctionDeclaration> funcProto.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = declaration.signature;\n\n    var struct = new StructDef();\n    struct.name = funcName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: TypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(funcProto,  <NamedTypeNode>type);\n      let abiType = typeInfo.getAbiDeclareType();\n      struct.addField(parameter.name.range.toString(), abiType);\n      this.addAbiTypeAlias(typeInfo);\n    }\n\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(funcProto)));\n  }\n\n  private resolve(): void {\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let [key, element] of this.program.elementsByName) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(key)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(key, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        var beginChar = str.charCodeAt(0);\n        var endChar = str.charCodeAt(str.length - 1);\n        return (beginChar == endChar) && (beginChar == 0x22 || beginChar == 0x27);\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(name, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    // TODO To support super()\n    } else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier()) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  // signbit: {\n  //   value: function signbit(x) {\n  //     F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n  //   }\n  // },\n  // sincos: {\n  //   value: function sincos(x) {\n  //     this.sincos_sin = Math.sin(x);\n  //     this.sincos_cos = Math.cos(x);\n  //   }\n  // }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false,\n  /** Parser reference. */\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    NamedTypeNode\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter,\n    Verify\n} from \"./util/primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | undefined = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line - 2;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: NamedTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | undefined = this.classPrototype.program.elementsByName.get(internalName);\n\n        // var element = this.classPrototype.lookup(typeNode.range.toString());\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = <ClassDeclaration>this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = <FieldDeclaration>fieldPrototype.declaration;\n                let commonType: TypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <NamedTypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(<NamedTypeNode>commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.NAMEDTYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.name} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype,  <NamedTypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.name} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: NamedTypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n\n    toString(): string {\n        return this.serialize.toString();\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsByName) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n"],"sourceRoot":""}