{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/primitiveutil.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/util/collectionutil.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__18__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","OperatorKind","common_1","diagnostics_1","types_1","ast_1","module_1","abi_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","__extends","getAbiInfo","AbiInfo","getSource","normalizedPath","k","source","lookupSourceByPath","normalizedPathWithoutExtension","tmp","LIBRARY_PREFIX","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","Array","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","set","internalName","currentFilespace","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","declaration","element","tryLocateImport","externalName","localName","splice","externalNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","range","parent","path","text","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","alias","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","type","FUNCTION_PROTOTYPE","startFunction","isAny","CommonFlags","GENERIC","AMBIENT","MAIN","resolveFunction","members","signature","parameterTypes","signatureReference","returnType","byteSize","globalName","is","Global","NONE","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","decorators","acceptedFlags","presentFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","BUILTIN","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","GLOBAL","SOURCE","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","identifier","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","STATIC","staticField","INLINE","READONLY","findDecorator","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","GETTER_PREFIX","SETTER_PREFIX","staticName","STATIC_DELIMITER","staticPrototype","instanceName","INSTANCE_DELIMITER","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","externalIdentifier","prefix","FILESPACE_PREFIX","PATH_DELIMITER","FILESPACE","referencedName","referencedElement","seen","Set","add","EXTERNAL","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","typeParameters","global_1","CONST","DiagnosticEmitter","Element","program","flags","_internalName","replaceComma","str","result","str_1","str_1_1","ch","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","initializer","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","CLASS","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","typeArguments","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","global_2","getGetGlobalName","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","toType","tokenizer_1","Token","util_1","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","PARENTHESIZED","nodeIsGenericCallable","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createSignature","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","expression","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","ACTION","DATABASE","IGNORE","PRIMARYID","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","SourceKind","Statement","Source","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","PARENT_SUBST","INNER_DELIMITER","LIBRARY_SUBST","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","emitDiagnostic","console","log","stack","info","warning","__export","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","AbiTypeEnum","collectionutil_1","AstUtil","haveSpecifyDecorator","getSpecifyDecorator","isString","getInternalName","getArrayTypeArgument","declareType","isArrayType","bracketIndex","indexOf","endIndex","isMapType","isArrayMap","impledSerializable","impledInterface","impledReturnable","classDeclaration","interfaceName","implementsTypes_1","implementsTypes_1_1","extendedContract","isClassPrototype","isSpecifyElement","impledInterfaces","tempClz","interfaces","implTypes","implTypes_1","implTypes_1_1","location","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printProgramInstances","keys_1","keys_1_1","printProgramElements","elements_1","elements_1_1","printClassPrototype","elements_2","elements_2_1","_e","TypeNodeAnalyzer","typeNode","getDeclareType","isVoid","MAP","findSourceAsType","NUMBER","isArray","abiTypeEnum","getArrayArgAbiTypeEnum","getArgs","isPrimaryType","findSourceAsTypeName","getArrayArg","getAbiDeclareType","abiType","argType","args_1","args_1_1","getAsTypes","Collections","isEmptyArray","findElement","asTypeName","sourceTypeName","typeAlias","aliasTypeName","findSourceAbiType","AbiHelper","abiTypeLookup","builtins_1","astutil_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_f","_g","_h","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_j","_k","fullName","_l","_m","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","compileNopExpression","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","inserter_1","primitiveutil_1","StructDef","fields","addField","AbiAliasDef","newTypeName","wasmType","new_type_name","ActionDef","ability","ricardian_contract","isValidAbility","proposals","TableDef","indexType","index_type","keys_names","keys_types","AbiDef","version","structs","actions","tables","abiInfo","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","resolve","parseSignatureToAbiStruct","methodName","struct","parameters_1","parameters_1_1","parameter","typeInfo","addAbiTypeAlias","typeNodeAnalyzer","asTypes","asTypes_1","asTypes_1_1","asType","getStructFromClzPrototype","isActionFnPrototype","funcType","resolveDatabaseDecorator","getExprValue","AbiUtils","checkDatabaseName","getStructFromNode","Strings","isAroundQuotation","getElementFromExpr","addFieldsFromClassPrototype","members_1","members_1_1","fieldDeclare","memberName","memberType","addToStruct","resolveClassDispatcher","clzPrototype","hasActionDecorators","contractName","contractVarName","resolveFunctionPrototype","funcName","params","checkActionName","argAbiTypeEnum","argTypeName","rtnNodeAnly","declaration_1","impledInterfaces_1","impledInterfaces_1_1","getActionAbility","decoratorNode","funcPrototype","serializeInserter","SerializeInserter","superInserter","SuperInserter","serializePoints","getInsertPoints","superPoints","mergedPoints","concat","InsertPoint","toSortedMap","dispatchIndenter","Indenter","classDispatch","addAll","dispatch","assemblyDispatch","getContent","undefined","removeQuotation","name_1","name_1_1","aChar","DATABASE_CHARSETS","indentX1","indentX2","indentX4","padding","indent","increase","row","decrease","body_1","body_1_1","Verify","verify","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","typeParameterNodes","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_TARGET","F64","Float64Array","U64","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","Math","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","NaN","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","fromCodePoint","Number","isInteger","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","stringType","existingIndex","gcPrototype","gcInstance","VIRTUAL","nativeSizeSize","baseInstance","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","insertCode","insertPoints","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getCodes","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needSerialize","needDeserialize","needPrimaryid","existing","fnName","checkSerializable","hasImpl","getSerializePoint","serializePoint","SerializePoint","countOfPkDecorator","serialize","deserialize","serializeField","deserializeField","primaryKey","serializeClassname","indentity","classNames","baseClassNames","identity","processConstructor","ConstructorResolver","generateSuperExprInserter","baseConstructorResolver","getClassIdentity","generateConstructorInsert","setStmtsWithoutComments","setHavingSuperExpr","stmtsWithoutComments","havingSuperExpr","isBlockBody","blockStatements","_stmt","getSuperExpr","getClassName","keyword","havingBaseConstructorMethod","generateConstructor","contents","callSuperExpr","generateCallSuperExpr","getSignature","getBaseClassName","newArray","decompiler_1","definitions_1","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","Drop","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","typeToString","visitInterface","numMembers","members_2","members_2_1","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,QAAA,YAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,o6BC7EA,IA6IYC,EA7IZC,EAAAnC,EAAA,GAgBAoC,EAAApC,EAAA,GAMAqC,EAAArC,EAAA,GAOAsC,EAAAtC,EAAA,GAsCAuC,EAAAvC,EAAA,GAuCAwC,EAAAxC,EAAA,IAGAyC,EAAAzC,EAAA,IAKA0C,EAAA,WAKA,OALA,gBAQAC,EAAA,WAIA,OAJA,gBAOAC,EAAA,WAGA,OAHA,gBA4DA,SAASC,EAA0BC,EAA8BC,GAE/D,OADAC,OAAOD,EAAIE,QACHH,GACN,KAAKR,EAAAY,cAAcC,SACnB,KAAKb,EAAAY,cAAcE,gBACjB,OAAQL,EAAIM,WAAW,IACrB,QACE,GAAW,MAAPN,EAAa,OAAOb,EAAaoB,YACrC,GAAW,OAAPP,EAAc,OAAOb,EAAaqB,YACtC,MAEF,SACE,GAAW,MAAPR,EAAa,OAAOb,EAAasB,sBACrC,GAAW,OAAPT,EAAc,OAAOb,EAAauB,sBACtC,MAEF,QACE,GAAW,KAAPV,EAAY,OAAOb,EAAawB,IACpC,MAEF,QACE,GAAW,KAAPX,EAAY,OAAOb,EAAayB,IACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOb,EAAa0B,IACpC,GAAW,MAAPb,EAAa,OAAOb,EAAa2B,IACrC,MAEF,QACE,GAAW,KAAPd,EAAY,OAAOb,EAAa4B,IACpC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOb,EAAa6B,IACpC,MAEF,QACE,GAAW,KAAPhB,EAAY,OAAOb,EAAa8B,YACpC,MAEF,SACE,GAAW,KAAPjB,EAAY,OAAOb,EAAa+B,WACpC,MAEF,QACE,GAAW,KAAPlB,EAAY,OAAOb,EAAagC,YACpC,MAEF,QACE,GAAW,MAAPnB,EAAa,OAAOb,EAAaiC,GACrC,MAEF,QACE,GAAW,MAAPpB,EAAa,OAAOb,EAAakC,GACrC,MAEF,QACE,GAAW,KAAPrB,EAAY,OAAOb,EAAamC,GACpC,GAAW,MAAPtB,EAAa,OAAOb,EAAaoC,GACrC,GAAW,MAAPvB,EAAa,OAAOb,EAAaqC,YACrC,GAAW,OAAPxB,EAAc,OAAOb,EAAasC,cACtC,MAEF,QACE,GAAW,KAAPzB,EAAY,OAAOb,EAAauC,GACpC,GAAW,MAAP1B,EAAa,OAAOb,EAAawC,GACrC,GAAW,MAAP3B,EAAa,OAAOb,EAAayC,YAIzC,MAEF,KAAKrC,EAAAY,cAAc0B,gBACjB,OAAQ7B,EAAIM,WAAW,IACrB,QACE,GAAW,KAAPN,EAAY,OAAOb,EAAa2C,KACpC,GAAW,MAAP9B,EAAa,OAAOb,EAAa4C,WACrC,MAEF,QACE,GAAW,KAAP/B,EAAY,OAAOb,EAAa6C,MACpC,GAAW,MAAPhC,EAAa,OAAOb,EAAa8C,WACrC,MAEF,QACE,GAAW,KAAPjC,EAAY,OAAOb,EAAa+C,IACpC,MAEF,SACE,GAAW,KAAPlC,EAAY,OAAOb,EAAagD,YAIxC,MAEF,KAAK5C,EAAAY,cAAciC,iBACjB,OAAQpC,EAAIM,WAAW,IACrB,QACE,GAAW,MAAPN,EAAa,OAAOb,EAAakD,YACrC,MAEF,QACE,GAAW,MAAPrC,EAAa,OAAOb,EAAamD,aAO7C,OAAOnD,EAAaoD,SA9JtB,SAAYpD,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAA3C,EAAA2C,eAAA3C,EAAA2C,kBAiKZ,IAovDYqD,EAmCAC,EAvxDNC,EAAa,IAAIC,IAGvBC,EAAA,SAAAC,GAwDE,SAAAD,EAAYE,QAAA,IAAAA,MAAA,MAAZ,IAAAC,EACEF,EAAAvF,KAAAR,KAAMgG,IAAYhG,YAlDpBiG,EAAAC,kBAAyB,EAKzBD,EAAAE,eAAsC,IAAIN,IAE1CI,EAAAG,gBAAuC,IAAIP,IAE3CI,EAAAI,YAAgCT,EAEhCK,EAAAK,YAAqC,IAAIT,IAEzCI,EAAAM,iBAAwC,IAAIV,IAE5CI,EAAAO,mBAA+C,IAAIX,IAGnDI,EAAAQ,oBAAoC,KAEpCR,EAAAS,eAAwC,KAExCT,EAAAU,eAA+B,KAI/BV,EAAAW,aAAyC,KAEzCX,EAAAY,cAAiC,KAEjCZ,EAAAa,uBAA0C,KAG1Cb,EAAAc,OAAc,EAEdd,EAAAe,mBAAsC,KAEtCf,EAAAgB,eAAkC,KAElChB,EAAAiB,eAAkC,KAElCjB,EAAAkB,aAAoB,EAEpBlB,EAAAmB,aAAoB,EAQlBnB,EAAKoB,SAAW,IAAIzE,EAAA0E,SAASrB,GAC7BA,EAAKsB,aAmrDT,OA9uD6BC,EAAA1B,EAAAC,GA8D3BD,EAAA7D,UAAAwF,WAAA,WAEE,OADc,IAAI9E,EAAA+E,QAAQ1H,OAK5B8F,EAAA7D,UAAA0F,UAAA,SAAUC,GAER,IADA,IAAIL,EAAUvH,KAAKuH,QACVlH,EAAI,EAAGwH,EAAIN,EAAQnE,OAAQ/C,EAAIwH,IAAKxH,EAAG,CAC9C,IAAIyH,EAASP,EAAQlH,GACrB,GAAIyH,EAAOF,gBAAkBA,EAAgB,OAAOE,EAEtD,OAAO,MAIThC,EAAA7D,UAAA8F,mBAAA,SAAmBC,GACjB,IAAIC,EACJ,OACEjI,KAAK2H,UAAUK,EAAiC,QAChDhI,KAAK2H,UAAUK,EAAiC,cAChDhI,KAAK2H,WAAWM,EAAM3F,EAAA4F,eAAiBF,GAAkC,QACzEhI,KAAK2H,UAAWM,EAAyD,cAK7EnC,EAAA7D,UAAAkG,WAAA,SAAWC,eACTpI,KAAKoI,QAAUA,EAGfpI,KAAKqG,YAAc,IAAIR,MACpB,KAAMrD,EAAA6F,KAAKC,KACX,MAAO9F,EAAA6F,KAAKE,MACZ,MAAO/F,EAAA6F,KAAKG,MACZ,MAAOhG,EAAA6F,KAAKI,MACZ,QAASL,EAAQM,YACjB,KAAMlG,EAAA6F,KAAKM,KACX,MAAOnG,EAAA6F,KAAKO,MACZ,MAAOpG,EAAA6F,KAAKQ,MACZ,MAAOrG,EAAA6F,KAAKS,MACZ,QAASV,EAAQW,YACjB,OAAQvG,EAAA6F,KAAKW,OACb,MAAOxG,EAAA6F,KAAKY,MACZ,MAAOzG,EAAA6F,KAAKa,MACZ,OAAQ1G,EAAA6F,KAAKc,OACb,SAAU3G,EAAA6F,KAAKa,MACf,UAAW1G,EAAA6F,KAAKW,QAInBhJ,KAAKoJ,mBAAmB,aAAc5G,EAAA6F,KAAKG,IACzCa,QAAQjB,EAAQkB,SAAW,EAAI,IACjCtJ,KAAKoJ,mBAAmB,qBAAsB5G,EAAA6F,KAAKW,KACjDK,QAAQjB,EAAQmB,cAAgB,EAAI,EAAG,IACzCvJ,KAAKoJ,mBAAmB,gBAAiB5G,EAAA6F,KAAKW,KAC5CK,QAAQjB,EAAQoB,SAAW,EAAI,EAAG,IACpCxJ,KAAKoJ,mBAAmB,kBAAmB5G,EAAA6F,KAAKG,IAC9Ca,QAAQjB,EAAQqB,WAAY,IAC9BzJ,KAAKoJ,mBAAmB,qBAAsB5G,EAAA6F,KAAKG,IACjDa,QAAQjB,EAAQsB,kBAAmB,IACrC1J,KAAKoJ,mBAAmB,mBAAoB5G,EAAA6F,KAAKG,IAC/Ca,QAAQjB,EAAQuB,gBAAiB,IACnC3J,KAAKoJ,mBAAmB,6BAA8B5G,EAAA6F,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAC9D5J,KAAKoJ,mBAAmB,6BAA8B5G,EAAA6F,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAS9D,IANA,IAAIC,EAAgB,IAAIC,MACpBC,EAAgB,IAAIlE,IACpBmE,EAAgB,IAAIF,MACpBG,EAAmB,IAAIH,MAGlBzJ,EAAI,EAAGwH,EAAI7H,KAAKuH,QAAQnE,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACnD,IAAIyH,EAAS9H,KAAKuH,QAAQlH,GAGtB6J,EAAY,IAAIC,EAAUnK,KAAM8H,GACpC9H,KAAKmG,eAAeiE,IAAIF,EAAUG,aAAcH,GAChDlK,KAAKsK,iBAAmBJ,EAIxB,IADA,IAAIK,EAAazC,EAAOyC,WACfC,EAAI,EAAGlK,EAAIiK,EAAWnH,OAAQoH,EAAIlK,IAAKkK,EAAG,CACjD,IAAIC,EAAYF,EAAWC,GAC3B,OAAQC,EAAUC,MAChB,KAAKjI,EAAAkI,SAASC,iBACZ5K,KAAK6K,gBAAkCJ,EAAWT,EAAeC,GACjE,MAEF,KAAKxH,EAAAkI,SAASG,gBACZ9K,KAAK+K,eAAgCN,GACrC,MAEF,KAAKhI,EAAAkI,SAASK,OACZhL,KAAKiL,kBAAmCR,EAAWV,GACnD,MAEF,KAAKtH,EAAAkI,SAASO,oBACZlL,KAAKmL,mBAAwCV,GAC7C,MAEF,KAAKhI,EAAAkI,SAASS,OACZpL,KAAKqL,kBAAmCZ,EAAWV,EAAeF,GAClE,MAEF,KAAKpH,EAAAkI,SAASW,qBACZtL,KAAKuL,oBAA0Cd,GAC/C,MAEF,KAAKhI,EAAAkI,SAASa,qBACZxL,KAAKyL,oBAA0ChB,EAAWT,EAAeC,GACzE,MAEF,KAAKxH,EAAAkI,SAASe,gBACZ1L,KAAK2L,oBAAqClB,GAC1C,MAEF,KAAKhI,EAAAkI,SAASiB,SACZ5L,KAAK6L,oBAAuCpB,KAQpD,IAASpK,EAAI,EAAGA,EAAIwJ,EAAczG,QAAS,CACzC,IAAI0I,EAAejC,EAAcxJ,GAEjC,GADI0L,EAAcD,EAAaC,aAEzBC,EAAUhM,KAAKiM,gBAAgBH,EAAaI,aAAcnC,KAE5D/J,KAAKmG,eAAeiE,IAAI0B,EAAaK,UAAWH,GAChDnC,EAAcuC,OAAO/L,EAAG,KAEpB2L,EAAUhM,KAAKiM,gBAAgBH,EAAaO,gBAAiBtC,KAC/D/J,KAAKmG,eAAeiE,IAAI0B,EAAaK,UAAWH,GAChDnC,EAAcuC,OAAO/L,EAAG,KAExBL,KAAKsM,MACH/J,EAAAgK,eAAeC,kCACfT,EAAYU,MACMV,EAAYW,OAAQC,KAAKrL,MAC3CyK,EAAYG,aAAaU,QAEzBvM,QAIF2L,EAAUhM,KAAKmG,eAAejF,IAAI4K,EAAaI,gBAEjDlM,KAAKmG,eAAeiE,IAAI0B,EAAaK,UAAWH,GAChDnC,EAAcuC,OAAO/L,EAAG,KAEpB2L,EAAUhM,KAAKmG,eAAejF,IAAI4K,EAAaO,mBACjDrM,KAAKmG,eAAeiE,IAAI0B,EAAaK,UAAWH,GAChDnC,EAAcuC,OAAO/L,EAAG,KAExB8C,QAAO,KACL9C,OAOV,IAAuC,IAAAwM,EAAAC,EAAA/C,GAAagD,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAA7C,IAAAE,EAAAC,EAAAJ,EAAAzL,MAAA,GAAC8L,EAAAF,EAAA,GAAYG,EAAAH,EAAA,GAChBI,EAAqCD,EACrCrB,OAAO,EACX,EAAG,CACD,IAAIsB,EAAcC,WAkBX,EAGFvB,EAAUhM,KAAKmG,eAAejF,IAAIoM,EAAcpB,iBAEhDF,EAAUhM,KAAKmG,eAAejF,IAAIoM,EAAcE,OAAO5M,KAAKgM,OAE7D5M,KAAKyN,yBACHL,EACApB,EACAqB,EAAaG,OAAOtB,cAGtBlM,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfL,EAAaG,OAAOf,MAAOY,EAAaG,OAAO5M,KAAKgM,MAGxD,MAnCA,GAAIZ,EAAUhM,KAAKuG,iBAAiBrF,IAAIoM,EAAcpB,cAAe,CACnElM,KAAKyN,yBACHL,EACApB,EACAqB,EAAaG,OAAOtB,cAEtB,OAEFoB,EAAgBvD,EAAc7I,IAAIoM,EAAcpB,gBAE9ClM,KAAKsM,MACH/J,EAAAgK,eAAeC,kCACfa,EAAaG,OAAOtB,aAAaO,MACWY,EAAaG,OAAOd,OAAQC,KAAMrL,MAC9E+L,EAAaG,OAAOtB,aAAaU,YAuBhCU,qGAIX,IAAIjG,EAAWrH,KAAKqH,SACpB,IAAShH,EAAI,EAAGwH,EAAImC,EAAc5G,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACpD,IAAIsN,EAAmB3D,EAAc3J,GACjCuN,EAAqBD,EAAiB5B,YACtC8B,EAAc1K,OAAOyK,EAAmBE,aACxCC,EAAc1G,EAAS2G,kBAAkBH,EAAYjN,KAAM,MAC/D,GAAKmN,EACL,GAAIA,EAAYrD,MAAQhF,EAAYuI,gBAAiB,CACnD,IAAIC,EAAgCH,EACpCJ,EAAiBO,cAAgBA,OAEjClO,KAAKsM,MACH/J,EAAAgK,eAAe4B,sCACfN,EAAYpB,OAOhB,IAAI2B,EAAgBhG,EAAQgG,cAC5B,GAAIA,MACF,IAA0B,IAAAC,EAAAvB,EAAAsB,GAAaE,EAAAD,EAAArB,QAAAsB,EAAArB,KAAAqB,EAAAD,EAAArB,OAAE,CAAhC,IAAAuB,EAAApB,EAAAmB,EAAAhN,MAAA,GAACkN,EAAAD,EAAA,GAAO3N,EAAA2N,EAAA,GACf,GAAK3N,EAAKwC,OAAV,CAEA,KADI4I,EAAUhM,KAAKmG,eAAejF,IAAIN,IAEjC,MAAM,IAAI6N,MAAM,sBAAwB7N,GADhCZ,KAAKmG,eAAeiE,IAAIoE,EAAOxC,sGAOlD,GAAIhM,KAAKmG,eAAeuI,IAAI,eAAgB,CACtC1C,EAAU7I,OAAOnD,KAAKmG,eAAejF,IAAI,gBAC7CiC,OAAO6I,EAAQtB,MAAQhF,EAAYuI,iBACnCjO,KAAKyG,oBAAsBY,EAASsH,aAA6B3C,EAAS,MAI5E,GAAIhM,KAAKmG,eAAeuI,IAAI,SAAU,CAChC1C,EAAU7I,OAAOnD,KAAKmG,eAAejF,IAAI,UAC7CiC,OAAO6I,EAAQtB,MAAQhF,EAAYuI,iBACnCjO,KAAK0G,eAAiCsF,EAIxC,GAAIhM,KAAKmG,eAAeuI,IAAI,UAAW,CACjC1C,EAAU7I,OAAOnD,KAAKmG,eAAejF,IAAI,WAG7C,GAFAiC,OAAO6I,EAAQtB,MAAQhF,EAAYuI,iBAC/BW,EAAWvH,EAASsH,aAA6B3C,EAAS,MAE5D,GAAIhM,KAAKqG,YAAYqI,IAAI,UAAW,CAClC,IAAI3C,EAA+BC,EAASD,YAC5C/L,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOV,EAAY+C,+BAGtC9O,KAAK2G,eAAiBiI,EACtB5O,KAAKqG,YAAY+D,IAAI,SAAUwE,EAASG,MAOxC/C,EAAU7I,OAAOnD,KAAKmG,eAAejF,IAAI,WAC7CiC,OAAO6I,EAAQtB,MAAQhF,EAAYsJ,oBACnChP,KAAKiP,cAAmCjD,EAItChM,KAAKwG,mBAAmBkI,IAAI,YAC1B1C,EAAyBhM,KAAKwG,mBAAmBtF,IAAI,QAAS8K,SAExDtB,MAAQhF,EAAYsJ,oBACPhD,EAASkD,MAAM5M,EAAA6M,YAAYC,QAAU9M,EAAA6M,YAAYE,WAElDrD,EAAS5B,IAAI9H,EAAA6M,YAAYG,MAC7CtP,KAAK4G,aAAkCoF,IAK3C,GAAIhM,KAAKmG,eAAeuI,IAAI,SAAU,CAChC1C,EAAmBhM,KAAKmG,eAAejF,IAAI,SAC/CiC,OAAO6I,EAAQtB,MAAQhF,EAAYsJ,qBAC/BJ,EAAW5O,KAAKqH,SAASkI,gBAAmCvD,EAAS,SAC3DhM,KAAK6G,cAAgB+H,GAIrC,GAAI5O,KAAKmG,eAAeuI,IAAI,UAAW,CACrC,IAMQE,EALJY,GADAxD,EAAmBhM,KAAKmG,eAAejF,IAAI,WACzBsO,QACtB,GAAIA,EACF,GAAIA,EAAQd,IAAI,YACd1C,EAAU7I,OAAOqM,EAAQtO,IAAI,aAC7BiC,OAAO6I,EAAQtB,MAAQhF,EAAYsJ,qBAC/BJ,EAAW5O,KAAKqH,SAASkI,gBAAmCvD,EAAS,SAC3DhM,KAAK8G,uBAAyB8H,GAMlD,GACE5O,KAAKmG,eAAeuI,IAAI,kBACxB1O,KAAKmG,eAAeuI,IAAI,cACxB1O,KAAKmG,eAAeuI,IAAI,aACxB,CAEI1C,EAAmBhM,KAAKmG,eAAejF,IAAI,iBAC/CiC,OAAO6I,EAAQtB,MAAQhF,EAAYsJ,oBACnC,IAAIhI,EAAqB7D,OAAOnD,KAAKqH,SAASkI,gBAAmCvD,EAAS,OACtFyD,EAAYzI,EAAmByI,UACnCtM,OAA0C,GAAnCsM,EAAUC,eAAetM,QAChCD,OAAOsM,EAAUC,eAAe,IAAM1P,KAAKoI,QAAQW,WACnD5F,OAAOsM,EAAUC,eAAe,GAAGC,oBACnCxM,OAAOsM,EAAUG,YAAc5P,KAAKoI,QAAQW,WAG5CiD,EAAmBhM,KAAKmG,eAAejF,IAAI,aAC3CiC,OAAO6I,EAAQtB,MAAQhF,EAAYsJ,oBACnC,IAAI/H,EAAiB9D,OAAOnD,KAAKqH,SAASkI,gBAAmCvD,EAAS,OACtFyD,EAAYxI,EAAewI,UAC3BtM,OAA0C,GAAnCsM,EAAUC,eAAetM,QAChCD,OAAOsM,EAAUC,eAAe,IAAM1P,KAAKoI,QAAQW,WACnD5F,OAAOsM,EAAUC,eAAe,IAAM1P,KAAKoI,QAAQW,WACnD5F,OAAOsM,EAAUG,YAAcpN,EAAA6F,KAAKc,MAGpC6C,EAAmBhM,KAAKmG,eAAejF,IAAI,aAC3CiC,OAAO6I,EAAQtB,MAAQhF,EAAYsJ,oBACnC,IAAI9H,EAAiB/D,OAAOnD,KAAKqH,SAASkI,gBAAmCvD,EAAS,OACtFyD,EAAYvI,EAAeuI,UAC3BtM,OAA0C,GAAnCsM,EAAUC,eAAetM,QAChCD,OAAOsM,EAAUC,eAAe,IAAM1P,KAAKoI,QAAQW,WACnD5F,OAAOsM,EAAUG,YAAcpN,EAAA6F,KAAKc,MAEpCnJ,KAAKgH,mBAAqBA,EAC1BhH,KAAKiH,eAAiBA,EACtBjH,KAAKkH,eAAiBA,EACtB,IAAIE,EAAe,EAAIgB,EAAQW,UAAU8G,SACzC7P,KAAKoH,aAAgBA,EACrBpH,KAAKmH,aAAgBC,EAAe,EAAI,GAAK,EAC7CpH,KAAK+G,OAAQ,IAKjBjB,EAAA7D,UAAAmH,mBAAA,SAAmB0G,EAAoBf,EAAYzN,GACjD6B,OAAO4L,EAAKgB,GAAE,IACd/P,KAAKmG,eAAeiE,IAAI0F,EACtB,IAAIE,EAAOhQ,KAAM8P,EAAYA,EAAYf,EAAM,KAAMpJ,EAAesK,MACjEC,yBAAyB5O,KAKhCwE,EAAA7D,UAAAkO,iBAAA,SAAiBL,EAAoBf,EAAYzN,GAC/C6B,OAAO4L,EAAKgB,GAAE,IACd/P,KAAKmG,eAAeiE,IAAI0F,EACtB,IAAIE,EAAOhQ,KAAM8P,EAAYA,EAAYf,EAAM,KAAMpJ,EAAesK,MACjEG,uBAAuB9O,KAKtBwE,EAAA7D,UAAAgK,gBAAR,SACEC,EACAmE,GAIA,IAFA,IAAIrE,EACAzF,EAAmBvG,KAAKuG,mBACzB,CACD,GAAIyF,EAAUzF,EAAiBrF,IAAIgL,GAAe,OAAOF,EACzD,IAAIqB,EAAegD,EAAmBnP,IAAIgL,GAC1C,IAAKmB,EAAc,MACnB,IAAIA,EAAaE,WAIjB,OAAOvN,KAAKmG,eAAejF,IAAImM,EAAanB,cAH1CA,EAAemB,EAAanB,aAKhC,OAAO,MAIDpG,EAAA7D,UAAAqO,gBAAR,SACEC,EACAC,GAGA,IADA,IAAIC,EAAe9K,EAAesK,KACzB5P,EAAI,EAAGwH,EAAI0I,EAAWnN,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACjD,IAAIqQ,EAAYH,EAAWlQ,GAEvBsQ,EAAOC,EADAnO,EAAAoO,oBAAoBH,EAAU9P,OAErC+P,IACEA,GAAQhL,EAAemL,QACrBJ,EAAUjE,MAAM3E,OAAOiJ,UACzBN,GAAgBE,EAEhB3Q,KAAKsM,MACH/J,EAAAgK,eAAeyE,8BACfN,EAAUjE,MAAOiE,EAAU9P,KAAK6L,MAAMwE,YAG/BT,EAAgBG,EAKlBF,EAAeE,EACxB3Q,KAAKsM,MACH/J,EAAAgK,eAAe2E,oBACfR,EAAUjE,MAAOiE,EAAU9P,KAAK6L,MAAMwE,YAGxCR,GAAgBE,EAVhB3Q,KAAKsM,MACH/J,EAAAgK,eAAeyE,8BACfN,EAAUjE,MAAOiE,EAAU9P,KAAK6L,MAAMwE,aAY9C,OAAOR,GAID3K,EAAA7D,UAAAkP,YAAR,SACEnF,EACAD,GAEA,IAAIqF,EAAarF,EAAYW,OAE7B,GACGV,EAAQqF,aAAa1L,EAAe2L,SAEnCvF,EAAYU,MAAM3E,OAAOiJ,WACzB/E,EAAQ+D,GAAGzN,EAAA6M,YAAYnE,UAErB7H,OAAOiO,GAAY1G,MAAQjI,EAAAkI,SAAS4G,QAE5BH,EAAY1G,MAAQjI,EAAAkI,SAASiB,UACnCzI,OAAciO,EAAY1E,QAAQhC,MAAQjI,EAAAkI,SAAS4G,QAGzD,CACA,IAAIzB,EAAa/D,EAAY+C,yBACzB9O,KAAKmG,eAAeuI,IAAIoB,GAC1B9P,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOT,EAAQ3B,cAGlCrK,KAAKmG,eAAeiE,IAAI0F,EAAY9D,GAIpCA,EAAQqF,aAAa1L,EAAemL,WACtC9E,EAAQ3B,aAAe0B,EAAY+C,2BAK/BhJ,EAAA7D,UAAA4I,gBAAR,SACEkB,EACA/B,EACAC,EACAuH,QAAA,IAAAA,MAAA,MAEA,IAAInH,EAAe0B,EAAY0F,sBAC/B,GAAIzR,KAAKmG,eAAeuI,IAAIrE,GAC1BrK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,OAH5B,CAQA,IAAIkG,EAAaxE,EAAYwE,WACzBmB,EAAa3F,EAAYnL,KAAKgM,KAC9B3K,EAAY,IAAI0P,EAClB3R,KACA0R,EACArH,EACA0B,EACAwE,EACIvQ,KAAKsQ,gBAAgBC,EACnB5K,EAAe2L,OACf3L,EAAeiM,OACfjM,EAAekM,WAEjBlM,EAAesK,MAErBhO,EAAUyK,OAAS8E,EACnBxR,KAAKmG,eAAeiE,IAAIC,EAAcpI,GAEtC,IAAI6P,EAAkB/F,EAAY+F,gBAClC,GAAIA,EAAiB,CACnB,IAAIC,EAAqBD,EAAgB1O,OACzC,GAAInB,EAAUoP,aAAa1L,EAAekM,WACpCE,GACF/R,KAAKsM,MACH/J,EAAAgK,eAAeyF,8CACfvP,EAAAwP,MAAMC,KACJnG,EAAYnL,KAAK6L,MACjBqF,EAAgBC,EAAqB,GAAGtF,aAMzC,GAAIsF,EAAoB,CAC7B,IAAK,IAAI1R,EAAI,EAAGA,EAAI0R,IAAsB1R,GAM1C4J,EAAiBkI,KAAKlQ,IAQ1B,GAHI8J,EAAY+B,aAAa9D,EAAcmI,KAAKlQ,GAG5CuP,EAAW,CACb,GAAIA,EAAUhC,SACZ,GAAIgC,EAAUhC,QAAQd,IAAIgD,GAKxB,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5BmH,EAAUhC,QAAU,IAAI3J,IAE1B2L,EAAUhC,QAAQpF,IAAIsH,EAAYzP,GAC9BuP,EAAUzB,GAAGzN,EAAA6M,YAAYiD,gBAAkBnQ,EAAU8N,GAAGzN,EAAA6M,YAAYnE,SACtE/I,EAAUmI,IAAI9H,EAAA6M,YAAYiD,oBAIvB,GAAInQ,EAAU8N,GAAGzN,EAAA6M,YAAYnE,QAAS,CAC3C,GAAIhL,KAAKuG,iBAAiBmI,IAAIrE,GAK5B,YAJArK,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACftG,EAAYnL,KAAK6L,MAAOpC,GAM5B,GAFArK,KAAKuG,iBAAiB6D,IAAIC,EAAcpI,GACxCjC,KAAKsK,iBAAiBkF,QAAQpF,IAAIsH,EAAYzP,GAC1CA,EAAU8N,GAAGzN,EAAA6M,YAAYnE,SAAWe,EAAYU,MAAM3E,OAAOwK,QAAS,CACxE,GAAItS,KAAKwG,mBAAmBkI,IAAIgD,GAAa,CAC3C,IAAIa,EAA+BvS,KAAKwG,mBAAmBtF,IAAIwQ,GAK/D,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACftG,EAAYnL,KAAK6L,MAAO8F,EAAevG,QAAQ3B,cAInDpI,EAAUmI,IAAI9H,EAAA6M,YAAYiD,eAC1BpS,KAAKwG,mBAAmB4D,IAAIsH,GAC1B1F,QAAS/J,EACTuQ,WAAYzG,EAAYnL,QAO9B,IADA,IAAI6R,EAAqB1G,EAAYyD,QACrB3H,GAAPxH,EAAI,EAAOoS,EAAmBrP,QAAQ/C,EAAIwH,IAAKxH,EAAG,CACzD,IAAIqS,EAAoBD,EAAmBpS,GAC3C,OAAQqS,EAAkBhI,MACxB,KAAKjI,EAAAkI,SAASgI,iBACZ3S,KAAK4S,gBAAkCF,EAAmBzQ,GAC1D,MAEF,KAAKQ,EAAAkI,SAASkI,kBACRH,EAAkBxD,MAAM5M,EAAA6M,YAAY2D,IAAMxQ,EAAA6M,YAAY4D,KACxD/S,KAAKgT,mBAAsCN,EAAmBzQ,GAE9DjC,KAAKiT,iBAAoCP,EAAmBzQ,GAE9D,MAEF,QAEE,YADAkB,QAAO,IAMbnD,KAAKmR,YAAYlP,EAAW8J,KAItBjG,EAAA7D,UAAA2Q,gBAAR,SACE7G,EACAmH,GAEA,IAAItS,EAAOmL,EAAYnL,KAAKgM,KACxBvC,EAAe0B,EAAY0F,sBAC3BlB,EAAaxE,EAAYwE,WACzB4C,EAAcD,EAAexI,MAAQhF,EAAY0N,oBAGrD,GAAIrH,EAAYgE,GAAGzN,EAAA6M,YAAYkE,QAAS,CAKtC,GAJIF,GAEFhQ,QAAO,GAELnD,KAAKmG,eAAeuI,IAAIrE,GAK1B,YAJArK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,GAI5B,GAAI6I,EAAe1D,SACjB,GAAI0D,EAAe1D,QAAQd,IAAI9N,GAK7B,YAJAZ,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5B6I,EAAe1D,QAAU,IAAI3J,IAE/B,IAAIyN,EAAc,IAAItD,EACpBhQ,KACAY,EACAyJ,EACA7H,EAAA6F,KAAKc,KACL4C,EACAwE,EACIvQ,KAAKsQ,gBAAgBC,EAAY5K,EAAe4N,QAChD5N,EAAesK,MAErBqD,EAAY5G,OAASwG,EACrBA,EAAe1D,QAAQpF,IAAIxJ,EAAM0S,GACjCtT,KAAKmG,eAAeiE,IAAIC,EAAciJ,GAClCJ,EAAenD,GAAGzN,EAAA6M,YAAYiD,gBAChCkB,EAAYlJ,IAAI9H,EAAA6M,YAAYiD,eAG1BkB,EAAYjC,aAAa1L,EAAe4N,UAAYD,EAAYvD,GAAGzN,EAAA6M,YAAYqE,WACjFxT,KAAKsM,MACH/J,EAAAgK,eAAeyE,8BACf7N,OAAOV,EAAAgR,cAAchR,EAAAY,cAAckQ,OAAQhD,IAAa9D,MAAO,cAK9D,CAKL,GAJI0G,GAEFhQ,QAAQ4I,EAAYmD,MAAM5M,EAAA6M,YAAYuE,SAAWpR,EAAA6M,YAAY2D,IAAMxQ,EAAA6M,YAAY4D,MAE7EG,EAAeS,iBACjB,GAAIT,EAAeS,gBAAgBjF,IAAI9N,GAKrC,YAJAZ,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5B6I,EAAeS,gBAAkB,IAAI9N,IAEvC,IAAI+N,EAAgB,IAAIC,EACtBX,EACAtS,EACAyJ,EACA0B,GAEEwE,GAAYvQ,KAAKsQ,gBAAgBC,EAAY5K,EAAesK,MAChEiD,EAAeS,gBAAgBvJ,IAAIxJ,EAAMgT,KAKrC9N,EAAA7D,UAAAgR,iBAAR,SACElH,EACAmH,GAEA,IAAIxB,EAAa3F,EAAYnL,KAAKgM,KAC9BvC,EAAe0B,EAAY0F,sBAC3BxP,EAAsC,KAEtCsO,EAAaxE,EAAYwE,WACzBuD,EAAiBnO,EAAesK,KAWpC,GAVIM,IACFuD,EAAiB9T,KAAKsQ,gBAAgBC,EACpC5K,EAAepC,gBACfoC,EAAeZ,gBACfY,EAAeL,iBACfK,EAAe4N,SAKfxH,EAAYgE,GAAGzN,EAAA6M,YAAYkE,QAAS,CAGtC,GAFAlQ,OAAO4I,EAAYnL,KAAK8J,MAAQjI,EAAAkI,SAASoJ,aAErC/T,KAAKmG,eAAeuI,IAAIrE,GAK1B,YAJArK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBAAwB9C,EAAYnL,KAAK6L,MACxDpC,GAIJ,GAAI6I,EAAe1D,SACjB,GAAI0D,EAAe1D,QAAQd,IAAIgD,GAK7B,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5B6I,EAAe1D,QAAU,IAAI3J,IAE/B5D,EAAY,IAAI+R,EACdhU,KACA0R,EACArH,EACA0B,EACAmH,EACAY,GAEFZ,EAAe1D,QAAQpF,IAAIsH,EAAYzP,GACvCjC,KAAKmG,eAAeiE,IAAIC,EAAcpI,GAClCiR,EAAenD,GAAGzN,EAAA6M,YAAYiD,gBAChCnQ,EAAUmI,IAAI9H,EAAA6M,YAAYiD,mBAIvB,CACL,GAAIc,EAAeS,iBACjB,GAAIT,EAAeS,gBAAgBjF,IAAIgD,GAKrC,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5B6I,EAAeS,gBAAkB,IAAI9N,IAEvC5D,EAAY,IAAI+R,EACdhU,KACA0R,EACArH,EACA0B,EACAmH,EACAY,GAKE/H,EAAYnL,KAAK8J,MAAQjI,EAAAkI,SAASoJ,YAChCb,EAAee,qBACjBjU,KAAKsM,MACH/J,EAAAgK,eAAe2H,qDACfnI,EAAYnL,KAAK6L,QAGnBxK,EAAUmI,IAAI9H,EAAA6M,YAAY4E,aAC1Bb,EAAee,qBAAuBhS,GAGxCiR,EAAeS,gBAAgBvJ,IAAIsH,EAAYzP,GAE7CiR,EAAenD,GAAGzN,EAAA6M,YAAYiD,gBAChCnQ,EAAUmI,IAAI9H,EAAA6M,YAAYiD,eAI9BpS,KAAKmU,uBAAuBpI,EAAYwE,WAAYtO,EAAWiR,IAGzDpN,EAAA7D,UAAAkS,uBAAR,SACE5D,EACAtO,EACAiR,GAEA,GAAI3C,EACF,IAAK,IAAIlQ,EAAI,EAAGwH,EAAI0I,EAAWnN,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACjD,IAAIqQ,EAAYH,EAAWlQ,GAC3B,OAAQqQ,EAAUzN,eAChB,KAAKR,EAAAY,cAAcC,SACnB,KAAKb,EAAAY,cAAcE,gBACnB,KAAKd,EAAAY,cAAc0B,gBACnB,KAAKtC,EAAAY,cAAciC,iBACjB,IAAI8O,EAAU1D,EAAU2D,WAAa3D,EAAU2D,UAAUjR,QAAU,EACnE,GAAe,GAAXgR,EAAc,CAChB,IAAIE,EAA0B5D,EAAU2D,UAAW,GACnD,GACEC,EAAS5J,MAAQjI,EAAAkI,SAAS4J,SACND,EAAUE,aAAe/R,EAAAgS,YAAYC,OACzD,CACA,IAAIhK,EAAO1H,EACT0N,EAAUzN,cACgBqR,EAAUhT,OAEtC,GAAIoJ,GAAQrI,EAAaoD,QACvBzF,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfL,EAAS7H,WAEN,CACL,IAAImI,EAAY1B,EAAe2B,mBAC3BD,EAAUlG,IAAIhE,GAChB1K,KAAKsM,MACH/J,EAAAgK,eAAeuI,kCACfR,EAAS7H,QAGXxK,EAAU8S,aAAerK,EACzBkK,EAAUxK,IAAIM,EAAMzI,UAIxBjC,KAAKsM,MACH/J,EAAAgK,eAAeyI,wBACfV,EAAS7H,YAIbzM,KAAKsM,MACH/J,EAAAgK,eAAe0I,+BACfvE,EAAUjE,MAAO,IAAK2H,EAAQnD,SAAS,OAS7CnL,EAAA7D,UAAA+Q,mBAAR,SACEjH,EACAmH,GAEA,IAAIxB,EAAa3F,EAAYnL,KAAKgM,KAC9BsI,EAAuBnJ,EAAY0F,sBACnC0D,EAAkBnV,KAAKmG,eAAejF,IAAIgU,GAC1CE,EAAWrJ,EAAYgE,GAAGzN,EAAA6M,YAAY2D,KACtCuC,GAAQ,EACZ,GAAIF,GACF,GACEA,EAAgBzK,MAAQhF,EAAY4P,UAI/B,OAHJF,EACcD,EAAiBI,gBACjBJ,EAAiBK,iBAOhC,YAJAxV,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOyI,QAK5BC,EAAkB,IAAIM,EACpBzV,KACA0R,EACAwD,EACAhC,GAEFmC,GAAQ,EAGV,IAAI9E,EAAaxE,EAAYwE,WACzBuD,EAAiBnO,EAAesK,KAChCM,IACFuD,EAAiB9T,KAAKsQ,gBAAgBC,EACpC5K,EAAe4N,SAInB,IAAImC,GAAYN,EAAW9S,EAAAqT,cAAgBrT,EAAAsT,eAAiBlE,EAG5D,GAAI3F,EAAYgE,GAAGzN,EAAA6M,YAAYkE,QAAS,CACtC,IAAIwC,EAAa3C,EAAe7I,aAAe/H,EAAAwT,iBAAmBJ,EAClE,GAAI1V,KAAKmG,eAAeuI,IAAImH,GAK1B,YAJA7V,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOoJ,GAI5B,IAAIE,EAAkB,IAAI/B,EACxBhU,KACA0V,EACAG,EACA9J,EACA,KACA+H,GAOF,GALIsB,EACSD,EAAiBI,gBAAkBQ,EAEnCZ,EAAiBK,gBAAkBO,EAE5CV,EAAO,CACT,GAAInC,EAAe1D,SACjB,GAAI0D,EAAe1D,QAAQd,IAAIgD,GAK7B,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOoJ,QAK5B3C,EAAe1D,QAAU,IAAI3J,IAE/BqN,EAAe1D,QAAQpF,IAAIsH,EAAYyD,QAEvChS,OAAO+P,EAAe1D,SAAW0D,EAAe1D,QAAQd,IAAIgD,IAE9D1R,KAAKmG,eAAeiE,IAAI8K,EAAsBC,GAC1CjC,EAAenD,GAAGzN,EAAA6M,YAAYiD,gBAChC+C,EAAgB/K,IAAI9H,EAAA6M,YAAYiD,mBAI7B,CACL,IAAI4D,EAAe9C,EAAe7I,aAAe/H,EAAA2T,mBAAqBP,EACtE,GAAIxC,EAAeS,iBACjB,GAAIT,EAAeS,gBAAgBjF,IAAIgH,GAKrC,YAJA1V,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOyI,QAK5BhC,EAAeS,gBAAkB,IAAI9N,IAEvC,IAAIqQ,EAAoB,IAAIlC,EAC1BhU,KACA0V,EACAM,EACAjK,EACAmH,EACAY,GAEEsB,EACSD,EAAiBI,gBAAkBW,EAEnCf,EAAiBK,gBAAkBU,EAEhDhD,EAAeS,gBAAgBvJ,IAAIsL,EAAUP,GAC7CnV,KAAKmG,eAAeiE,IAAI8K,EAAsBC,GAC1CjC,EAAenD,GAAGzN,EAAA6M,YAAYiD,iBAChC+C,EAAgB/K,IAAI9H,EAAA6M,YAAYiD,eAChC8D,EAAkB9L,IAAI9H,EAAA6M,YAAYiD,kBAKhCtM,EAAA7D,UAAA8I,eAAR,SACEgB,EACAyF,QAAA,IAAAA,MAAA,MAEA,IAAInH,EAAe0B,EAAY0F,sBAC/B,GAAIzR,KAAKmG,eAAeuI,IAAIrE,GAC1BrK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,OAH5B,CAOA,IAAIqH,EAAa3F,EAAYnL,KAAKgM,KAC9BZ,EAAU,IAAImK,EAAKnW,KAAM0R,EAAYrH,EAAc0B,GAIvD,GAHAC,EAAQU,OAAS8E,EACjBxR,KAAKmG,eAAeiE,IAAIC,EAAc2B,GAElCwF,EAAW,CACb,GAAIA,EAAUhC,SACZ,GAAIgC,EAAUhC,QAAQd,IAAIgD,GAKxB,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5BmH,EAAUhC,QAAU,IAAI3J,IAE1B2L,EAAUhC,QAAQpF,IAAIsH,EAAY1F,GAC9BwF,EAAUzB,GAAGzN,EAAA6M,YAAYiD,gBAAkBpG,EAAQ+D,GAAGzN,EAAA6M,YAAYnE,SACpEgB,EAAQ5B,IAAI9H,EAAA6M,YAAYiD,oBAErB,GAAIpG,EAAQ+D,GAAGzN,EAAA6M,YAAYnE,QAAS,CACzC,GAAIhL,KAAKuG,iBAAiBmI,IAAIrE,GAK5B,YAJArK,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACftG,EAAYnL,KAAK6L,MAAOpC,GAM5B,GAFArK,KAAKuG,iBAAiB6D,IAAIC,EAAc2B,GACxChM,KAAKsK,iBAAiBkF,QAAQpF,IAAIsH,EAAY1F,GAC1CD,EAAYU,MAAM3E,OAAOwK,QAAS,CACpC,GAAItS,KAAKwG,mBAAmBkI,IAAIgD,GAAa,CAC3C,IAAIa,EAA+BvS,KAAKwG,mBAAmBtF,IAAIwQ,GAK/D,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACftG,EAAYnL,KAAK6L,MAAO8F,EAAevG,QAAQ3B,cAInD2B,EAAQ5B,IAAI9H,EAAA6M,YAAYiD,eACxBpS,KAAKwG,mBAAmB4D,IAAIsH,GAC1B1F,QAAOA,EACPwG,WAAYzG,EAAYnL,QAM9B,IADA,IAAIwV,EAASrK,EAAYqK,OAChB/V,EAAI,EAAGwH,EAAIuO,EAAOhT,OAAQ/C,EAAIwH,IAAKxH,EAC1CL,KAAKqW,oBAAoBD,EAAO/V,GAAI2L,GAGtChM,KAAKmR,YAAYnF,EAASD,KAGpBjG,EAAA7D,UAAAoU,oBAAR,SACEtK,EACAuK,GAEA,IAAI1V,EAAOmL,EAAYnL,KAAKgM,KACxBvC,EAAe0B,EAAY0F,sBAC/B,GAAI6E,EAAI9G,SACN,GAAI8G,EAAI9G,QAAQd,IAAI9N,GAKlB,YAJAZ,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5BiM,EAAI9G,QAAU,IAAI3J,IAEpB,IAAIvE,EAAQ,IAAIiV,EAAUD,EAAKtW,KAAMY,EAAMyJ,EAAc0B,GACzDuK,EAAI9G,QAAQpF,IAAIxJ,EAAMU,GAClBgV,EAAIvG,GAAGzN,EAAA6M,YAAYiD,gBACrB9Q,EAAM8I,IAAI9H,EAAA6M,YAAYiD,gBAIlBtM,EAAA7D,UAAAgJ,kBAAR,SACER,EACAV,GAEA,IAAIyF,EAAU/E,EAAU+E,QACxB,GAAIA,EACF,IAAK,IAAInP,EAAI,EAAGwH,EAAI2H,EAAQpM,OAAQ/C,EAAIwH,IAAKxH,EAC3CL,KAAKwW,iBAAiBhH,EAAQnP,GAAIoK,EAAUgM,aAAc1M,QAG5D/J,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACflK,EAAUgC,QAKR3G,EAAA7D,UAAAwL,yBAAR,SACEpD,EACA2B,EACA0K,GAGA1W,KAAKuG,iBAAiB6D,IAAIC,EAAc2B,GAGxC,IAAIyK,EAAeC,EAAmBjK,MAAM3E,OAAO2O,aAC/CE,EAASrU,EAAAsU,iBAAmBH,EAC5BvM,EAAYlK,KAAKmG,eAAejF,IAAIyV,GACnCzM,IAAWA,EAAY/G,OAAOnD,KAAKmG,eAAejF,IAAIyV,EAASrU,EAAAuU,eAAiB,WACrF1T,OAAO+G,EAAUQ,MAAQhF,EAAYoR,WACrC,IAAIpF,EAAagF,EAAmB9J,KACxB1C,EAAWsF,QAAQpF,IAAIsH,EAAY1F,GAG/C,IAAIlE,EAAS4O,EAAmBjK,MAAM3E,OAClCA,EAAOiJ,UACL/Q,KAAKmG,eAAeuI,IAAIgD,GAC1B1R,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACfqE,EAAmBjK,MAAOiF,IAG5B1F,EAAQ3B,aAAeqH,EACvB1R,KAAKmG,eAAeiE,IAAIsH,EAAY1F,IAI7BlE,EAAOwK,SAChBtS,KAAKwG,mBAAmB4D,IAAIsM,EAAmB9J,MAC7CZ,QAAOA,EACPwG,WAAYkE,KAKV5Q,EAAA7D,UAAAuU,iBAAR,SACEhJ,EACAiJ,EACA1M,GAEA,IAQIgN,EACAC,EACA3J,EAVAnB,EAAesB,EAAOf,MAAM3E,OAAO2O,aAAenU,EAAAuU,eAAiBrJ,EAAOtB,aAAaU,KAC3F,GAAI5M,KAAKuG,iBAAiBmI,IAAIxC,GAC5BlM,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACf7E,EAAOtB,aAAaO,MAAOP,QAS/B,GAAoB,MAAhBuK,EAAsB,CAIxB,GAHAM,EAAiBvJ,EAAOf,MAAM3E,OAAO2O,aAAenU,EAAAuU,eAAiBrJ,EAAO5M,KAAKgM,KAG7E5M,KAAKmG,eAAeuI,IAAIqI,GAM1B,YALA/W,KAAKyN,yBACHvB,EACSlM,KAAKmG,eAAejF,IAAI6V,GACjCvJ,EAAOtB,cAMX,GAAInC,EAAc2E,IAAIxC,GAKpB,YAJAlM,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACf7E,EAAOtB,aAAaO,MAAOP,IAI/BmB,EAAe,IAAIvK,GACNyK,YAAa,EAC1BF,EAAanB,aAAe6K,EAC5B1J,EAAaG,OAASA,EACtBzD,EAAcK,IAAI8B,EAAcmB,OAG3B,CAKL,GAJA0J,EAAiBN,EAAenU,EAAAuU,eAAiBrJ,EAAO5M,KAAKgM,KAG7DoK,EAAoBhX,KAAKmG,eAAejF,IAAI6V,GAO1C,YALA/W,KAAKyN,yBACHvB,EACA8K,EACAxJ,EAAOtB,cAOX,IADA,IAAI+K,EAAO,IAAIC,IACR7J,EAAetD,EAAc7I,IAAI6V,IAAiB,CACvD,IAAI1J,EAAaE,WAaV,CAEL,GADAyJ,EAAoBhX,KAAKmG,eAAejF,IAAImM,EAAanB,cAOvD,YALAlM,KAAKyN,yBACHvB,EACA8K,EACAxJ,EAAOtB,cAIX,MArBA,GADA8K,EAAoBhX,KAAKuG,iBAAiBrF,IAAImM,EAAanB,cAOzD,YALAlM,KAAKyN,yBACHvB,EACA8K,EACAxJ,EAAOtB,cAKX,GADA6K,EAAiB1J,EAAanB,aAC1B+K,EAAKvI,IAAIrB,GAAe,MAC5B4J,EAAKE,IAAI9J,GAgBb,GAAItD,EAAc2E,IAAIxC,GAKpB,YAJAlM,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACf7E,EAAOtB,aAAaO,MAAOP,IAI/BmB,EAAe,IAAIvK,GACNyK,YAAa,EAC1BF,EAAanB,aAAe6K,EAC5B1J,EAAaG,OAASA,EACtBzD,EAAcK,IAAI8B,EAAcmB,KAI5BvH,EAAA7D,UAAAkJ,mBAAR,SACEY,EACAyF,QAAA,IAAAA,MAAA,MAEA,IAAInH,EAAe0B,EAAY0F,sBAC/B,GAAIzR,KAAKmG,eAAeuI,IAAIrE,GAC1BrK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,OAH5B,CAOA,IAAIqH,EAAa3F,EAAYnL,KAAKgM,KAC9B2D,EAAaxE,EAAYwE,WACzBtO,EAAY,IAAI+R,EAClBhU,KACA0R,EACArH,EACA0B,EACA,KACAwE,EACIvQ,KAAKsQ,gBAAgBC,EACnB5K,EAAe2L,OACf3L,EAAe4N,OACf5N,EAAeyR,UAEjBzR,EAAesK,MAKrB,GAHAhO,EAAUyK,OAAS8E,EACnBxR,KAAKmG,eAAeiE,IAAIC,EAAcpI,GAElCuP,EAAW,CACb,GAAIA,EAAUhC,SACZ,GAAIgC,EAAUhC,QAAQd,IAAIgD,GAKxB,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5BmH,EAAUhC,QAAU,IAAI3J,IAE1B2L,EAAUhC,QAAQpF,IAAIsH,EAAYzP,GAC9BuP,EAAUzB,GAAGzN,EAAA6M,YAAYiD,gBAAkBnQ,EAAU8N,GAAGzN,EAAA6M,YAAYnE,UACtE/I,EAAUyK,OAAS8E,EACnBvP,EAAUmI,IAAI9H,EAAA6M,YAAYiD,qBAEvB,GAAInQ,EAAU8N,GAAGzN,EAAA6M,YAAYnE,QAAS,CAC3C,GAAIhL,KAAKuG,iBAAiBmI,IAAIrE,GAK5B,YAJArK,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACftG,EAAYnL,KAAK6L,MAAOpC,GAM5B,GAFArK,KAAKuG,iBAAiB6D,IAAIC,EAAcpI,GACxCjC,KAAKsK,iBAAiBkF,QAAQpF,IAAIsH,EAAYzP,GAC1C8J,EAAYU,MAAM3E,OAAOwK,QAAS,CACpC,GAAItS,KAAKwG,mBAAmBkI,IAAIgD,GAAa,CAC3C,IAAIa,EAA+BvS,KAAKwG,mBAAmBtF,IAAIwQ,GAK/D,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAO8F,EAAevG,QAAQ3B,cAInDpI,EAAUmI,IAAI9H,EAAA6M,YAAYiD,eAC1BpS,KAAKwG,mBAAmB4D,IAAIsH,GAC1B1F,QAAS/J,EACTuQ,WAAYzG,EAAYnL,QAK9BZ,KAAKmR,YAAYlP,EAAW8J,KAGtBjG,EAAA7D,UAAAoJ,kBAAR,SACEZ,EACAV,EACAF,GAEA,IAAIwN,EAAe5M,EAAU4M,aAC7B,GAAIA,EACF,IAAK,IAAIhX,EAAI,EAAGwH,EAAIwP,EAAajU,OAAQ/C,EAAIwH,IAAKxH,EAChDL,KAAKsX,iBACHD,EAAahX,GACboK,EAAUgM,aACV1M,EAAeF,QAGd,GAAIY,EAAU8M,cAAe,CAClC,IAAI7F,EAAajH,EAAU8M,cAAc3K,KACrCvC,EACFI,EAAUgC,MAAM3E,OAAO2O,aACvBnU,EAAAuU,eACAnF,EAEF,GAAI1R,KAAKmG,eAAeuI,IAAIrE,GAM1B,YALArK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACfpE,EAAU8M,cAAc9K,MACxBpC,GAMJ,IAAIH,EAAYlK,KAAKmG,eAAejF,IAAIuJ,EAAUgM,cAClD,GAAIvM,EAEF,YADAlK,KAAKmG,eAAeiE,IAAIC,EAAcH,GAKxC,IAAI4B,EAAe,IAAIjJ,EACvBiJ,EAAaK,UAAY9B,EACzB,IAAI6B,EAAe5J,EAAAsU,iBAAmBnM,EAAUgM,aAChD3K,EAAaI,aAAeA,EAC5BJ,EAAaO,gBAAkBH,EAAe5J,EAAAuU,eAAiB,QAC/D/K,EAAaC,YAAc,KAC3BlC,EAAcsI,KAAKrG,KAIfhG,EAAA7D,UAAAqV,iBAAR,SACEvL,EACA0K,EACApG,EACAxG,GAEA,IAAIsC,EAAYJ,EAAY0F,sBAC5B,GAAIzR,KAAKmG,eAAeuI,IAAIvC,GAC1BnM,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAON,OAH5B,CAQA,IAGIH,EAHAE,EAAeuK,EAAenU,EAAAuU,eAAiB9K,EAAYG,aAAaU,KAI5E,GAAIZ,EAAUhM,KAAKuG,iBAAiBrF,IAAIgL,GACtClM,KAAKmG,eAAeiE,IAAI+B,EAAWH,OADrC,CAMA,IAAMwL,EAAYlV,EAAAuU,eAAiB,QAC/B/K,EAAe,IAAIjJ,EACvBiJ,EAAaK,UAAYA,EACrBsK,EAAagB,SAASD,IACxB1L,EAAaI,aAAeA,EAC5BJ,EAAaO,gBACXoK,EAAaiB,UAAU,EAAGjB,EAAarT,OAASoU,EAAUpU,OAAS,GACnE2I,EAAYG,aAAaU,OAG3Bd,EAAaI,aAAeA,EAC5BJ,EAAaO,gBACXoK,EACAe,EACAlV,EAAAuU,eACA9K,EAAYG,aAAaU,MAG7Bd,EAAaC,YAAcA,EAC3BlC,EAAcsI,KAAKrG,MAGbhG,EAAA7D,UAAAsJ,oBAAR,SAA4BQ,EAAmCyF,QAAA,IAAAA,MAAA,MAC7D,IAAInH,EAAe0B,EAAY0F,sBAC/B,GAAIzR,KAAKmG,eAAeuI,IAAIrE,GAC1BrK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,OAH5B,CAQA,IAAIkG,EAAaxE,EAAYwE,WACzBmB,EAAa3F,EAAYnL,KAAKgM,KAC9B3K,EAAY,IAAI0V,EAClB3X,KACA0R,EACArH,EACA0B,EACAwE,EACIvQ,KAAKsQ,gBAAgBC,EAAY5K,EAAe2L,QAChD3L,EAAesK,MAKrB,GAHAhO,EAAUyK,OAAS8E,EACnBxR,KAAKmG,eAAeiE,IAAIC,EAAcpI,GAElCuP,EAAW,CACb,GAAIA,EAAUhC,SACZ,GAAIgC,EAAUhC,QAAQd,IAAIzM,EAAUoI,cAKlC,YAJArK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5BmH,EAAUhC,QAAU,IAAI3J,IAE1B2L,EAAUhC,QAAQpF,IAAInI,EAAUoI,aAAcpI,GAC1CuP,EAAUzB,GAAGzN,EAAA6M,YAAYiD,gBAAkBnQ,EAAU8N,GAAGzN,EAAA6M,YAAYnE,SACtE/I,EAAUmI,IAAI9H,EAAA6M,YAAYiD,oBAEvB,GAAInQ,EAAU8N,GAAGzN,EAAA6M,YAAYnE,QAAS,CAC3C,GAAIhL,KAAKuG,iBAAiBmI,IAAIrE,GAK5B,YAJArK,KAAKsM,MACH/J,EAAAgK,eAAe8F,4DACftG,EAAYnL,KAAK6L,MAAOpC,GAM5B,GAFArK,KAAKuG,iBAAiB6D,IAAIC,EAAcpI,GACxCjC,KAAKsK,iBAAiBkF,QAAQpF,IAAIsH,EAAYzP,GAC1C8J,EAAYU,MAAM3E,OAAOwK,QAAS,CACpC,GAAItS,KAAKwG,mBAAmBkI,IAAIgD,GAAa,CAC3C,IAAIa,EAA+BvS,KAAKwG,mBAAmBtF,IAAIwQ,GAK/D,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAO8F,EAAevG,QAAQ3B,cAInDpI,EAAUmI,IAAI9H,EAAA6M,YAAYiD,eAC1BpS,KAAKwG,mBAAmB4D,IAAIsH,GAC1B1F,QAAS/J,EACTuQ,WAAYzG,EAAYnL,QAM9B,IADA,IAAI6R,EAAqB1G,EAAYyD,QAC5BnP,EAAI,EAAGwH,EAAI4K,EAAmBrP,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACzD,IAAIqS,EAAoBD,EAAmBpS,GAC3C,OAAQqS,EAAkBhI,MAExB,KAAKjI,EAAAkI,SAASgI,iBACZ3S,KAAK4S,gBAAkCF,EAAmBzQ,GAC1D,MAEF,KAAKQ,EAAAkI,SAASkI,kBACRH,EAAkBxD,MAAM5M,EAAA6M,YAAY2D,IAAMxQ,EAAA6M,YAAY4D,KACxD/S,KAAKgT,mBAAsCN,EAAmBzQ,GAE9DjC,KAAKiT,iBAAoCP,EAAmBzQ,GAE9D,MAEF,QACE,MAAM,IAAIwM,MAAM,8BAKtBzO,KAAKmR,YAAYlP,EAAW8J,KAGtBjG,EAAA7D,UAAAwJ,oBAAR,SACEM,EACA/B,EACAC,EACA2N,QAAA,IAAAA,MAAA,MAEA,IAAIvN,EAAe0B,EAAY0F,sBAC3BC,EAAa3F,EAAYnL,KAAKgM,KAC9B4E,EAAYxR,KAAKmG,eAAejF,IAAImJ,GAQxC,GAPKmH,KACHA,EAAY,IAAIqG,EAAU7X,KAAM0R,EAAYrH,EAAc0B,IAChDW,OAASkL,EACnB5X,KAAKmG,eAAeiE,IAAIC,EAAcmH,GACtCxR,KAAKmR,YAAYK,EAAWzF,IAG1B6L,EAAiB,CACnB,GAAIA,EAAgBpI,SAClB,GAAIoI,EAAgBpI,QAAQd,IAAIgD,GAK9B,YAJA1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,QAK5BuN,EAAgBpI,QAAU,IAAI3J,IAEhC+R,EAAgBpI,QAAQpF,IAAIsH,EAAYF,GACpCoG,EAAgB7H,GAAGzN,EAAA6M,YAAYiD,gBAAkBZ,EAAUzB,GAAGzN,EAAA6M,YAAYnE,SAC5EwG,EAAUpH,IAAI9H,EAAA6M,YAAYiD,oBAEvB,GAAIZ,EAAUzB,GAAGzN,EAAA6M,YAAYnE,QAAS,CAC3C,IAAIuH,EAAiBvS,KAAKuG,iBAAiBrF,IAAImJ,GAa/C,GAZIkI,GACGA,EAAexC,GAAGzN,EAAA6M,YAAYnE,SACjChL,KAAKsM,MACH/J,EAAAgK,eAAeuL,kFACf/L,EAAYnL,KAAK6L,MAAO+E,EAAUnH,cAGtCmH,EAAYe,GAEZvS,KAAKuG,iBAAiB6D,IAAIC,EAAcmH,GAE1CxR,KAAKsK,iBAAiBkF,QAAQpF,IAAIsH,EAAYF,GAC1CzF,EAAYU,MAAM3E,OAAOwK,QAAS,CACpC,GAAItS,KAAKwG,mBAAmBkI,IAAIgD,GAAa,CAC3C,IAAIqG,EAA+B/X,KAAKwG,mBAAmBtF,IAAIwQ,GAC/D,GAAIqG,EAAe/L,UAAYwF,EAK7B,YAJAxR,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOsL,EAAe/L,QAAQ3B,mBAKnDrK,KAAKwG,mBAAmB4D,IAAIsH,GAC1B1F,QAASwF,EACTgB,WAAYzG,EAAYnL,OAG5B4Q,EAAUpH,IAAI9H,EAAA6M,YAAYiD,gBAK9B,IADA,IAAI5C,EAAUzD,EAAYyD,QACjBnP,EAAI,EAAGwH,EAAI2H,EAAQpM,OAAQ/C,EAAIwH,IAAKxH,EAC3C,OAAQmP,EAAQnP,GAAGqK,MACjB,KAAKjI,EAAAkI,SAASC,iBACZ5K,KAAK6K,gBAAkC2E,EAAQnP,GAAI2J,EAAeC,EAAkBuH,GACpF,MAEF,KAAK/O,EAAAkI,SAASG,gBACZ9K,KAAK+K,eAAgCyE,EAAQnP,GAAImR,GACjD,MAEF,KAAK/O,EAAAkI,SAASO,oBACZlL,KAAKmL,mBAAwCqE,EAAQnP,GAAImR,GACzD,MAEF,KAAK/O,EAAAkI,SAASW,qBACZtL,KAAKuL,oBAA0CiE,EAAQnP,GAAImR,GAC3D,MAEF,KAAK/O,EAAAkI,SAASa,qBACZxL,KAAKyL,oBAA0C+D,EAAQnP,GAAI2J,EAAeC,EAAkBuH,GAC5F,MAEF,KAAK/O,EAAAkI,SAASe,gBAGZ1L,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfnF,EAAQnP,GAAGoM,OAEb,MAEF,KAAKhK,EAAAkI,SAASiB,SACZ5L,KAAK6L,oBAAuC2D,EAAQnP,GAAImR,GACxD,MAEF,QACE,MAAM,IAAI/C,MAAM,+BAMhB3I,EAAA7D,UAAA0J,oBAAR,SAA4BI,EAA8ByF,QAAA,IAAAA,MAAA,MAGxD,IAAI5Q,EAAOmL,EAAYnL,KAAKgM,KAC5B,GAAI5M,KAAKqG,YAAYqI,IAAI9N,IAASZ,KAAKsG,YAAYoI,IAAI9N,GACrDZ,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAO7L,OAH5B,CAOA,IAAI4N,EAAQ,IAAIzL,EAChByL,EAAMwJ,eAAiBjM,EAAYiM,eACnCxJ,EAAMO,KAAOhD,EAAYgD,KAEzB/O,KAAKsG,YAAY8D,IAAIxJ,EAAM4N,KAGrB1I,EAAA7D,UAAA4J,oBAAR,SAA4BpB,EAA8B+G,QAAA,IAAAA,MAAA,MAExD,IADA,IAAI6F,EAAe5M,EAAU4M,aACpBhX,EAAI,EAAGwH,EAAIwP,EAAajU,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACnD,IAAI0L,EAAcsL,EAAahX,GAC3BkQ,EAAaxE,EAAYwE,WACzBlG,EAAe0B,EAAY0F,sBAC/B,GAAIzR,KAAKmG,eAAeuI,IAAIrE,GAC1BrK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,OAH5B,CAOA,IAAIqH,EAAa3F,EAAYnL,KAAKgM,KAC9BqL,EAAS,IAAIjI,EACfhQ,KACA0R,EACArH,EACA7H,EAAA6F,KAAKc,KACL4C,EACAwE,EACIvQ,KAAKsQ,gBAAgBC,EACnB5K,EAAe2L,OACf3L,EAAe4N,OACf5N,EAAeyR,UAEjBzR,EAAesK,MAYrB,GAVAgI,EAAOvL,OAAS8E,EAChBxR,KAAKmG,eAAeiE,IAAIC,EAAc4N,GAElCA,EAAO5G,aAAa1L,EAAe4N,UAAY0E,EAAOlI,GAAGzN,EAAA6M,YAAY+I,QACvElY,KAAKsM,MACH/J,EAAAgK,eAAeyE,8BACf7N,OAAOV,EAAAgR,cAAchR,EAAAY,cAAckQ,OAAQhD,IAAa9D,MAAO,UAI/D+E,EAAW,CACb,GAAIA,EAAUhC,SACZ,GAAIgC,EAAUhC,QAAQd,IAAIgD,GAAa,CACrC1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,GAE1B,eAGFmH,EAAUhC,QAAU,IAAI3J,IAE1B2L,EAAUhC,QAAQpF,IAAIsH,EAAYuG,GAC9BzG,EAAUzB,GAAGzN,EAAA6M,YAAYiD,gBAAkB6F,EAAOlI,GAAGzN,EAAA6M,YAAYnE,SACnEiN,EAAO7N,IAAI9H,EAAA6M,YAAYiD,oBAEpB,GAAI6F,EAAOlI,GAAGzN,EAAA6M,YAAYnE,UAC3BhL,KAAKuG,iBAAiBmI,IAAIrE,GAC5BrK,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAOpC,GAG1BrK,KAAKuG,iBAAiB6D,IAAIC,EAAc4N,GAE1CjY,KAAKsK,iBAAiBkF,QAAQpF,IAAIsH,EAAYuG,GAC1ClM,EAAYU,MAAM3E,OAAOwK,SAAS,CACpC,GAAItS,KAAKwG,mBAAmBkI,IAAIgD,GAAa,CAC3C,IAAIa,EAA+BvS,KAAKwG,mBAAmBtF,IAAIwQ,GAC/D1R,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAO8F,EAAevG,QAAQ3B,cAEjD,SAEF4N,EAAO7N,IAAI9H,EAAA6M,YAAYiD,eACvBpS,KAAKwG,mBAAmB4D,IAAIsH,GAC1B1F,QAASiM,EACTzF,WAAYzG,EAAYnL,OAI9BZ,KAAKmR,YAAY8G,EAAQlM,MAG/BjG,EA9uDA,CAA6BvD,EAAA4V,mBAizD7B,SAAgBvH,EAAoBlG,GAClC,OAAQA,GACN,KAAKjI,EAAAY,cAAciO,OAAQ,OAAO3L,EAAe2L,OACjD,KAAK7O,EAAAY,cAAcC,SACnB,KAAKb,EAAAY,cAAcE,gBAAiB,OAAOoC,EAAepC,gBAC1D,KAAKd,EAAAY,cAAc0B,gBAAiB,OAAOY,EAAeZ,gBAC1D,KAAKtC,EAAAY,cAAciC,iBAAkB,OAAOK,EAAeL,iBAC3D,KAAK7C,EAAAY,cAAcwO,UAAW,OAAOlM,EAAekM,UACpD,KAAKpP,EAAAY,cAAcuO,OAAQ,OAAOjM,EAAeiM,OACjD,KAAKnP,EAAAY,cAAckQ,OAAQ,OAAO5N,EAAe4N,OACjD,KAAK9Q,EAAAY,cAAc+T,SAAU,OAAOzR,EAAeyR,SACnD,KAAK3U,EAAAY,cAAcyN,QAAS,OAAOnL,EAAemL,QAIlD,QAAS,OAAOnL,EAAesK,MAh0DtBvQ,EAAAoG,UAivDb,SAAYJ,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,0BAhCF,CAAYA,EAAAhG,EAAAgG,cAAAhG,EAAAgG,iBAmCZ,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBAEAA,IAAA,yBAEAA,IAAA,sBAEAA,IAAA,sBA1BF,CAAYA,EAAAjG,EAAAiG,iBAAAjG,EAAAiG,oBA6BZjG,EAAAkR,sBAoBA,IAAAwH,EAAA,WAoBE,SAAAA,EAAsBC,EAAkB3G,EAAoBrH,GAT5DrK,KAAAsY,MAAqBhW,EAAA6M,YAAYc,KAEjCjQ,KAAA8T,eAAiCnO,EAAesK,KAEhDjQ,KAAAwP,QAAsC,KAEtCxP,KAAA0M,OAAyB,KAIvB1M,KAAKqY,QAAUA,EACfrY,KAAK0R,WAAaA,EAClB1R,KAAKuY,cAAgBlO,EA4BzB,OAzBS+N,EAAAI,aAAP,SAAoBC,WAClB,IAAKA,EAAK,OAAOA,EACjB,IAAIC,EAAW,OACf,IAAe,IAAAC,EAAA7L,EAAA2L,GAAGG,EAAAD,EAAA3L,QAAA4L,EAAA3L,KAAA2L,EAAAD,EAAA3L,OAAE,CAAf,IAAI6L,EAAED,EAAAtX,MACToX,GAAiB,KAANG,EAAY,IAAMA,oGAE/B,OAAOH,GAGT3X,OAAAC,eAAIoX,EAAAnW,UAAA,oBAAJ,WACE,OAAOmW,EAAQI,aAAaxY,KAAKuY,oBAGnC,SAAiBlO,GACfrK,KAAKuY,cAAgBlO,mCAIvB+N,EAAAnW,UAAA8N,GAAA,SAAGY,GAA2B,OAAQ3Q,KAAKsY,MAAQ3H,IAASA,GAE5DyH,EAAAnW,UAAAiN,MAAA,SAAMoJ,GAA4B,OAA+B,IAAvBtY,KAAKsY,MAAQA,IAEvDF,EAAAnW,UAAAmI,IAAA,SAAIuG,GAA2B3Q,KAAKsY,OAAS3H,GAE7CyH,EAAAnW,UAAAoP,aAAA,SAAaV,GAA8B,OAAQ3Q,KAAK8T,eAAiBnD,IAASA,GACpFyH,EAnDA,GAAsB1Y,EAAA0Y,UAsDtB,IAAAjO,EAAA,SAAApE,GAQE,SAAAoE,EACEkO,EACAvQ,GAFF,IAAA7B,EAIEF,EAAAvF,KAAAR,KAAMqY,EAASvQ,EAAO2O,aAAcnU,EAAAsU,iBAAmB9O,EAAO2O,eAAazW,YAV7EiG,EAAAyE,KAAOhF,EAAYoR,UAWjB7Q,EAAKuJ,QAAU,IAAI3J,MAEvB,OAf+B2B,EAAA2C,EAAApE,GAe/BoE,EAfA,CAA+BiO,GAAlB1Y,EAAAyK,YAkBb,IAAA0N,EAAA,SAAA9R,GASE,SAAA8R,EACEQ,EACA3G,EACArH,EACA0B,GAJF,IAAA9F,EAMEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYrH,IAAarK,YAZ1CiG,EAAAyE,KAAOhF,EAAYoT,UAajB7S,EAAK8F,YAAcA,EACnB9F,EAAKqS,MAAQvM,EAAYuM,QAE7B,OAnB+B9Q,EAAAqQ,EAAA9R,GAmB/B8R,EAnBA,CAA+BO,GAAlB1Y,EAAAmY,YAsBb,IAAA1B,EAAA,SAAApQ,GAQE,SAAAoQ,EACEkC,EACA3G,EACArH,EACA0B,GAJF,IAAA9F,EAMEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYrH,IAAarK,YAZ1CiG,EAAAyE,KAAOhF,EAAYqT,KAajB9S,EAAK8F,YAAcA,EACnB9F,EAAKqS,MAAQvM,EAAYuM,QAE7B,OAlB0B9Q,EAAA2O,EAAApQ,GAkB1BoQ,EAlBA,CAA0BiC,GAAb1Y,EAAAyW,OAqBb,IAAAI,EAAA,SAAAxQ,GASE,SAAAwQ,EACED,EACA+B,EACA3G,EACArH,EACA0B,GALF,IAAA9F,EAOEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYrH,IAAarK,YAd1CiG,EAAAyE,KAAOhF,EAAYsT,UAKnB/S,EAAAgT,cAAqB,EAUnBhT,EAAKyG,OAAS4J,EACdrQ,EAAK8F,YAAcA,IAEvB,OApB+BvE,EAAA+O,EAAAxQ,GAoB/BwQ,EApBA,CAA+B6B,GAAlB1Y,EAAA6W,YAsBb,SAAkB2C,GAChBA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBAHF,CAAkBxZ,EAAAwZ,oBAAAxZ,EAAAwZ,uBAMlB,IAAAC,EAAA,SAAApT,GAeE,SAAAoT,EACEd,EACA3G,EACArH,EACA0E,EACAhD,GALF,IAAA9F,EAOEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYrH,IAAarK,YAb1CiG,EAAAmT,kBAAiB,EAcfnT,EAAK8I,KAAOA,EACZ9I,EAAK8F,YAAcA,IAgBvB,OAxCyCvE,EAAA2R,EAAApT,GA2BvCoT,EAAAlX,UAAAiO,yBAAA,SAAyB5O,GAIvB,OAHAtB,KAAKoZ,kBAAiB,EACtBpZ,KAAKqZ,qBAAuB/X,EAC5BtB,KAAKoK,IAAI9H,EAAA6M,YAAY+I,MAAQ5V,EAAA6M,YAAYmK,SAClCtZ,MAGTmZ,EAAAlX,UAAAmO,uBAAA,SAAuB9O,GAIrB,OAHAtB,KAAKoZ,kBAAiB,EACtBpZ,KAAKuZ,mBAAqBjY,EAC1BtB,KAAKoK,IAAI9H,EAAA6M,YAAY+I,MAAQ5V,EAAA6M,YAAYmK,SAClCtZ,MAEXmZ,EAxCA,CAAyCf,GAA5B1Y,EAAAyZ,sBA2Cb,IAAAnJ,EAAA,SAAAjK,GAIE,SAAAiK,EACEqI,EACA3G,EACArH,EACA0E,EACAhD,EACA+H,GANF,IAAA7N,EAQEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYrH,EAAc0E,EAAMhD,IAAY/L,YAV7DiG,EAAAyE,KAAOhF,EAAY4L,OAWjBrL,EAAKqS,MAAQvM,EAAcA,EAAYuM,MAAQhW,EAAA6M,YAAYc,KAC3DhK,EAAK6N,eAAiBA,EACtB7N,EAAK8I,KAAOA,IAEhB,OAjB4BvH,EAAAwI,EAAAjK,GAiB5BiK,EAjBA,CAA4BmJ,GAAfzZ,EAAAsQ,SAoBb,IAAAwJ,EAAA,WAiBA,OALE,SAAY5Y,EAAcmO,EAAY0K,QAAA,IAAAA,MAAA,MACpCzZ,KAAKY,KAAOA,EACZZ,KAAK+O,KAAOA,EACZ/O,KAAKyZ,YAAcA,GAfvB,GAAa/Z,EAAA8Z,YAoBb,IAAAE,EAAA,SAAA3T,GASE,SAAA2T,EACErB,EACA3G,EACAiI,EACA5K,EACAhD,QAAA,IAAAA,MAAA,MALF,IAAA9F,EAOEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYA,EAAY3C,EAAMhD,IAAY/L,YAd3DiG,EAAAyE,KAAOhF,EAAYkU,MAKnB3T,EAAA4T,aAA8B,KAU5B5T,EAAK0T,MAAQA,IAEjB,OAnB2BnS,EAAAkS,EAAA3T,GAmB3B2T,EAnBA,CAA2BP,GAAdzZ,EAAAga,QAsBb,IAAA1F,EAAA,SAAAjO,GAgBE,SAAAiO,EACEqE,EACA3G,EACArH,EACA0B,EACAmH,EACAY,QADA,IAAAZ,MAAA,WACA,IAAAY,MAAiCnO,EAAesK,MANlD,IAAAhK,EAQEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYrH,IAAarK,YAtB1CiG,EAAAyE,KAAOhF,EAAYsJ,mBAOnB/I,EAAA6T,UAAkC,IAAIjU,IAEtCI,EAAA8T,mBAAoC,KAEpC9T,EAAA8O,aAA6B1S,EAAaoD,QAYxCQ,EAAK8F,YAAcA,EACnB9F,EAAKqS,MAAQvM,EAAYuM,MACzBrS,EAAKiN,eAAiBA,EACtBjN,EAAK6N,eAAiBA,IAI1B,OAhCuCtM,EAAAwM,EAAAjO,GA+BrCiO,EAAA/R,UAAAgP,SAAA,WAAqB,OAAOjR,KAAK0R,YACnCsC,EAhCA,CAAuCoE,GAA1B1Y,EAAAsU,oBAmCb,IAAAgG,EAAA,SAAAjU,GAoCE,SAAAiU,EACE/X,EACAoI,EACAoF,EACA/C,EACAuN,gBADA,IAAAvN,MAAA,WACA,IAAAuN,MAAA,MALF,IAAAhU,EAOEF,EAAAvF,KAAAR,KAAMiC,EAAUoW,QAASpW,EAAUyP,WAAYrH,IAAarK,KAO5D,GAhDFiG,EAAAyE,KAAOhF,EAAYwU,SAOnBjU,EAAAkU,aAAkC,IAAItU,IAEtCI,EAAAmU,iBAEAnU,EAAAoU,oBAEApU,EAAAqU,aAA8B,KAM9BrU,EAAAsU,kBAEAtU,EAAAuU,IAAmB,EAEnBvU,EAAAwU,oBAA2B,EAE3BxU,EAAAyU,WAA8B,KAE9BzU,EAAA0U,WAA0B,KAElB1U,EAAA2U,YAAmB,EACnB3U,EAAA4U,WAA2B,KACnC5U,EAAA6U,aAAoB,EAkFZ7U,EAAA8U,SAA2B,KAC3B9U,EAAA+U,SAA2B,KAC3B/U,EAAAgV,SAA2B,KAC3BhV,EAAAiV,SAA2B,KA1EjCjV,EAAKhE,UAAYA,EACjBgE,EAAKwJ,UAAYA,EACjBxJ,EAAKyG,OAASA,EACdzG,EAAKqS,MAAQrW,EAAUqW,MACvBrS,EAAK6N,eAAiB7R,EAAU6R,eAChC7N,EAAKgU,wBAA0BA,GACzBhY,EAAU8N,GAAGzN,EAAA6M,YAAYE,SAAW,CACxC,IAAI8L,EAAa,EACjB,GAAIzO,GAAUA,EAAOhC,MAAQhF,EAAY0V,MAAO,CAC9CjY,OAAO8C,EAAK8J,GAAGzN,EAAA6M,YAAYkM,WAC3B,IAAIC,EAAQ,IAAI5B,EACdzX,EAAUoW,QACV,OACA8C,IACAhY,OAAOsM,EAAU8L,WAEnBtV,EAAKkU,aAAa/P,IAAI,OAAQkR,GAC9BrV,EAAKmU,cAAckB,EAAM3B,OAAS2B,EAClC,IAAIE,EAAiC9O,EAAQuN,wBAC7C,GAAIuB,EAAwB,CACrBvV,EAAKgU,0BAAyBhU,EAAKgU,wBAA0B,IAAIpU,SACtE,IAA2C,IAAA4V,EAAA3O,EAAA0O,GAAsBE,EAAAD,EAAAzO,QAAA0O,EAAAzO,KAAAyO,EAAAD,EAAAzO,OAAE,CAA1D,IAAA2O,EAAAxO,EAAAuO,EAAApa,MAAA,GAACsa,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GAClB1V,EAAKgU,wBAAwBvL,IAAIkN,IACpC3V,EAAKgU,wBAAwB7P,IAAIwR,EAAeC,4GAKtD1Y,QAAQ8C,EAAK8J,GAAGzN,EAAA6M,YAAYkM,WAG9B,IADA,IAAI3L,EAAiBD,EAAUC,eACtBrP,EAAI,EAAGwH,EAAI6H,EAAetM,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACrD,IAAIyb,EAAgBpM,EAAerP,GAC/B0b,EAAgBtM,EAAUuM,iBAAiB3b,GAC3Cib,EAAQ,IAAI5B,EACdzX,EAAUoW,QACV0D,EACAZ,IACAW,GAGF7V,EAAKkU,aAAa/P,IAAI2R,EAAeT,GACrCrV,EAAKmU,cAAckB,EAAM3B,OAAS2B,UAGtCrV,EAAKgW,KAAOC,EAAKva,OAAOsE,KAkL5B,OA3Q8BuB,EAAAwS,EAAAjU,GA6F5BiU,EAAA/X,UAAAka,SAAA,SAASpN,EAAYnO,EAA4BmL,QAA5B,IAAAnL,MAAA,WAA4B,IAAAmL,MAAA,MAE/C,IAAIoP,EAAanb,KAAKyP,UAAUC,eAAetM,OAASpD,KAAKqa,iBAAiBjX,OAC1EpD,KAAK+P,GAAGzN,EAAA6M,YAAYkM,aAAaF,EACrC,IAAIG,EAAQ,IAAI5B,EACd1Z,KAAKiC,UAAUoW,QACfzX,GAEI,OAASua,EAAWlK,SAAS,IACjCkK,EACApM,EACAhD,GAEF,GAAInL,EAAM,CACR,GAAIZ,KAAKma,aAAazL,IAAI9N,GAAO,MAAM,IAAI6N,MAAM,yBAAyB7N,GAC1EZ,KAAKma,aAAa/P,IAAIxJ,EAAM0a,GAI9B,OAFAtb,KAAKoa,cAAckB,EAAM3B,OAAS2B,EAClCtb,KAAKqa,iBAAiBlI,KAAKpD,GACpBuM,GASTtB,EAAA/X,UAAAma,aAAA,SAAarN,EAAYsN,GACvB,IAAIC,EAoBAhB,EAnBJ,YAFuB,IAAAe,OAAA,GAEftN,EAAKwN,gBACX,OACED,EAAQtc,KAAK+a,SACb,MAEF,OACEuB,EAAQtc,KAAKgb,SACb,MAEF,OACEsB,EAAQtc,KAAKib,SACb,MAEF,OACEqB,EAAQtc,KAAKkb,SACb,MAEF,QAAS,MAAM,IAAIzM,MAAM,0BAa3B,OAVI6N,GAASA,EAAMlZ,SACjBkY,EAAQgB,EAAME,OACRzN,KAAOA,EACbuM,EAAMhD,MAAQhW,EAAA6M,YAAYc,MAE1BqL,EAAQtb,KAAKmc,SAASpN,GAEpBA,EAAKgB,GAAG,KACV/P,KAAKic,KAAKQ,gBAAgBnB,EAAM3B,MAAO0C,GAElCf,GAITtB,EAAA/X,UAAAya,cAAA,SAAcpB,GACZ,IAAIA,EAAMvL,GAAGzN,EAAA6M,YAAYmK,SAAzB,CAEA,IAAIgD,EAEJ,OAHAnZ,OAAOmY,EAAM3B,OAAS,GAEtBxW,OAAqB,MAAdmY,EAAMvM,MACEuM,EAAMvM,KAAMwN,gBACzB,OACED,EAAQtc,KAAK+a,WAAa/a,KAAK+a,aAC/B,MAEF,OACEuB,EAAQtc,KAAKgb,WAAahb,KAAKgb,aAC/B,MAEF,OACEsB,EAAQtc,KAAKib,WAAajb,KAAKib,aAC/B,MAEF,OACEqB,EAAQtc,KAAKkb,WAAalb,KAAKkb,aAC/B,MAEF,QAAS,MAAM,IAAIzM,MAAM,0BAE3BtL,OAAOmY,EAAM3B,OAAS,GACtB2C,EAAMnK,KAAKmJ,KAIbtB,EAAA/X,UAAA0a,oBAAA,SAAoB5N,EAAYsN,GAC9B,IAAIC,EAoBAhB,EAnBJ,OAAQvM,EAAKwN,gBACX,OACED,EAAQtc,KAAK+a,WAAa/a,KAAK+a,aAC/B,MAEF,OACEuB,EAAQtc,KAAKgb,WAAahb,KAAKgb,aAC/B,MAEF,OACEsB,EAAQtc,KAAKib,WAAajb,KAAKib,aAC/B,MAEF,OACEqB,EAAQtc,KAAKkb,WAAalb,KAAKkb,aAC/B,MAEF,QAAS,MAAM,IAAIzM,MAAM,0BAa3B,OAVI6N,EAAMlZ,QACRkY,EAAQgB,EAAMA,EAAMlZ,OAAS,IACvB2L,KAAOA,GAEbuM,EAAQtb,KAAKmc,SAASpN,GACtBuN,EAAMnK,KAAKmJ,IAETvM,EAAKgB,GAAG,KACV/P,KAAKic,KAAKQ,gBAAgBnB,EAAM3B,MAAO0C,GAElCf,GAITtB,EAAA/X,UAAA2a,kBAAA,WACE,IAAIC,EAAK7c,KAAK4a,cAGd,OAFK5a,KAAK6a,WACL7a,KAAK6a,WAAW1I,KAAK0K,GADJ7c,KAAK6a,YAAegC,GAEnC7c,KAAKsa,aAAeuC,EAAG5L,SAAS,KAIzC+I,EAAA/X,UAAA6a,kBAAA,WACE3Z,OAA0B,MAAnBnD,KAAK6a,YACZ,IAAIzX,EAAiBpD,KAAK6a,WAAYzX,OACtCD,OAAOC,EAAS,GACRpD,KAAK6a,WAAY2B,MACrBpZ,EAAS,EACXpD,KAAKsa,aAAuBta,KAAK6a,WAAYzX,EAAS,GAAG6N,SAAS,KAElEjR,KAAKsa,aAAe,KACpBta,KAAK6a,WAAa,OAKtBb,EAAA/X,UAAA8a,SAAA,SAASpd,EAAgB6a,GAMvB,GALAxa,KAAKwa,IAAMA,EACXrX,QAAQnD,KAAK6a,aAAe7a,KAAK6a,WAAWzX,QAC5CpD,KAAK6a,WAAa,KAClB7a,KAAKsa,aAAe,KACpBta,KAAK+a,SAAW/a,KAAKgb,SAAWhb,KAAKib,SAAWjb,KAAKkb,SAAW,KAC5Dlb,KAAKqY,QAAQjQ,QAAQ4U,UAEvB,IADA,IAAIzC,EAAiBva,KAAKua,eACjBla,EAAI,EAAGwH,EAAI0S,EAAenX,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACrD,IAAI4c,EAAgB1C,EAAela,GACnCV,EAAOud,iBACL1C,EACAyC,EAAcE,aACdF,EAAcnV,OAAOsV,eACrBH,EAAcI,KACdJ,EAAcK,UAOtBtD,EAAA/X,UAAAgP,SAAA,WAAqB,OAAOjR,KAAKiC,UAAUyP,YAC7CsI,EA3QA,CAA8B5B,GAAjB1Y,EAAAsa,WA8Qb,IAAAuD,EAAA,SAAAxX,GAUE,SAAAwX,EAAYlF,EAAkB5I,GAA9B,IAAAxJ,EACEF,EAAAvF,KAAAR,KAAMqY,EAAS,GAAI,KAAGrY,KATxBiG,EAAAyE,KAAOhF,EAAY8X,gBAUjB,IAAI9L,EAAajC,EAAUgO,2BAC3BxX,EAAKyL,WAAaA,EAClBzL,EAAKoE,aAAeqH,EACpBzL,EAAKwJ,UAAYA,EACjBxJ,EAAK8I,KAAOvM,EAAA6F,KAAKQ,IAAI6U,WAAWjO,KAEpC,OAlBoCjI,EAAA+V,EAAAxX,GAkBpCwX,EAlBA,CAAoCnF,GAAvB1Y,EAAA6d,iBAqBb,IAAA1J,EAAA,SAAA9N,GAUE,SAAA8N,EACEX,EACAxB,EACArH,EACA0B,GAJF,IAAA9F,EAMEF,EAAAvF,KAAAR,KAAMkT,EAAemF,QAAS3G,EAAYrH,IAAarK,YAdzDiG,EAAAyE,KAAOhF,EAAYiY,gBAejB1X,EAAKiN,eAAiBA,EACtBjN,EAAK8F,YAAcA,EACnB9F,EAAKqS,MAAQvM,EAAYuM,QAE7B,OArBoC9Q,EAAAqM,EAAA9N,GAqBpC8N,EArBA,CAAoCuE,GAAvB1Y,EAAAmU,iBAwBb,IAAA+J,EAAA,SAAA7X,GAUE,SAAA6X,EACE3b,EACAoI,EACA0E,EACAhD,EACAW,GALF,IAAAzG,EAOEF,EAAAvF,KAAAR,KAAMiC,EAAUoW,QAASpW,EAAUyP,WAAYrH,EAAc0E,EAAMhD,IAAY/L,YAfjFiG,EAAAyE,KAAOhF,EAAYmY,MAKnB5X,EAAA6X,cAAqB,EAWnB7X,EAAKhE,UAAYA,EACjBgE,EAAKqS,MAAQrW,EAAUqW,MACvBrS,EAAK8I,KAAOA,EACZ9I,EAAKyG,OAASA,IAElB,OAvB2BlF,EAAAoW,EAAA7X,GAuB3B6X,EAvBA,CAA2BzE,GAAdzZ,EAAAke,QA0Bb,IAAAnI,EAAA,SAAA1P,GAYE,SAAA0P,EACE4C,EACA3G,EACArH,EACAqC,GAJF,IAAAzG,EAMEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYrH,IAAarK,YAhB1CiG,EAAAyE,KAAOhF,EAAY4P,SAKnBrP,EAAAsP,gBAA4C,KAE5CtP,EAAAuP,gBAA4C,KAU1CvP,EAAKyG,OAASA,IAElB,OArB8BlF,EAAAiO,EAAA1P,GAqB9B0P,EArBA,CAA8B2C,GAAjB1Y,EAAA+V,WAwBb,IAAA9D,EAAA,SAAA5L,GAiBE,SAAA4L,EACE0G,EACA3G,EACArH,EACA0B,EACA+H,GALF,IAAA7N,EAOEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYrH,IAAarK,YAtB1CiG,EAAAyE,KAAOhF,EAAYuI,gBAKnBhI,EAAA6T,UAA+B,IAAIjU,IAEnCI,EAAA0N,gBAA8C,KAE9C1N,EAAAiI,cAAuC,KAEvCjI,EAAAgO,qBAAiD,KAEjDhO,EAAA4O,mBAA2D,IAAIhP,IAU7DI,EAAK8F,YAAcA,EACnB9F,EAAKqS,MAAQvM,EAAYuM,MACzBrS,EAAK6N,eAAiBA,IAM1B,OAjCoCtM,EAAAmK,EAAA5L,GA8BlC4L,EAAA1P,UAAAgP,SAAA,WACE,OAAOjR,KAAK0R,YAEhBC,EAjCA,CAAoCyG,GAAvB1Y,EAAAiS,iBAoCb,IAAAoM,EAAA,SAAAhY,GAwBE,SAAAgY,EACE9b,EACAyP,EACArH,EACA2T,EACAC,gBADA,IAAAD,MAAA,WACA,IAAAC,MAAA,MALF,IAAAhY,EAOEF,EAAAvF,KAAAR,KAAMiC,EAAUoW,QAAS3G,EAAYrH,IAAarK,KASlD,GAtCFiG,EAAAyE,KAAOhF,EAAY0V,MAWnBnV,EAAAgU,wBAAmD,KAEnDhU,EAAAiY,oBAA2B,EAE3BjY,EAAAkY,oBAAuC,KAEvClY,EAAA2O,UAA+C,KAE/C3O,EAAAmY,aAAyB,EAWvBnY,EAAKhE,UAAYA,EACjBgE,EAAKqS,MAAQrW,EAAUqW,MACvBrS,EAAK6N,eAAiB7R,EAAU6R,eAChC7N,EAAK+X,cAAgBA,EACrB/X,EAAK8I,KAAO9M,EAAUoW,QAAQjQ,QAAQW,UAAUsV,QAAQpY,GACxDA,EAAKgY,KAAOA,EAGRA,EAAM,CACR,IAAIzC,EAAyByC,EAAKhE,wBAClC,GAAIuB,EAAwB,CACrBvV,EAAKgU,0BAAyBhU,EAAKgU,wBAA0B,IAAIpU,SACtE,IAAiC,IAAAyY,EAAAxR,EAAA0O,GAAsB+C,EAAAD,EAAAtR,QAAAuR,EAAAtR,KAAAsR,EAAAD,EAAAtR,OAAE,CAAhD,IAAA2O,EAAAxO,EAAAoR,EAAAjd,MAAA,GAACoU,EAAAiG,EAAA,GAAU6C,EAAA7C,EAAA,GAClB1V,EAAKgU,wBAAwB7P,IAAIsL,EAAU8I,uGAMjD,IACIne,EAAQwH,EADRkE,EAAc9F,EAAKhE,UAAU8J,YAEjC,GAAIA,EAAa,CACf,IAAIiM,EAAiBjM,EAAYiM,eACjC,GAAIgG,EAAe,CACjB,IAAKnW,EAAImW,EAAc5a,SAAW4U,EAAe5U,OAC/C,MAAM,IAAIqL,MAAM,gCAElB,GAAI5G,EAEF,IADK5B,EAAKgU,0BAAyBhU,EAAKgU,wBAA0B,IAAIpU,KACjExF,EAAI,EAAGA,EAAIwH,IAAKxH,EACnB4F,EAAKgU,wBAAwB7P,IAAI4N,EAAe3X,GAAGO,KAAKgM,KAAMoR,EAAc3d,SAG3E,GAAI2X,EAAe5U,OACxB,MAAM,IAAIqL,MAAM,yCAoDxB,OAtH2BjH,EAAAuW,EAAAhY,GAwEzBgY,EAAA9b,UAAAwc,eAAA,SAAeC,GACb,IAAIC,EAAwB3e,KAC5B,GAAG,GAAI2e,GAAWD,EAAQ,OAAO,QAC1BC,EAAUA,EAAQV,MACzB,OAAO,GAITF,EAAA9b,UAAA2c,eAAA,SAAelU,EAAoBmU,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQnU,GACN,KAAKrI,EAAaoB,YAEhB,GADIqb,EAAoB9e,KAAK4e,eAAevc,EAAasB,uBAClC,OAAOmb,EAC9B,MAEF,KAAKzc,EAAaqB,YAChB,IAAIob,EACJ,GADIA,EAAoB9e,KAAK4e,eAAevc,EAAauB,uBAClC,OAAOkb,EAC9B,MAEF,QAAS3b,QAAO,GAGpB,IAAIyL,EAAyB5O,KAC7B,EAAG,CACD,IAAI4U,EAAYhG,EAASgG,UACzB,GAAIA,EAAW,CACb,IAAImK,EAAWnK,EAAU1T,IAAIwJ,GAC7B,GAAIqU,EAAU,OAAOA,SAEhBnQ,EAAWA,EAASqP,MAC7B,OAAO,MAGTF,EAAA9b,UAAA+c,SAAA,SAASC,GACP,IAAIzP,EAAUrM,OAAOnD,KAAKwP,SAC1BrM,OAAOqM,EAAQd,IAAIuQ,IACnB,IAAIC,EAAiB1P,EAAQtO,IAAI+d,GAEjC,OADA9b,OAAO+b,EAAMxU,MAAQhF,EAAYmY,OAClBqB,EAAOpB,cAGxBC,EAAA9b,UAAAgP,SAAA,WACE,OAAOjR,KAAK0R,YAEhBqM,EAtHA,CAA2B3F,GAAd1Y,EAAAqe,QAyHb,IAAApG,EAAA,SAAA5R,GAQE,SAAA4R,EACEU,EACA3G,EACArH,EACA0B,EACA+H,GALF,IAAA7N,EAOEF,EAAAvF,KAAAR,KAAMqY,EAAS3G,EAAYrH,EAAc0B,EAAa+H,IAAe9T,YAbvEiG,EAAAyE,KAAOhF,EAAY0N,sBAerB,OAjBwC5L,EAAAmQ,EAAA5R,GAiBxC4R,EAjBA,CAAwChG,GAA3BjS,EAAAiY,qBAoBb,IAAAwH,EAAA,SAAApZ,GAUE,SAAAoZ,EACEld,EACAyP,EACArH,EACA2T,EACAC,QADA,IAAAD,eACA,IAAAC,MAAA,MALF,IAAAhY,EAOEF,EAAAvF,KAAAR,KAAMiC,EAAWyP,EAAYrH,EAAc2T,EAAeC,IAAKje,YAfjEiG,EAAAyE,KAAOhF,EAAY0Z,YAiBrB,OAnB+B5X,EAAA2X,EAAApZ,GAmB/BoZ,EAnBA,CAA+BpB,GAAlBre,EAAAyf,YAsBb,SAAkBE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,0BAEAA,IAAA,0BAKAA,IAAA,kDAEAA,IAAA,iDAEAA,IAAA,iDAEAA,IAAA,uDAEAA,IAAA,wDAKAA,IAAA,sCAEAA,IAAA,4CAKAA,IAAA,sCAMAA,IAAA,sCAQAA,IAAA,wCAxDF,CAAkB3f,EAAA2f,YAAA3f,EAAA2f,eAgElB,IAAAnD,EAAA,WAyCE,SAAAA,IAtBAlc,KAAAsf,aAAyC,KAyf3C,OAlfSpD,EAAAva,OAAP,SAAc4d,GACZ,IAAIC,EAAa,IAAItD,EAWrB,OAVAsD,EAAW9S,OAAS,KACpB8S,EAAWlH,MAAK,EAChBkH,EAAWD,gBAAkBA,EAC7BC,EAAWC,cAAgB,KAC3BD,EAAWE,WAAa,KACxBF,EAAWG,YAAc,KACzBH,EAAW5P,WAAa2P,EAAgB9P,UAAUG,WAClD4P,EAAWvF,wBAA0BsF,EAAgBtF,wBACrDuF,EAAWI,cAAgBvW,QAAQ,GACnCmW,EAAWK,iBAAmB,KACvBL,GAMTtD,EAAAja,UAAA8N,GAAA,SAAGY,GAAyB,OAAQ3Q,KAAKsY,MAAQ3H,IAASA,GAE1DuL,EAAAja,UAAAiN,MAAA,SAAMyB,GAAyB,OAA8B,IAAtB3Q,KAAKsY,MAAQ3H,IAEpDuL,EAAAja,UAAAmI,IAAA,SAAIuG,GAAyB3Q,KAAKsY,OAAS3H,GAE3CuL,EAAAja,UAAA6d,MAAA,SAAMnP,GAAyB3Q,KAAKsY,QAAU3H,GAG9CuL,EAAAja,UAAA8d,KAAA,WACE,IAAIC,EAAS,IAAI9D,EAWjB,OAVA8D,EAAOtT,OAAS1M,KAChBggB,EAAO1H,MAAQtY,KAAKsY,MACpB0H,EAAOT,gBAAkBvf,KAAKuf,gBAC9BS,EAAOP,cAAgBzf,KAAKyf,cAC5BO,EAAON,WAAa1f,KAAK0f,WACzBM,EAAOL,YAAc3f,KAAK2f,YAC1BK,EAAOpQ,WAAa5P,KAAK4P,WACzBoQ,EAAO/F,wBAA0Bja,KAAKia,wBACtC+F,EAAOJ,cAAgB5f,KAAK4f,cAC5BI,EAAOH,iBAAmB7f,KAAK6f,iBAAmB7f,KAAK6f,iBAAiBI,QAAU,KAC3ED,GAIT9D,EAAAja,UAAAie,KAAA,mBACMxT,EAASvJ,OAAOnD,KAAK0M,QACzB,GAAI1M,KAAKsf,aAAc,KACrB,IAAwB,IAAA3D,EAAA7O,EAAA9M,KAAKsf,aAAalJ,UAAQlJ,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAA/C,IAAImT,EAAWjT,EAAA5L,MACd6e,EAAYpQ,GAAGzN,EAAA6M,YAAYiR,SAC7BpgB,KAAKuf,gBAAgB7C,cAAcyD,qGAGvCngB,KAAKsf,aAAe,KAEtB,OAAO5S,GAITwP,EAAAja,UAAAoe,eAAA,SAAetR,EAAYnO,EAAcyb,EAAetQ,GACtD,IAAIoU,EAAcngB,KAAKuf,gBAAgBnD,aAAarN,GAAM,GAC1D,GAAK/O,KAAKsf,aACL,CACH,IAAIgB,EAAgBtgB,KAAKsf,aAAape,IAAIN,GAC1C,GAAI0f,EAOF,OANIvU,EACF/L,KAAKuf,gBAAgBlH,QAAQ/L,MAC3B/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,OAEdtJ,QAAO,GACPmd,OAVatgB,KAAKsf,aAAe,IAAIzZ,IAkBhD,OALAsa,EAAY/V,IAAI9H,EAAA6M,YAAYiR,QAC5BpgB,KAAKsf,aAAalV,IAAIxJ,EAAMuf,GACxBpR,EAAKgB,GAAG,KACV/P,KAAKyc,gBAAgB0D,EAAYxG,MAAO0C,GAEnC8D,GAITjE,EAAAja,UAAAse,oBAAA,SAAoB5G,EAAY5K,EAAYnO,GAC1C,GAAKZ,KAAKsf,aACL,CACH,IAAIgB,EAAgBtgB,KAAKsf,aAAape,IAAIN,GAC1C,GAAI0f,EAAe,CACjB,IAAIvU,EAAcuU,EAAcvU,YAOhC,OANIA,EACF/L,KAAKuf,gBAAgBlH,QAAQ/L,MAC3B/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,OAEdtJ,QAAO,GACPmd,QAXatgB,KAAKsf,aAAe,IAAIzZ,IAchD1C,OAAOwW,EAAQ3Z,KAAKuf,gBAAgBnF,cAAchX,QAClD,IAAIod,EAAc,IAAI9G,EACpB1Z,KAAKuf,gBAAgBlH,QACrBzX,EACA+Y,EACA5K,EACA,MAGF,OADA/O,KAAKsf,aAAalV,IAAIxJ,EAAM4f,GACrBA,GAITtE,EAAAja,UAAAwe,eAAA,SAAe7f,GACb,IAAI0a,EACAqD,EAAuB3e,KAC3B,GACE,GAAI2e,EAAQW,eAAiBhE,EAAQqD,EAAQW,aAAape,IAAIN,IAC5D,OAAO0a,QAEFqD,EAAUA,EAAQjS,QAC3B,OAAO1M,KAAKuf,gBAAgBpF,aAAajZ,IAAIN,IAI/Csb,EAAAja,UAAAye,eAAA,SAAe/G,GACb,IAAIgH,EACAC,EACJ,GAAIjH,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OAAO,EACtBgH,EAAM3gB,KAAK4f,kBACN,MAAIgB,EAAM5gB,KAAK6f,kBAMpB,OAAO,EALP,IAAIxf,GAAMsZ,EAAQ,IAAM,GAAM,EAC9B,GAAItZ,GAAKugB,EAAIxd,OAAQ,OAAO,EAC5Bud,EAAMC,EAAIvgB,GACVsZ,GAAmB,IAATtZ,EAAI,GAIhB,OAAOwgB,OACLC,QACEH,EACAI,QACEC,QACA3X,QAAQsQ,KAGZsH,WAKJ/E,EAAAja,UAAAwa,gBAAA,SAAgB9C,EAAY0C,GAC1B,IAAIsE,EACAO,GAAY,EAChB,GAAIvH,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OACfgH,EAAM3gB,KAAK4f,kBACN,CACL,IAAIgB,EAAM5gB,KAAK6f,iBAMf,IALAqB,GAAQvH,EAAQ,IAAM,GAAM,EACvBiH,IACH5gB,KAAK6f,iBAAmBe,EAAM,IAAI9W,MAAMoX,EAAM,GAC9CN,EAAIxd,OAAS,GAERwd,EAAIxd,QAAU8d,GAAKN,EAAIzO,KAAK9I,QAAQ,IAC3CsX,EAAMC,EAAIM,GACVvH,GAAqB,IAAXuH,EAAM,GAElBP,EAAMtE,EACF8E,OACER,EACAI,QACEC,QACA3X,QAAQsQ,KAGZmH,QACEH,EACAS,QACEL,QACEC,QACA3X,QAAQsQ,MAIduH,GAAO,EAAWlhB,KAAK6f,iBAAkBqB,GAAOP,EAC/C3gB,KAAK4f,cAAgBe,GAI5BzE,EAAAja,UAAAof,QAAA,SAAQC,GACNthB,KAAKsY,OAAuB,KAAdgJ,EAAMhJ,MACpBtY,KAAK4f,cAAgB0B,EAAM1B,cAC3B5f,KAAK6f,iBAAmByB,EAAMzB,kBAIhC3D,EAAAja,UAAAsf,mBAAA,SAAmBD,GACbA,EAAMvR,GAAE,IACV/P,KAAKoK,IAAG,IAENkX,EAAMvR,GAAE,IACV/P,KAAKoK,IAAG,KAENkX,EAAMvR,GAAE,IAAsBuR,EAAM5B,YAAc1f,KAAK0f,YACzD1f,KAAKoK,IAAG,KAENkX,EAAMvR,GAAE,KAAyBuR,EAAM7B,eAAiBzf,KAAKyf,eAC/Dzf,KAAKoK,IAAG,KAENkX,EAAMvR,GAAE,KACV/P,KAAKoK,IAAG,OAKZ8R,EAAAja,UAAAuf,cAAA,SAAcC,EAAYC,GAExB1hB,KAAKsY,OAASmJ,EAAKnJ,MAAQoJ,EAAMpJ,MAAK,GAGtCtY,KAAKsY,OAAmB,KAAVmJ,EAAKnJ,MACnBtY,KAAKsY,OAAoB,KAAXoJ,EAAMpJ,MAGpBtY,KAAK4f,cAAgBkB,QAAQW,EAAK7B,cAAe8B,EAAM9B,eACvD,IAAI+B,EAAUF,EAAK5B,iBACf+B,EAAWF,EAAM7B,iBACrB,GAAe,MAAX8B,GAA+B,MAAZC,EAAkB,CACvC,IAAIC,EAAU7hB,KAAK6f,iBACfiC,EAAYC,IAAIJ,EAAQve,OAAQwe,EAASxe,QAC7C,GAAI0e,EAAW,CACb,GAAKD,EACA,KAAOA,EAAQze,OAAS0e,GAAWD,EAAQ1P,KAAK9I,QAAQ,SAD/CwY,EAAU,IAAI/X,MAAMgY,GAElC,IAAK,IAAIzhB,EAAI,EAAGA,EAAIyhB,IAAazhB,EAC/BwhB,EAAQxhB,GAAKygB,QACXa,EAAQthB,GACRuhB,EAASvhB,OAYnB6b,EAAAja,UAAA+f,YAAA,SAAYC,EAAqBlT,GAM/B,GAHA5L,OAAO4L,GAAQvM,EAAA6F,KAAKc,OAGf4F,EAAKgB,GAAG,IAAsC,OAAO,EAE1D,IAAImS,EACJ,OAAQxf,EAAAyf,gBAAgBF,IAGtB,KAAKvf,EAAA0f,aAAaC,SAChB,IAAI9C,EAAkBvf,KAAKuf,gBACvBjE,EAAQiE,EAAgBnF,cAAc1X,EAAA4f,iBAAiBL,IAC3D,OAAQ1C,EAAgBtD,KAAKyE,eAAepF,EAAM3B,QAC3C4I,EAAsBjH,EAAMvM,KAAMA,GAI3C,KAAKrM,EAAA0f,aAAaI,SAEhB,OADArf,OAAOT,EAAA+f,WAAWR,IACXjiB,KAAKgiB,YAAYtf,EAAAggB,iBAAiBT,GAAOlT,GAIlD,KAAKrM,EAAA0f,aAAaO,UAEhB,IAAIC,EAASzf,OAAOnD,KAAKuf,gBAAgBlH,QAAQlS,eAAejF,IAAIiC,OAAOT,EAAAmgB,iBAAiBZ,MAE5F,OADA9e,OAAOyf,EAAOlY,MAAQhF,EAAY4L,QAC3BiR,EAAsBpf,OAAgByf,EAAQ7T,MAAOA,GAG9D,KAAKrM,EAAA0f,aAAaU,OAChB,OAAQpgB,EAAAqgB,YAAYd,IAGlB,KAAKvf,EAAAsgB,SAASC,MACd,KAAKvgB,EAAAsgB,SAASE,MACd,KAAKxgB,EAAAsgB,SAASG,MACd,KAAKzgB,EAAAsgB,SAASI,MACd,KAAK1gB,EAAAsgB,SAASK,MACd,KAAK3gB,EAAAsgB,SAASM,MACd,KAAK5gB,EAAAsgB,SAASO,MACd,KAAK7gB,EAAAsgB,SAASQ,MACd,KAAK9gB,EAAAsgB,SAASS,MACd,KAAK/gB,EAAAsgB,SAASU,MACd,KAAKhhB,EAAAsgB,SAASW,MACd,KAAKjhB,EAAAsgB,SAASY,MACd,KAAKlhB,EAAAsgB,SAASa,MACd,KAAKnhB,EAAAsgB,SAASc,MACd,KAAKphB,EAAAsgB,SAASe,MACd,KAAKrhB,EAAAsgB,SAASgB,MACd,KAAKthB,EAAAsgB,SAASiB,MACd,KAAKvhB,EAAAsgB,SAASkB,MACd,KAAKxhB,EAAAsgB,SAASmB,MACd,KAAKzhB,EAAAsgB,SAASoB,MACd,KAAK1hB,EAAAsgB,SAASqB,MACd,KAAK3hB,EAAAsgB,SAASsB,MACd,KAAK5hB,EAAAsgB,SAASuB,MACd,KAAK7hB,EAAAsgB,SAASwB,MACd,KAAK9hB,EAAAsgB,SAASyB,MACd,KAAK/hB,EAAAsgB,SAAS0B,MACd,KAAKhiB,EAAAsgB,SAAS2B,MACd,KAAKjiB,EAAAsgB,SAAS4B,MACd,KAAKliB,EAAAsgB,SAAS6B,MACd,KAAKniB,EAAAsgB,SAAS8B,MACd,KAAKpiB,EAAAsgB,SAAS+B,MACd,KAAKriB,EAAAsgB,SAASgC,MAAO,OAAO,EAG5B,KAAKtiB,EAAAsgB,SAASiC,OACZ,QAEIviB,EAAAyf,gBAAgBD,EAAUxf,EAAAwiB,cAAcjD,KAAUvf,EAAA0f,aAAa+C,QAEhC,GAA7BziB,EAAA0iB,iBAAiBlD,IAEc,GAA7Bxf,EAAA0iB,iBAAiBlD,KAChBliB,KAAKgiB,YAAYtf,EAAA2iB,eAAepD,GAAOlT,KAI5CrM,EAAAyf,gBAAgBD,EAAUxf,EAAA2iB,eAAepD,KAAUvf,EAAA0f,aAAa+C,QAEjC,GAA7BziB,EAAA0iB,iBAAiBlD,IAEc,GAA7Bxf,EAAA0iB,iBAAiBlD,KAChBliB,KAAKgiB,YAAYtf,EAAAwiB,cAAcjD,GAAOlT,KASjD,KAAKrM,EAAAsgB,SAASsC,OAGZ,QAGM5iB,EAAAyf,gBAAgBD,EAAUxf,EAAAwiB,cAAcjD,KAAUvf,EAAA0f,aAAa+C,OAC/DziB,EAAA0iB,iBAAiBlD,IAAYnT,EAAKwW,wBAAwB/iB,EAAA6F,KAAKG,OAC3DxI,KAAKgiB,YAAYE,EAASnT,IAG9BrM,EAAAyf,gBAAgBD,EAAUxf,EAAA2iB,eAAepD,KAAUvf,EAAA0f,aAAa+C,OAChEziB,EAAA0iB,iBAAiBlD,IAAYnT,EAAKwW,wBAAwB/iB,EAAA6F,KAAKG,OAC3DxI,KAAKgiB,YAAYE,EAASnT,IAMtC,KAAKrM,EAAAsgB,SAASwC,OACZ,IAAIC,EAAQ,GAAK1W,EAAK2W,KACtB,OAAOhjB,EAAAyf,gBAAgBD,EAAUxf,EAAA2iB,eAAepD,KAAUvf,EAAA0f,aAAa+C,OAChEziB,EAAA0iB,iBAAiBlD,GAAWuD,EAIrC,KAAK/iB,EAAAsgB,SAAS2C,OACRF,EAAQ,GAAK1W,EAAK2W,KACtB,OAAO1lB,KAAKgiB,YAAYtf,EAAAwiB,cAAcjD,GAAOlT,KAC3CrM,EAAAyf,gBAAgBD,EAAUxf,EAAA2iB,eAAepD,KAAUvf,EAAA0f,aAAa+C,OAChEziB,EAAA0iB,iBAAiBlD,GAAWuD,GAMhC,KAAK/iB,EAAAsgB,SAAS4C,OACRH,EAAQ,GAAK1W,EAAK2W,KACtB,OAAO3W,EAAKgB,GAAE,KAERrN,EAAAyf,gBAAgBD,EAAUxf,EAAA2iB,eAAepD,KAAUvf,EAAA0f,aAAa+C,OAChEziB,EAAA0iB,iBAAiBlD,GAAWuD,GAE9BzlB,KAAKgiB,YAAYtf,EAAAwiB,cAAcjD,GAAOlT,MACpCrM,EAAAyf,gBAAgBD,EAAUxf,EAAA2iB,eAAepD,KAAUvf,EAAA0f,aAAa+C,OAChEziB,EAAA0iB,iBAAiBlD,IAAYuD,GAKrC,KAAK/iB,EAAAsgB,SAAS6C,OACd,KAAKnjB,EAAAsgB,SAAS8C,OACd,KAAKpjB,EAAAsgB,SAAS+C,OACZ,OAAO/lB,KAAKgiB,YAAYtf,EAAAwiB,cAAcjD,GAAOlT,IACtC/O,KAAKgiB,YAAYtf,EAAA2iB,eAAepD,GAAOlT,GAGlD,MAGF,KAAKrM,EAAA0f,aAAa4D,MAChB,OAAQtjB,EAAAujB,WAAWhE,IAGjB,KAAKvf,EAAAwjB,QAAQC,OACb,KAAKzjB,EAAAwjB,QAAQE,OAAQ,OAAO,EAG5B,KAAK1jB,EAAAwjB,QAAQG,OACb,KAAK3jB,EAAAwjB,QAAQI,OACb,KAAK5jB,EAAAwjB,QAAQK,UAAW,OAAOxX,EAAK2W,KAAO,EAE7C,MAIF,KAAKhjB,EAAA0f,aAAa+C,MAChB,IAAI7jB,EAAa,EACjB,OAAQoB,EAAA8jB,kBAAkBvE,IACxB,OAAuB3gB,EAAQoB,EAAA0iB,iBAAiBnD,GAAO,MACvD,OAAuB3gB,EAAQoB,EAAA+jB,oBAAoBxE,GAAO,MAC1D,OAAuB3gB,EAAQkH,IAAI9F,EAAAgkB,iBAAiBzE,IAAQ,MAC5D,OAAuB3gB,EAAQkH,IAAI9F,EAAAikB,iBAAiB1E,IAAQ,MAC5D,QAAS9e,QAAO,GAElB,OAAQ4L,EAAKrE,MACX,OAAkB,OAAOpJ,EAAQgH,GAAGse,WAAatlB,EAAQgH,GAAGue,UAC5D,OAAmB,OAAOvlB,EAAQiH,IAAIqe,WAAatlB,EAAQiH,IAAIse,UAC/D,OAAkB,OAAOvlB,EAAQ,GAAKA,EAAQqH,GAAGke,UACjD,OAAmB,OAAOvlB,EAAQ,GAAKA,EAAQsH,IAAIie,UACnD,QAAoB,OAAuB,KAAP,EAARvlB,GAE9B,MAIF,KAAKoB,EAAA0f,aAAa0E,KAChB,IAAIC,OAAQ,EACZ,OAAQrkB,EAAAskB,aAAa/E,IACnB,KAAK,EAAM8E,EAAWrkB,EAAAukB,aAAahF,GAAQzf,EAAA6F,KAAKC,GAAK9F,EAAA6F,KAAKM,GAAI,MAC9D,KAAK,EAAMoe,EAAWrkB,EAAAukB,aAAahF,GAAQzf,EAAA6F,KAAKE,IAAM/F,EAAA6F,KAAKO,IAAK,MAChE,QAAWme,EAAWrkB,EAAAukB,aAAahF,GAAQzf,EAAA6F,KAAKG,IAAMhG,EAAA6F,KAAKQ,IAE7D,OAAO0Z,EAAsBwE,EAAUhY,GAMzC,KAAKrM,EAAA0f,aAAa8E,MAChB,IAAKxkB,EAAAykB,aAAalF,GAAO,CACvB,IAAIyD,EAAOviB,OAAOT,EAAA0kB,mBAAmBnF,IACjCoF,EAAO3kB,EAAA4kB,cAAcrF,EAAMyD,EAAO,GACtC,OAAO1lB,KAAKgiB,YAAYqF,EAAMtY,GAGhC,MAIF,KAAKrM,EAAA0f,aAAamF,GAChB,OAAOvnB,KAAKgiB,YAAYtf,EAAA8kB,UAAUvF,GAAOlT,IAClC/O,KAAKgiB,YAAY7e,OAAOT,EAAA+kB,WAAWxF,IAAQlT,GAIpD,KAAKrM,EAAA0f,aAAasF,OAChB,OAAO1nB,KAAKgiB,YAAYtf,EAAAilB,cAAc1F,GAAOlT,IACtC/O,KAAKgiB,YAAYtf,EAAAklB,cAAc3F,GAAOlT,GAI/C,KAAKrM,EAAA0f,aAAayF,KAChB,IAAIxP,EAAUrY,KAAKuf,gBAAgBlH,QAC/BzJ,EAAWzL,OAAOkV,EAAQjS,gBAAgBlF,IAAIiC,OAAOT,EAAAolB,cAAc7F,MACvE9e,OAAOyL,EAASlE,MAAQhF,EAAYwU,UACpC,IAAItK,EAAwBhB,EAAUa,UAAUG,WAChD,OAAmBhB,EAAUqN,KAAKlM,GAAE,IAC7BwS,EAAsB3S,EAAYb,GAI3C,KAAKrM,EAAA0f,aAAa2F,YAAa,OAAO,EAExC,OAAO,GAIT7L,EAAAja,UAAA8a,SAAA,WACE5Z,OAAsB,MAAfnD,KAAK0M,QACZ1M,KAAKyf,cAAgB,KACrBzf,KAAK0f,WAAa,KAClB1f,KAAK2f,YAAc,KACnB3f,KAAKia,wBAA0B,MAEnCiC,EA5gBA,GA+gBA,SAASqG,EAAsBwE,EAAgBiB,GAC7C,OAAQjB,EAAShX,GAAE,IACZgX,EAASrB,KAAOsC,EAAOtC,MACvBqB,EAAShX,GAAE,IAAsBiY,EAAOjY,GAAE,GAlhBtCrQ,EAAAwc,2bCrgGb,IAAA5Z,EAAAnC,EAAA,GAQA8nB,EAAA9nB,EAAA,GAYST,EAAAwoB,MAXPD,EAAAC,MAWcxoB,EAAAuS,MATdgW,EAAAhW,MAGF,IASYtH,EATZwd,EAAAhoB,EAAA,IASA,SAAYwK,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBAvEF,CAAYA,EAAAjL,EAAAiL,WAAAjL,EAAAiL,cA2EZjL,EAAA0oB,oBAAA,SAAoC1d,GAClC,OAAQA,GACN,KAAKC,EAAS4J,QACd,KAAK5J,EAAS0d,KACd,KAAK1d,EAAS2d,KACd,KAAK3d,EAAS4d,MAAO,OAAO,EAE9B,OAAO,GAIT7oB,EAAA8oB,eAAA,SAA+B9d,GAC7B,OAAQA,GACN,KAAKC,EAAS8d,WACd,KAAK9d,EAAS+d,KAEd,KAAK/d,EAASge,cACd,KAAKhe,EAASie,eACd,KAAKje,EAASke,cAAe,OAAO,EAEtC,OAAO,GAITnpB,EAAAopB,sBAAA,SAAsCpe,GACpC,OAAQA,GACN,KAAKC,EAAS8d,WACd,KAAK9d,EAASie,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAG,EAAA,oBAAAA,IAOE/oB,KAAA0M,OAAsB,KAEtB1M,KAAAsY,MAAqBhW,EAAA6M,YAAYc,KAm4BnC,OAh4BE8Y,EAAA9mB,UAAA8N,GAAA,SAAGY,GAA2B,OAAQ3Q,KAAKsY,MAAQ3H,IAASA,GAE5DoY,EAAA9mB,UAAAiN,MAAA,SAAMyB,GAA2B,OAA8B,IAAtB3Q,KAAKsY,MAAQ3H,IAEtDoY,EAAA9mB,UAAAmI,IAAA,SAAIuG,GAA2B3Q,KAAKsY,OAAS3H,GAItCoY,EAAAC,WAAP,SACEpoB,EACAod,EACAiL,EACAxc,GAEA,IAAIsC,EAAO,IAAIma,EAKf,OAJAna,EAAKtC,MAAQA,EACbsC,EAAKnO,KAAOA,EAAMA,EAAK8L,OAASqC,EAChCA,EAAKiP,cAAgBA,EAAmBA,GAAemL,GAAUnL,EAAejP,GAChFA,EAAKka,WAAaA,EACXla,GAGFga,EAAAK,kBAAP,SACE3c,GAEA,OAAOsc,EAAKC,WACVD,EAAKM,2BAA2B,GAAI5c,GACpC,MACA,EACAA,IAIGsc,EAAAO,oBAAP,SACE1oB,EACAkN,EACArB,GAEA,IAAI8c,EAAO,IAAIC,EAIf,OAHAD,EAAK9c,MAAQA,EACb8c,EAAK3oB,KAAOA,EAAMA,EAAK8L,OAAS6c,EAChCA,EAAKzb,YAAcA,EAAiBA,IAAaA,EAAYpB,OAAS6c,GAC/DA,GAGFR,EAAAU,gBAAP,SACE7oB,EACAmO,EACA0K,EACA/O,EACA+B,GAEA,IAAI8c,EAAO,IAAIG,EAMf,OALAH,EAAK9c,MAAQA,EACb8c,EAAK3oB,KAAOA,EAAMA,EAAK8L,OAAS6c,EAChCA,EAAKxa,KAAOA,EAAUA,IAAMA,EAAKrC,OAAS6c,GAC1CA,EAAK9P,YAAcA,EAAiBA,IAAaA,EAAY/M,OAAS6c,GACtEA,EAAKI,cAAgBjf,EACd6e,GAGFR,EAAAa,gBAAP,SACEC,EACAja,EACAka,EACAb,EACAxc,GAEA,IAAIsd,EAAM,IAAIC,EAMd,OALAD,EAAItd,MAAQA,EACZsd,EAAIF,WAAaA,EAAYV,GAAUU,EAAYE,GACnDA,EAAIna,WAAaA,EAAYA,EAAWlD,OAASqd,EACjDA,EAAID,iBAAmBA,EAAsBA,IAAkBA,EAAiBpd,OAASqd,GACzFA,EAAId,WAAaA,EACVc,GAKFhB,EAAAkB,gBAAP,SACErpB,EACAspB,EACAzd,GAEA,IAAI0d,EAAO,IAAIC,EAKf,OAJAD,EAAK1d,MAAQA,EACb0d,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAK9V,UAAY6V,EAAUA,GAAMf,GAAUe,EAAMC,GACjDA,EAAKlnB,cAAgB4N,EAAoBjQ,GAClCupB,GAGFpB,EAAAsB,cAAP,SACEzd,EACAlC,EACA+B,GAEA,IAAI6d,EAAO,IAAIC,EAIf,OAHAD,EAAK7d,MAAQA,EACb6d,EAAKE,YAAc9f,EACnB4f,EAAK1d,KAAOA,EACL0d,GAKFvB,EAAAM,2BAAP,SACEzoB,EACA6L,GAEA,IAAIwV,EAAO,IAAIwI,EAGf,OAFAxI,EAAKxV,MAAQA,EACbwV,EAAKrV,KAAOhM,EACLqhB,GAGF8G,EAAA2B,gCAAP,SACEje,GAEA,IAAIwV,EAAO,IAAIwI,EAGf,OAFAxI,EAAKxV,MAAQA,EACbwV,EAAKrV,KAAO,GACLqV,GAGF8G,EAAA4B,6BAAP,SACEC,EACAne,GAEA,IAAIwV,EAAO,IAAI4I,EAGf,OAFA5I,EAAKxV,MAAQA,EACbwV,EAAK6I,mBAAqBF,EA4sD9B,SAA4BG,EAAwBre,GAClD,IAAK,IAAIrM,EAAI,EAAGwH,EAAIkjB,EAAM3nB,OAAQ/C,EAAIwH,IAAKxH,EAAG,CAC5C,IAAIiqB,EAAOS,EAAM1qB,GACbiqB,IAAMA,EAAK5d,OAASA,IA/sDYse,CAAmBJ,EAAU3I,GAC1DA,GAGF8G,EAAAkC,0BAAP,SACEC,EACAC,EACAnD,EACAvb,GAEA,IAAIwV,EAAO,IAAImJ,EAKf,OAJAnJ,EAAKxV,MAAQA,EACbwV,EAAKiJ,cAAgBA,EACrBjJ,EAAKkJ,WAAaA,EAAYA,EAAWze,OAASuV,EAClDA,EAAK+F,OAASA,EAAQA,EAAOtb,OAASuV,EAC/BA,GAGF8G,EAAAsC,uBAAP,SACEC,EACA7J,EACAC,EACAjV,GAEA,IAAIwV,EAAO,IAAIsJ,EAKf,OAJAtJ,EAAKxV,MAAQA,EACbwV,EAAKqJ,SAAWA,EAChBrJ,EAAKR,KAAOA,EAAMA,EAAK/U,OAASuV,EAChCA,EAAKP,MAAQA,EAAOA,EAAMhV,OAASuV,EAC5BA,GAGF8G,EAAAyC,qBAAP,SACEL,EACAM,EACAvB,EACAzd,GAEA,IAAIwV,EAAO,IAAIyJ,EAKf,OAJAzJ,EAAKxV,MAAQA,EACbwV,EAAKkJ,WAAaA,EAAYA,EAAWze,OAASuV,EAClDA,EAAKjE,cAAgByN,EAAcA,GAAUtC,GAAUsC,EAAUxJ,GACjEA,EAAK5N,UAAY6V,EAAMf,GAAUe,EAAMjI,GAChCA,GAGF8G,EAAA4C,sBAAP,SACE5f,GAEA,IAAIkW,EAAO,IAAI2J,EAGf,OAFA3J,EAAKxV,MAAQV,EAAYU,MACzBwV,EAAKlW,YAAcA,EACZkW,GAGF8G,EAAA8C,sBAAP,SACEC,EACArf,GAEA,IAAIwV,EAAO,IAAI8J,EAGf,OAFA9J,EAAKxV,MAAQA,EACbwV,EAAK6J,YAAcA,EAAa3C,GAAU2C,EAAa7J,GAChDA,GAGF8G,EAAAiD,4BAAP,SACEvf,GAEA,IAAIwV,EAAO,IAAIgK,EAEf,OADAhK,EAAKxV,MAAQA,EACNwV,GAGF8G,EAAAmD,8BAAP,SACEf,EACAnf,EACAS,GAEA,IAAIwV,EAAO,IAAIkK,EAIf,OAHAlK,EAAKxV,MAAQA,EACbwV,EAAKkJ,WAAaA,EAAYA,EAAWze,OAASuV,EAClDA,EAAKmK,kBAAoBpgB,EAASA,EAAQU,OAASuV,EAC5CA,GAGF8G,EAAAsD,sBAAP,SACE5f,GAEA,IAAIwV,EAAO,IAAIqK,EAEf,OADArK,EAAKxV,MAAQA,EACNwV,GAGF8G,EAAAwD,6BAAP,SACEjrB,EACAmL,GAEA,IAAIwV,EAAO,IAAIuK,EAGf,OAFAvK,EAAKxV,MAAQA,EACbwV,EAAK3gB,MAAQA,EACN2gB,GAGF8G,EAAA0D,yBAAP,SACE1gB,GAEA,IAAIkW,EAAO,IAAIyK,EAIf,OAHAzK,EAAK3J,MAAQvM,EAAYuM,MAAQhW,EAAA6M,YAAYwd,MAC7C1K,EAAKxV,MAAQV,EAAYU,MACzBwV,EAAKlW,YAAcA,EACZkW,GAGF8G,EAAA6D,2BAAP,SACEzB,EACA0B,EACApgB,GAEA,IAAIwV,EAAO,IAAI6K,EAIf,OAHA7K,EAAKxV,MAAQA,EACbwV,EAAKkJ,WAAaA,EAAYA,EAAWze,OAASuV,EAClDA,EAAK4K,OAASA,EAAQA,EAAOngB,OAASuV,EAC/BA,GAGF8G,EAAAgE,+BAAP,SACEzrB,EACAmL,GAEA,IAAIwV,EAAO,IAAI+K,EAGf,OAFA/K,EAAKxV,MAAQA,EACbwV,EAAK3gB,MAAQA,EACN2gB,GAGF8G,EAAAkE,oBAAP,SACE9B,EACAM,EACAvB,EACAzd,GAEA,IAAIwV,EAAO,IAAIiL,EAKf,OAJAjL,EAAKxV,MAAQA,EACbwV,EAAKkJ,WAAaA,EAAYA,EAAWze,OAASuV,EAClDA,EAAKjE,cAAgByN,EAAcA,GAAUtC,GAAUsC,EAAUxJ,GACjEA,EAAK5N,UAAY6V,EAAMf,GAAUe,EAAMjI,GAChCA,GAGF8G,EAAAoE,qBAAP,SACE1gB,GAEA,IAAIwV,EAAO,IAAImL,EAEf,OADAnL,EAAKxV,MAAQA,EACNwV,GAGF8G,EAAAsE,8BAAP,SACEC,EACAlX,EACA3J,GAEA,IAAIwV,EAAO,IAAIsL,EAIf,OAHAtL,EAAKxV,MAAQA,EACbwV,EAAKqL,MAAQA,EACbrL,EAAK7L,OAASA,EACP6L,GAGF8G,EAAAyE,8BAAP,SACErC,EACA1e,GAEA,IAAIwV,EAAO,IAAIwL,EAGf,OAFAxL,EAAKxV,MAAQA,EACbwV,EAAKkJ,WAAaA,EAAYA,EAAWze,OAASuV,EAC3CA,GAGF8G,EAAA2E,+BAAP,SACEvC,EACAnpB,EACAyK,GAEA,IAAIwV,EAAO,IAAI0L,EAIf,OAHA1L,EAAKxV,MAAQA,EACbwV,EAAKkJ,WAAaA,EAAYA,EAAWze,OAASuV,EAClDA,EAAKjgB,SAAWA,EAAUA,EAAS0K,OAASuV,EACrCA,GAGF8G,EAAA6E,8BAAP,SACEC,EACAvV,EACA7L,GAEA,IAAIwV,EAAO,IAAI6L,EAIf,OAHA7L,EAAKxV,MAAQA,EACbwV,EAAK4L,QAAUA,EACf5L,EAAK8L,aAAezV,EACb2J,GAGF8G,EAAAiF,wBAAP,SACEC,EACAC,EACAC,EACA1hB,GAEA,IAAIwV,EAAO,IAAImM,EAKf,OAJAnM,EAAKxV,MAAQA,EACbwV,EAAKgM,UAAYA,EAAWA,EAAUvhB,OAASuV,EAC/CA,EAAKiM,OAASA,EAAQA,EAAOxhB,OAASuV,EACtCA,EAAKkM,OAASA,EAAQA,EAAOzhB,OAASuV,EAC/BA,GAGF8G,EAAAsF,8BAAP,SACE/sB,EACAmL,GAEA,IAAIwV,EAAO,IAAIqM,EAGf,OAFArM,EAAKxV,MAAQA,EACbwV,EAAK3gB,MAAQA,EACN2gB,GAGF8G,EAAAwF,sBAAP,SACE9hB,GAEA,IAAIwV,EAAO,IAAIuM,EAEf,OADAvM,EAAKxV,MAAQA,EACNwV,GAGF8G,EAAA0F,qBAAP,SACEhiB,GAEA,IAAIwV,EAAO,IAAIyM,EAEf,OADAzM,EAAKxV,MAAQA,EACNwV,GAGF8G,EAAA4F,qBAAP,SACEliB,GAEA,IAAIwV,EAAO,IAAI2M,EAEf,OADA3M,EAAKxV,MAAQA,EACNwV,GAGF8G,EAAA8F,6BAAP,SACEvD,EACApJ,EACAzV,GAEA,IAAIwV,EAAO,IAAI6M,EAIf,OAHA7M,EAAKxV,MAAQA,EACbwV,EAAKqJ,SAAWA,EAChBrJ,EAAKC,QAAUA,EAASA,EAAQxV,OAASuV,EAClCA,GAGF8G,EAAAgG,4BAAP,SACEzD,EACApJ,EACAzV,GAEA,IAAIwV,EAAO,IAAI+M,EAIf,OAHA/M,EAAKxV,MAAQA,EACbwV,EAAKqJ,SAAWA,EAChBrJ,EAAKC,QAAUA,EAASA,EAAQxV,OAASuV,EAClCA,GAKF8G,EAAAkG,qBAAP,SACE1kB,EACAkC,GAEA,IAAI0d,EAAO,IAAI+E,GAGf,OAFA/E,EAAK1d,MAAQA,EACb0d,EAAK5f,WAAaA,EAAY4e,GAAU5e,EAAY4f,GAC7CA,GAGFpB,EAAAoG,qBAAP,SACEC,EACA3iB,GAEA,IAAI0d,EAAO,IAAIkF,GAGf,OAFAlF,EAAK1d,MAAQA,EACb0d,EAAKiF,MAAQA,EAAWA,IAAOA,EAAM1iB,OAASyd,GACvCA,GAGFpB,EAAAuG,uBAAP,SACE9c,EACAwF,EACAlK,EACAgE,EACAtC,EACAe,EACA+H,EACA7L,GAEA,IAAI0d,EAAO,IAAIoF,GASf,OARApF,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAKvpB,KAAO4R,EAAYA,EAAW9F,OAASyd,EAC5CA,EAAKnS,eAAiBA,EAAgBmR,GAAUnR,EAAgBmS,GAChEA,EAAKrc,YAAcA,EAAiBA,IAAaA,EAAYpB,OAASyd,GACtEA,EAAKrY,gBAAkBA,EAAqBA,GAAiBqX,GAAUrX,EAAiBqY,GACxFA,EAAK3a,QAAUA,EAAS2Z,GAAU3Z,EAAS2a,GAC3CA,EAAK5Z,WAAaA,EAAgBA,GAAY4Y,GAAU5Y,EAAY4Z,GAC7DA,GAGFpB,EAAAyG,wBAAP,SACEJ,EACA3iB,GAEA,IAAI0d,EAAO,IAAIsF,GAGf,OAFAtF,EAAK1d,MAAQA,EACb0d,EAAKiF,MAAQA,EAAWA,IAAOA,EAAM1iB,OAASyd,GACvCA,GAGFpB,EAAA2G,kBAAP,SACEjlB,EACAwjB,EACAxhB,GAEA,IAAI0d,EAAO,IAAIwF,GAIf,OAHAxF,EAAK1d,MAAQA,EACb0d,EAAK1f,UAAYA,EAAWA,EAAUiC,OAASyd,EAC/CA,EAAK8D,UAAYA,EAAWA,EAAUvhB,OAASyd,EACxCA,GAGFpB,EAAA6G,qBAAP,SACEnjB,GAEA,IAAI0d,EAAO,IAAI0F,GAEf,OADA1F,EAAK1d,MAAQA,EACN0d,GAGFpB,EAAA+G,sBAAP,SACElvB,EACA4O,EACAe,EACA+H,EACA7L,GAEA,IAAI0d,EAAO,IAAI4F,GAMf,OALA5F,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAK/T,OAAS5G,EAAS2Z,GAAU3Z,EAAS2a,GAC1CA,EAAK5Z,WAAaA,EAAgBA,GAAY4Y,GAAU5Y,EAAY4Z,GAC7DA,GAGFpB,EAAAiH,2BAAP,SACEpvB,EACAU,EACAgX,EACA7L,GAEA,IAAI0d,EAAO,IAAI8F,GAKf,OAJA9F,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAK7oB,MAAQA,EAAWA,IAAOA,EAAMoL,OAASyd,GACvCA,GAGFpB,EAAAmH,sBAAP,SACE1gB,EACA7C,EACA2L,EACA7L,GAEA,IAAI0d,EAAO,IAAIgG,GAKf,GAJAhG,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAK3a,QAAUA,EAAaA,GAAS2Z,GAAU3Z,EAAS2a,GACxDA,EAAKxd,KAAOA,EACRA,EAAM,CACR,IAAI/E,EAAiBugB,EAAAiI,cAAczjB,EAAKrL,OACpCqL,EAAKrL,MAAM+uB,WAAW,KACxBlG,EAAKviB,eAAiBugB,EAAAmI,YACpB1oB,EACA6E,EAAM3E,OAAOF,gBAGfuiB,EAAKviB,eAAiBA,EAExBuiB,EAAK1T,aAAe8Z,GAAmBpG,EAAKviB,qBAE5CuiB,EAAKviB,eAAiB,KACtBuiB,EAAK1T,aAAe,KAEtB,OAAO0T,GAGFpB,EAAAyH,4BAAP,SACE5vB,EACAsL,EACAO,GAEA,IAAI0d,EAAO,IAAIsG,GAIf,OAHAtG,EAAK1d,MAAQA,EACb0d,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAKje,aAAeA,EAAcA,EAAaQ,OAASyd,EACjDA,GAGFpB,EAAA2H,mBAAP,SACE9vB,EACAsL,EACAO,GAEA,IAAI8c,EAAO,IAAIoH,GASf,OARApH,EAAK9c,MAAQA,EACb8c,EAAK3oB,KAAOA,EAAMA,EAAK8L,OAAS6c,EAC3Brd,EAGHA,EAAaQ,OAAS6c,EAFtBrd,EAAetL,EAIjB2oB,EAAKrd,aAAeA,EACbqd,GAGFR,EAAA6H,0BAAP,SACEzF,GAEA,IAAIhB,EAAO,IAAI0G,GAGf,OAFA1G,EAAK1d,MAAQ0e,EAAW1e,MACxB0d,EAAKgB,WAAaA,EAAYA,EAAWze,OAASyd,EAC3CA,GAGFpB,EAAA+H,kBAAP,SACE7C,EACA8C,EACAC,EACAvkB,GAEA,IAAI0d,EAAO,IAAI8G,GAKf,OAJA9G,EAAK1d,MAAQA,EACb0d,EAAK8D,UAAYA,EAAWA,EAAUvhB,OAASyd,EAC/CA,EAAK4G,OAASA,EAAQA,EAAOrkB,OAASyd,EACtCA,EAAK6G,QAAUA,EAAaA,IAASA,EAAQtkB,OAASyd,GAC/CA,GAGFpB,EAAAmI,sBAAP,SACEC,EACAxkB,EACAF,GAEA,IAAI0d,EAAO,IAAIiH,GACfjH,EAAK1d,MAAQA,EACb0d,EAAK9S,aAAe8Z,EAAWA,GAAOhI,GAAUgI,EAAOhH,GACvDA,EAAK5S,cAAgB,KACrB4S,EAAKxd,KAAOA,EACZ,IAAI/E,EAAiBugB,EAAAiI,cAAczjB,EAAKrL,OAaxC,OAZIqL,EAAKrL,MAAM+uB,WAAW,KACxBlG,EAAKviB,eAAiBugB,EAAAmI,YACpB1oB,EACA6E,EAAM3E,OAAOF,iBAGVA,EAAeyoB,WAAW/tB,EAAA4F,kBAC7BN,EAAiBtF,EAAA4F,eAAiBN,GAEpCuiB,EAAKviB,eAAiBA,GAExBuiB,EAAK1T,aAAe8Z,GAAmBpG,EAAKviB,gBACrCuiB,GAGFpB,EAAAsI,kCAAP,SACE7e,EACA7F,EACAF,GAEA,IAAI0d,EAAO,IAAIiH,GAUf,OATAjH,EAAK1d,MAAQA,EACb0d,EAAK9S,aAAe,KACpB8S,EAAK5S,cAAgB/E,EACrB2X,EAAKxd,KAAOA,EACZwd,EAAKviB,eAAiBugB,EAAAmI,YACpBnI,EAAAiI,cAAczjB,EAAKrL,OACnBmL,EAAM3E,OAAOF,gBAEfuiB,EAAK1T,aAAe8Z,GAAmBpG,EAAKviB,gBACrCuiB,GAGFpB,EAAAuI,wBAAP,SACEplB,EACAtL,EACA6L,GAEA,IAAI8c,EAAO,IAAIgI,GASf,OARAhI,EAAK9c,MAAQA,EACb8c,EAAKrd,aAAeA,EAAcA,EAAaQ,OAAS6c,EACnD3oB,EAGHA,EAAK8L,OAAS6c,EAFd3oB,EAAOsL,EAITqd,EAAK3oB,KAAOA,EACL2oB,GAGFR,EAAAyI,2BAAP,SACE5wB,EACAoX,EACAlK,EACA0B,EACAe,EACA+H,EACA7L,GAEA,IAAI0d,EAAO,IAAIsH,GAQf,OAPAtH,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAKnS,eAAiBA,EAAoBA,GAAgBmR,GAAUnR,EAAgBmS,GACpFA,EAAKrc,YAAcA,EAAiBA,IAAaA,EAAYpB,OAASyd,GACtEA,EAAK3a,QAAUA,EAAS2Z,GAAU3Z,EAAS2a,GAC3CA,EAAK5Z,WAAaA,EAAgBA,GAAY4Y,GAAU5Y,EAAY4Z,GAC7DA,GAGFpB,EAAA2I,uBAAP,SACE9wB,EACAmO,EACA0K,EACAlJ,EACA+H,EACA7L,GAEA,IAAI0d,EAAO,IAAIwH,GAOf,OANAxH,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAKpb,KAAOA,EAAUA,IAAMA,EAAKrC,OAASyd,GAC1CA,EAAK1Q,YAAcA,EAAiBA,IAAaA,EAAY/M,OAASyd,GACtEA,EAAK5Z,WAAaA,EAAgBA,GAAY4Y,GAAU5Y,EAAY4Z,GAC7DA,GAGFpB,EAAA6I,mBAAP,SACEnY,EACAwU,EACA4D,EACApnB,EACAgC,GAEA,IAAI0d,EAAO,IAAI2H,GAMf,OALA3H,EAAK1d,MAAQA,EACb0d,EAAK1Q,YAAcA,EAAiBA,IAAaA,EAAY/M,OAASyd,GACtEA,EAAK8D,UAAYA,EAAeA,IAAWA,EAAUvhB,OAASyd,GAC9DA,EAAK0H,YAAcA,EAAiBA,IAAaA,EAAYnlB,OAASyd,GACtEA,EAAK1f,UAAYA,EAAWA,EAAUiC,OAASyd,EACxCA,GAGFpB,EAAAgJ,0BAAP,SACEnxB,EACAoX,EACAvI,EACAuiB,EACAzhB,EACA+H,EACA7L,GAEA,IAAI0d,EAAO,IAAI8H,GAQf,OAPA9H,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAKnS,eAAiBA,EAAoBA,GAAgBmR,GAAUnR,EAAgBmS,GACpFA,EAAK1a,UAAYA,EAAWA,EAAU/C,OAASyd,EAC/CA,EAAK6H,KAAOA,EAAUA,IAAMA,EAAKtlB,OAASyd,GAC1CA,EAAK5Z,WAAaA,EAAgBA,GAAY4Y,GAAU5Y,EAAY4Z,GAC7DA,GAGFpB,EAAAmJ,wBAAP,SACEtxB,EACAoX,EACAvI,EACAuiB,EACAzhB,EACA+H,EACA7L,GAEA,IAAI0d,EAAO,IAAIgI,GAQf,OAPAhI,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAKnS,eAAiBA,EAAoBA,GAAgBmR,GAAUnR,EAAgBmS,GACpFA,EAAK1a,UAAYA,EAAWA,EAAU/C,OAASyd,EAC/CA,EAAK6H,KAAOA,EAAUA,IAAMA,EAAKtlB,OAASyd,GAC1CA,EAAK5Z,WAAaA,EAAgBA,GAAY4Y,GAAU5Y,EAAY4Z,GAC7DA,GAGFpB,EAAAqJ,2BAAP,SACExxB,EACA4O,EACAe,EACA+H,EACA7L,GAEA,IAAI0d,EAAO,IAAIkI,GAMf,OALAlI,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAK3a,QAAUA,EAAS2Z,GAAU3Z,EAAS2a,GAC3CA,EAAK5Z,WAAaA,EAAgBA,GAAY4Y,GAAU5Y,EAAY4Z,GAC7DA,GAGFpB,EAAAuJ,sBAAP,SACEhxB,EACAmL,GAEA,IAAI0d,EAAO,IAAIoI,GAGf,OAFApI,EAAK1d,MAAQA,EACb0d,EAAK7oB,MAAQA,EAAWA,IAAOA,EAAMoL,OAASyd,GACvCA,GAGFpB,EAAAyJ,sBAAP,SACEvE,EACAwE,EACAhmB,GAEA,IAAI0d,EAAO,IAAIuI,GAIf,OAHAvI,EAAK1d,MAAQA,EACb0d,EAAK8D,UAAYA,EAAWA,EAAUvhB,OAASyd,EAC/CA,EAAKsI,MAAQA,EAAOtJ,GAAUsJ,EAAOtI,GAC9BA,GAGFpB,EAAA4J,iBAAP,SACEvD,EACA7kB,EACAkC,GAEA,IAAI8c,EAAO,IAAIqJ,GAIf,OAHArJ,EAAK9c,MAAQA,EACb8c,EAAK6F,MAAQA,EAAWA,IAAOA,EAAM1iB,OAAS6c,GAC9CA,EAAKhf,WAAaA,EAAY4e,GAAU5e,EAAYgf,GAC7CA,GAGFR,EAAA8J,qBAAP,SACEvxB,EACAmL,GAEA,IAAI0d,EAAO,IAAI2I,GAGf,OAFA3I,EAAK1d,MAAQA,EACb0d,EAAK7oB,MAAQA,EAAOA,EAAMoL,OAASyd,EAC5BA,GAGFpB,EAAAgK,mBAAP,SACExoB,EACAyoB,EACAC,EACAC,EACAzmB,GAEA,IAAI0d,EAAO,IAAIgJ,GASf,OARAhJ,EAAK1d,MAAQA,EACb0d,EAAK5f,WAAaA,EAAY4e,GAAU5e,EAAY4f,GACpDA,EAAK6I,cAAgBA,EACjBA,IAAeA,EAActmB,OAASyd,GAC1CA,EAAK8I,gBAAkBA,EACnBA,GAAiB9J,GAAU8J,EAAiB9I,GAChDA,EAAK+I,kBAAoBA,EACrBA,GAAmB/J,GAAU+J,EAAmB/I,GAC7CA,GAGFpB,EAAAqK,sBAAP,SACExyB,EACAoX,EACAxJ,EACA+B,EACA+H,EACA7L,GAEA,IAAI0d,EAAO,IAAIkJ,GAOf,OANAlJ,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAKvpB,KAAOA,EAAMA,EAAK8L,OAASyd,EAChCA,EAAKnS,eAAiBA,EAAoBA,GAAgBmR,GAAUnR,EAAgBmS,GACpFA,EAAKpb,KAAOP,EAAOA,EAAM9B,OAASyd,EAClCA,EAAK5Z,WAAaA,EAAgBA,GAAY4Y,GAAU5Y,EAAY4Z,GAC7DA,GAGFpB,EAAAuK,wBAAP,SACEjc,EACA9G,EACA+H,EACA7L,GAEA,IAAI0d,EAAO,IAAIoJ,GAKf,OAJApJ,EAAK1d,MAAQA,EACb0d,EAAK7R,MAAQA,EACb6R,EAAK9S,aAAeA,EAAc8R,GAAU9R,EAAc8S,GAC1DA,EAAK5Z,WAAaA,EAAgBA,GAAY4Y,GAAU5Y,EAAY4Z,GAC7DA,GAGFpB,EAAAyK,0BAAP,SACE5yB,EACAmO,EACA0K,EACAlJ,EACA+H,EACA7L,GAEA,IAAI8c,EAAO,IAAIkK,GAOf,OANAlK,EAAK9c,MAAQA,EACb8c,EAAKjR,MAAQA,EACbiR,EAAK3oB,KAAOA,EAAMA,EAAK8L,OAAS6c,EAChCA,EAAKxa,KAAOA,EAAUA,IAAMA,EAAKrC,OAAS6c,GAC1CA,EAAK9P,YAAcA,EAAiBA,IAAaA,EAAY/M,OAAS6c,GACtEA,EAAKhZ,WAAaA,EACXgZ,GAGFR,EAAA2K,oBAAP,SACEvI,EACA1e,GAEA,IAAI0d,EAAO,IAAIwJ,GAGf,OAFAxJ,EAAK1d,MAAQA,EACb0d,EAAKgB,WAAaA,EACXhB,GAGFpB,EAAA6K,qBAAP,SACE3F,EACAxjB,EACAgC,GAEA,IAAI0d,EAAO,IAAI0J,GAIf,OAHA1J,EAAK1d,MAAQA,EACb0d,EAAK8D,UAAYA,EAAWA,EAAUvhB,OAASyd,EAC/CA,EAAK1f,UAAYA,EAAWA,EAAUiC,OAASyd,EACxCA,GAEXpB,EA54BA,GAAsBrpB,EAAAqpB,OAg5BtB,IAAA+K,EAAA,SAAA/tB,GAAA,SAAA+tB,mDAKA,OAL6CtsB,EAAAssB,EAAA/tB,GAK7C+tB,EALA,CAA6C/K,GAAvBrpB,EAAAo0B,iBAQtB,IAAA5K,EAAA,SAAAnjB,GAAA,SAAAmjB,IAAA,IAAAjjB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASqpB,OAMlB,OAP8BxsB,EAAA0hB,EAAAnjB,GAO9BmjB,EAPA,CAA8B4K,GAAjBp0B,EAAAwpB,WAUb,IAAAM,EAAA,SAAAzjB,GAAA,SAAAyjB,IAAA,IAAAvjB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASspB,gBAMlB,OAPuCzsB,EAAAgiB,EAAAzjB,GAOvCyjB,EAPA,CAAuCT,GAA1BrpB,EAAA8pB,oBAUb,SAAY0K,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYx0B,EAAAw0B,gBAAAx0B,EAAAw0B,mBAUZ,IAAAxK,EAAA,SAAA3jB,GAAA,SAAA2jB,IAAA,IAAAzjB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASwpB,UAWhBluB,EAAAmuB,yBAAoD,OACtD,OAbmC5sB,EAAAkiB,EAAA3jB,GAanC2jB,EAbA,CAAmCX,GAAtBrpB,EAAAgqB,gBAgBb,IAcYrmB,EAdZ2mB,EAAA,SAAAjkB,GAAA,SAAAikB,IAAA,IAAA/jB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS0pB,YAQlB,OATmC7sB,EAAAwiB,EAAAjkB,GASnCikB,EATA,CAAmC8J,GAiCnC,SAAgBjjB,EAAoBjQ,GAElC,GAAIA,EAAK8J,MAAQC,EAAS8d,WAAY,CACpC,IAAI6L,EAAiC1zB,EAAMgM,KAE3C,OADAzJ,OAAOmxB,EAAQlxB,QACPkxB,EAAQ9wB,WAAW,IACzB,QACE,GAAe,UAAX8wB,EAAqB,OAAOjxB,EAAckxB,OAC9C,MAEF,QACE,GAAe,WAAXD,EAAsB,OAAOjxB,EAAcyN,QAC/C,MAEF,SACE,GAAe,YAAXwjB,EAAuB,OAAOjxB,EAAcmxB,SAElD,SACE,GAAe,YAAXF,EAAuB,OAAOjxB,EAAc+T,SAChD,MAEF,SACE,GAAe,UAAXkd,EAAqB,OAAOjxB,EAAciO,OAC9C,MAEF,SACE,GAAe,UAAXgjB,EAAqB,OAAOjxB,EAAckQ,OAC9C,GAAe,UAAX+gB,EAAqB,OAAOjxB,EAAcoxB,OAC9C,MAEF,SACE,GAAe,YAAXH,EAAuB,OAAOjxB,EAAcC,SAChD,MAEF,SACE,GAAe,aAAXgxB,EAAwB,OAAOjxB,EAAcqxB,UACjD,MAEF,SACE,GAAe,UAAXJ,EAAqB,OAAOjxB,EAAcuO,OAC9C,MAEF,SACE,GAAe,aAAX0iB,EAAwB,OAAOjxB,EAAcwO,gBAIhD,GACLjR,EAAK8J,MAAQC,EAASie,gBACKhoB,EAAMuqB,WAAWzgB,MAAQC,EAAS8d,WAC7D,CACI6L,EAA4D1zB,EAAMuqB,WAAYve,KAClFzJ,OAAOmxB,EAAQlxB,QACf,IAAIuxB,EAAqC/zB,EAAMoB,SAAS4K,KAGxD,GAFAzJ,OAAOwxB,EAAQvxB,QAEA,YAAXkxB,EACF,OAAQK,EAAQnxB,WAAW,IACzB,QACE,GAAe,UAAXmxB,EAAqB,OAAOtxB,EAAcE,gBAC9C,MAEF,SACE,OAAQoxB,GACN,IAAK,SAAU,OAAOtxB,EAAc0B,gBACpC,IAAK,UAAW,OAAO1B,EAAciC,mBAO/C,OAAOjC,EAAcuxB,OAzGVl1B,EAAAsqB,gBAcb,SAAY3mB,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,sBAfF,CAAYA,EAAA3D,EAAA2D,gBAAA3D,EAAA2D,mBAmBZ3D,EAAAmR,sBA4EA,IAAAuZ,EAAA,SAAArkB,GAAA,SAAAqkB,IAAA,IAAAnkB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASkqB,YAQlB,OATmCrtB,EAAA4iB,EAAArkB,GASnCqkB,EATA,CAAmCrB,GAAtBrpB,EAAA0qB,gBAYb,SAAY0K,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAYp1B,EAAAo1B,cAAAp1B,EAAAo1B,iBAUZ,IAAAvK,EAAA,SAAAxkB,GAAA,SAAAwkB,IAAA,IAAAtkB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASoqB,UAMlB,OAPiCvtB,EAAA+iB,EAAAxkB,GAOjCwkB,EAPA,CAAiCxB,GAApBrpB,EAAA6qB,cAYb,IAAAyK,EAAA,SAAAjvB,GAAA,SAAAivB,mDAAgD,OAAPxtB,EAAAwtB,EAAAjvB,GAAOivB,EAAhD,CAAyCjM,GAAnBrpB,EAAAs1B,aAGtB,IAQYvgB,EARZgW,EAAA,SAAA1kB,GAAA,SAAA0kB,IAAA,IAAAxkB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS8d,aAIlB,OAL0CjhB,EAAAijB,EAAA1kB,GAK1C0kB,EALA,CAA0CuK,GAA7Bt1B,EAAA+qB,uBAQb,SAAYhW,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA/U,EAAA+U,cAAA/U,EAAA+U,iBAUZ,IAAAwgB,EAAA,SAAAlvB,GAAA,SAAAkvB,IAAA,IAAAhvB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS4J,UAIlB,OALgD/M,EAAAytB,EAAAlvB,GAKhDkvB,EALA,CAAgDD,GAA1Bt1B,EAAAu1B,oBAQtB,IAAApK,EAAA,SAAA9kB,GAAA,SAAA8kB,IAAA,IAAA5kB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAuO,YAAcC,EAAYygB,QAI5B,OAL4C1tB,EAAAqjB,EAAA9kB,GAK5C8kB,EALA,CAA4CoK,GAA/Bv1B,EAAAmrB,yBAQb,SAAYsK,GACVA,IAAA,mBACAA,IAAA,WAFF,CAAYz1B,EAAAy1B,gBAAAz1B,EAAAy1B,mBAMZ,IAAA/J,EAAA,SAAArlB,GAAA,SAAAqlB,IAAA,IAAAnlB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASyqB,YAQlB,OATyC5tB,EAAA4jB,EAAArlB,GASzCqlB,EATA,CAAyC4J,GAA5Bt1B,EAAA0rB,sBAYb,IAAAG,EAAA,SAAAxlB,GAAA,SAAAwlB,IAAA,IAAAtlB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS0qB,SAQlB,OATsC7tB,EAAA+jB,EAAAxlB,GAStCwlB,EATA,CAAsCyJ,GAAzBt1B,EAAA6rB,mBAYb,IAAAG,EAAA,SAAA3lB,GAAA,SAAA2lB,IAAA,IAAAzlB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS+d,OAQlB,OAToClhB,EAAAkkB,EAAA3lB,GASpC2lB,EATA,CAAoCsJ,GAAvBt1B,EAAAgsB,iBAYb,IAAAE,EAAA,SAAA7lB,GAAA,SAAA6lB,IAAA,IAAA3lB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASyQ,QAIlB,OALqC5T,EAAAokB,EAAA7lB,GAKrC6lB,EALA,CAAqCoJ,GAAxBt1B,EAAAksB,kBAQb,IAAAG,EAAA,SAAAhmB,GAAA,SAAAgmB,IAAA,IAAA9lB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS2qB,QAIlB,OALqC9tB,EAAAukB,EAAAhmB,GAKrCgmB,EALA,CAAqCiJ,GAAxBt1B,EAAAqsB,kBAQb,IAAAE,EAAA,SAAAlmB,GAAA,SAAAkmB,IAAA,IAAAhmB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASoJ,YAChB9N,EAAA2G,KAAO,gBACT,OAH2CpF,EAAAykB,EAAAlmB,GAG3CkmB,EAHA,CAA2CxB,GAA9B/qB,EAAAusB,wBAMb,IAAAE,EAAA,SAAApmB,GAAA,SAAAomB,IAAA,IAAAlmB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASge,gBAMlB,OAP6CnhB,EAAA2kB,EAAApmB,GAO7ComB,EAPA,CAA6C6I,GAAhCt1B,EAAAysB,0BAUb,IAAAK,EAAA,SAAAzmB,GAAA,SAAAymB,IAAA,IAAAvmB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAuO,YAAcC,EAAY8gB,QAI5B,OAL4C/tB,EAAAglB,EAAAzmB,GAK5CymB,EALA,CAA4CyI,GAA/Bv1B,EAAA8sB,yBAQb,IAAAE,EAAA,SAAA3mB,GAAA,SAAA2mB,IAAA,IAAAzmB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASuP,WAIlB,OALwC1S,EAAAklB,EAAA3mB,GAKxC2mB,EALA,CAAwCsI,GAA3Bt1B,EAAAgtB,qBAQb,IAAAI,EAAA,SAAA/mB,GAAA,SAAA+mB,IAAA,IAAA7mB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS6qB,aAMlB,OAP0ChuB,EAAAslB,EAAA/mB,GAO1C+mB,EAPA,CAA0CkI,GAA7Bt1B,EAAAotB,uBAUb,IAAAE,EAAA,SAAAjnB,GAAA,SAAAinB,IAAA,IAAA/mB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAuO,YAAcC,EAAYghB,UAI5B,OAL8CjuB,EAAAwlB,EAAAjnB,GAK9CinB,EALA,CAA8CiI,GAAjCv1B,EAAAstB,2BAQb,IAAAE,EAAA,SAAAnnB,GAAA,SAAAmnB,IAAA,IAAAjnB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS+qB,MAClB,OAFmCluB,EAAA0lB,EAAAnnB,GAEnCmnB,EAFA,CAAmCxB,GAAtBhsB,EAAAwtB,gBAKb,IAAAE,EAAA,SAAArnB,GAAA,SAAAqnB,IAAA,IAAAnnB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS0d,KAChBpiB,EAAA2G,KAAO,SACT,OAHoCpF,EAAA4lB,EAAArnB,GAGpCqnB,EAHA,CAAoC3C,GAAvB/qB,EAAA0tB,iBAMb,IAAAG,EAAA,SAAAxnB,GAAA,SAAAwnB,IAAA,IAAAtnB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAuO,YAAcC,EAAYkhB,SAM5B,OAP6CnuB,EAAA+lB,EAAAxnB,GAO7CwnB,EAPA,CAA6C0H,GAAhCv1B,EAAA6tB,0BAUb,IAAAE,EAAA,SAAA1nB,GAAA,SAAA0nB,IAAA,IAAAxnB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASke,gBAIlB,OAL6CrhB,EAAAimB,EAAA1nB,GAK7C0nB,EALA,CAA6CuH,GAAhCt1B,EAAA+tB,0BAQb,IAAAE,EAAA,SAAA5nB,GAAA,SAAA4nB,IAAA,IAAA1nB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASie,iBAMlB,OAP8CphB,EAAAmmB,EAAA5nB,GAO9C4nB,EAPA,CAA8CqH,GAAjCt1B,EAAAiuB,2BAUb,IAAAG,EAAA,SAAA/nB,GAAA,SAAA+nB,IAAA,IAAA7nB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAuO,YAAcC,EAAYmhB,SAM5B,OAP6CpuB,EAAAsmB,EAAA/nB,GAO7C+nB,EAPA,CAA6CmH,GAAhCv1B,EAAAouB,0BAUb,IAAAM,EAAA,SAAAroB,GAAA,SAAAqoB,IAAA,IAAAnoB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASkrB,UAQlB,OATuCruB,EAAA4mB,EAAAroB,GASvCqoB,EATA,CAAuC4G,GAA1Bt1B,EAAA0uB,oBAYb,IAAAE,EAAA,SAAAvoB,GAAA,SAAAuoB,IAAA,IAAAroB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAuO,YAAcC,EAAYC,SAI5B,OAL6ClN,EAAA8mB,EAAAvoB,GAK7CuoB,EALA,CAA6C2G,GAAhCv1B,EAAA4uB,0BAQb,IAAAE,EAAA,SAAAzoB,GAAA,SAAAyoB,IAAA,IAAAvoB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASmrB,MAChB7vB,EAAA2G,KAAO,UAOT,OATqCpF,EAAAgnB,EAAAzoB,GASrCyoB,EATA,CAAqC/D,GAAxB/qB,EAAA8uB,kBAYb,IAAAE,EAAA,SAAA3oB,GAAA,SAAA2oB,IAAA,IAAAzoB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASorB,KAChB9vB,EAAA2G,KAAO,SACT,OAHoCpF,EAAAknB,EAAA3oB,GAGpC2oB,EAHA,CAAoCjE,GAAvB/qB,EAAAgvB,iBAMb,IAAAE,EAAA,SAAA7oB,GAAA,SAAA6oB,IAAA,IAAA3oB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS2d,KAChBriB,EAAA2G,KAAO,SACT,OAHoCpF,EAAAonB,EAAA7oB,GAGpC6oB,EAHA,CAAoCnE,GAAvB/qB,EAAAkvB,iBAMb,IAAAtC,EAAA,SAAAvmB,GAAA,SAAAumB,IAAA,IAAArmB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS4d,MAChBtiB,EAAA2G,KAAO,UACT,OAHqCpF,EAAA8kB,EAAAvmB,GAGrCumB,EAHA,CAAqC7B,GAAxB/qB,EAAA4sB,kBAMb,IAAA0J,EAAA,SAAAjwB,GAAA,SAAAiwB,mDAMA,OAN8CxuB,EAAAwuB,EAAAjwB,GAM9CiwB,EANA,CAA8ChB,GAAxBt1B,EAAAs2B,kBAStB,IAAAlH,EAAA,SAAA/oB,GAAA,SAAA+oB,IAAA,IAAA7oB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASsrB,eAClB,OAF4CzuB,EAAAsnB,EAAA/oB,GAE5C+oB,EAFA,CAA4CkH,GAA/Bt2B,EAAAovB,yBAKb,IAAAE,EAAA,SAAAjpB,GAAA,SAAAipB,IAAA,IAAA/oB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASurB,cAClB,OAF2C1uB,EAAAwnB,EAAAjpB,GAE3CipB,EAFA,CAA2CgH,GAA9Bt2B,EAAAsvB,wBAMbtvB,EAAAy2B,gBAAA,SAAgC1rB,GAC9B,IAAIiC,EAASvJ,OAAOsH,EAAUiC,QAC9B,GAAIA,EAAOhC,MAAQC,EAASyrB,MAAO,CACjC,IAAI7rB,EAA8BmC,EAAQnC,WAC1C,GAAIA,EAAWA,EAAWnH,OAAS,KAAOqH,EACxC,OAAQtH,OAAOuJ,EAAOA,QAAQhC,MAC5B,KAAKC,EAASO,oBACd,KAAKP,EAASkI,kBAAmB,OAAO,GAI9C,OAAO,GAIT,IAGYwjB,EAHZC,EAAA,SAAAvwB,GAAA,SAAAuwB,mDAA+C,OAAP9uB,EAAA8uB,EAAAvwB,GAAOuwB,EAA/C,CAAwCvN,GAAlBrpB,EAAA42B,YAGtB,SAAYD,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAA32B,EAAA22B,aAAA32B,EAAA22B,gBAUZ,IAAAE,EAAA,SAAAxwB,GAwBE,SAAAwwB,EAAY3uB,EAAwBgF,EAAclC,GAAlD,IAAAzE,EACEF,EAAAvF,KAAAR,OAAOA,KAxBTiG,EAAAyE,KAAOC,EAAS4G,OAChBtL,EAAAyG,OAAS,KAeTzG,EAAAuwB,UAA8B,KAE9BvwB,EAAAmX,gBAAuB,EAEvBnX,EAAAwwB,YAAkC,KAKhCxwB,EAAKywB,WAAahsB,EAClBzE,EAAK2B,eAAiBA,EACtB,IAAI6O,EAAe8Z,GAAmBtqB,EAAK2B,gBAC3C3B,EAAKwQ,aAAeA,EACpB,IAAIkgB,EAAMlgB,EAAamgB,YAAYt0B,EAAAuU,uBACnC5Q,EAAK4wB,WAAaF,GAAO,EAAIlgB,EAAaiB,UAAUif,EAAM,GAAKlgB,EAC/DxQ,EAAKsE,WAAa,IAAIT,MACtB7D,EAAKwG,MAAQ,IAAIwb,EAAAhW,MAAMhM,EAAM,EAAG2G,EAAKxJ,QACrC6C,EAAK2G,KAAOA,IAOhB,OAzC4BpF,EAAA+uB,EAAAxwB,GAsC1BhF,OAAAC,eAAIu1B,EAAAt0B,UAAA,eAAJ,WAAsB,OAAOjC,KAAK02B,YAAcL,EAAWS,uCAE3D/1B,OAAAC,eAAIu1B,EAAAt0B,UAAA,iBAAJ,WAAwB,OAAOjC,KAAK02B,YAAcL,EAAWU,yCAC/DR,EAzCA,CAA4BxN,GAAfrpB,EAAA62B,SA4Cb,IAAAS,EAAA,SAAAjxB,GAAA,SAAAixB,IAAA,IAAA/wB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YAKEiG,EAAAsK,WAAqC,KAE3BtK,EAAAgxB,+BAAgD,KAChDhxB,EAAAixB,4BAA6C,OAwDzD,OAhEmD1vB,EAAAwvB,EAAAjxB,GAWjDhF,OAAAC,eAAIg2B,EAAA/0B,UAAA,gCAAJ,WAIE,OAHKjC,KAAKi3B,iCACRj3B,KAAKi3B,+BAAiCE,GAAmBn3B,MAAM,IAE1DA,KAAKi3B,gEAIdl2B,OAAAC,eAAIg2B,EAAA/0B,UAAA,6BAAJ,WAIE,OAHKjC,KAAKk3B,8BACRl3B,KAAKk3B,4BAA8BC,GAAmBn3B,MAAM,IAEvDA,KAAKk3B,6DAIdn2B,OAAAC,eAAIg2B,EAAA/0B,UAAA,kBAAJ,WACE,IAAIyK,EAAS1M,KAAK0M,OAClB,QAAKA,MAGDA,EAAOhC,MAAQC,EAASiB,YAAcc,EAASA,EAAOA,UAGnDA,EAAOhC,MAAQC,EAAS4G,yCAIjCxQ,OAAAC,eAAIg2B,EAAA/0B,UAAA,wBAAJ,WACE,IAAIyK,EAAS1M,KAAK0M,OAClB,SAAKA,GAAWA,EAAOhC,MAAQC,EAASiB,YAAcc,EAASA,EAAOA,WAGlEA,EAAOhC,MAAQC,EAASa,qBACnBxL,KAAK+P,GAAGzN,EAAA6M,YAAYnE,SAAkC0B,EAAQ0qB,iBAEnE1qB,EAAOhC,MAAQC,EAASC,iBACnB5K,KAAK+P,GAAGzN,EAAA6M,YAAYkE,SAA8B3G,EAAQ0qB,iBAE5D1qB,EAAOhC,MAAQC,EAAS4G,QAAUvR,KAAK+P,GAAGzN,EAAA6M,YAAYnE,0CAI/DgsB,EAAA/0B,UAAAo1B,oBAAA,SAAoB7pB,GAIlB,OACEA,EAAO5M,KAAKgM,MAAQY,EAAOtB,aAAaU,MACxC5M,KAAKyM,MAAM3E,QAAU0F,EAAOf,MAAM3E,SACjC9H,KAAKo3B,kBAGZJ,EAhEA,CAAmDV,GAA7B52B,EAAAs3B,uBAmEtB,IAAAM,EAAA,SAAAvxB,GAAA,SAAAuxB,mDAMA,OAN+D9vB,EAAA8vB,EAAAvxB,GAM/DuxB,EANA,CAA+DN,GAAzCt3B,EAAA43B,mCAStB,IAAApI,GAAA,SAAAnpB,GAAA,SAAAmpB,IAAA,IAAAjpB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASyrB,QAIlB,OALoC5uB,EAAA0nB,EAAAnpB,GAKpCmpB,EALA,CAAoCoH,GAAvB52B,EAAAwvB,kBAQb,IAAAG,GAAA,SAAAtpB,GAAA,SAAAspB,IAAA,IAAAppB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS4sB,QAIlB,OALoC/vB,EAAA6nB,EAAAtpB,GAKpCspB,EALA,CAAoCiH,GAAvB52B,EAAA2vB,kBAQb,IAAAE,GAAA,SAAAxpB,GAAA,SAAAwpB,IAAA,IAAAtpB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASC,mBAelB,OAhBsCpD,EAAA+nB,EAAAxpB,GAYpChF,OAAAC,eAAIuuB,EAAAttB,UAAA,iBAAJ,WACE,IAAI+V,EAAiBhY,KAAKgY,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe5U,OAAS,mCAE7DmsB,EAhBA,CAAsCyH,GAAzBt3B,EAAA6vB,oBAmBb,IAAAE,GAAA,SAAA1pB,GAAA,SAAA0pB,IAAA,IAAAxpB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS6sB,WAIlB,OALuChwB,EAAAioB,EAAA1pB,GAKvC0pB,EALA,CAAuC6G,GAA1B52B,EAAA+vB,qBAQb,IAAAE,GAAA,SAAA5pB,GAAA,SAAA4pB,IAAA,IAAA1pB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS8sB,KAMlB,OAPiCjwB,EAAAmoB,EAAA5pB,GAOjC4pB,EAPA,CAAiC2G,GAApB52B,EAAAiwB,eAUb,IAAAE,GAAA,SAAA9pB,GAAA,SAAA8pB,IAAA,IAAA5pB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS+sB,QAClB,OAFoClwB,EAAAqoB,EAAA9pB,GAEpC8pB,EAFA,CAAoCyG,GAAvB52B,EAAAmwB,kBAKb,IAAAE,GAAA,SAAAhqB,GAAA,SAAAgqB,IAAA,IAAA9pB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASG,kBAIlB,OALqCtD,EAAAuoB,EAAAhqB,GAKrCgqB,EALA,CAAqCiH,GAAxBt3B,EAAAqwB,mBAQb,IAAAE,GAAA,SAAAlqB,GAAA,SAAAkqB,IAAA,IAAAhqB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASgtB,uBAKlB,OAN0CnwB,EAAAyoB,EAAAlqB,GAM1CkqB,EANA,CAA0C+G,GAA7Bt3B,EAAAuwB,wBASb,IAAAQ,GAAA,SAAA1qB,GAAA,SAAA0qB,IAAA,IAAAxqB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASitB,eAMlB,OAP2CpwB,EAAAipB,EAAA1qB,GAO3C0qB,EAPA,CAA2C1H,GAA9BrpB,EAAA+wB,yBAUb,IAAAE,GAAA,SAAA5qB,GAAA,SAAA4qB,IAAA,IAAA1qB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASktB,eAMlB,OAPkCrwB,EAAAmpB,EAAA5qB,GAOlC4qB,EAPA,CAAkC5H,GAArBrpB,EAAAixB,gBAUb,IAAAR,GAAA,SAAApqB,GAAA,SAAAoqB,IAAA,IAAAlqB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASK,SAUlB,OAXqCxD,EAAA2oB,EAAApqB,GAWrCoqB,EAXA,CAAqCmG,GAAxB52B,EAAAywB,mBAcb,IAAAU,GAAA,SAAA9qB,GAAA,SAAA8qB,IAAA,IAAA5qB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASmtB,aAIlB,OALyCtwB,EAAAqpB,EAAA9qB,GAKzC8qB,EALA,CAAyCyF,GAA5B52B,EAAAmxB,uBAQb,IAAAc,GAAA,SAAA5rB,GAAA,SAAA4rB,IAAA,IAAA1rB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASgI,iBAGhB1M,EAAA8xB,gBAAuB,IACzB,OALsCvwB,EAAAmqB,EAAA5rB,GAKtC4rB,EALA,CAAsC2F,GAAzB53B,EAAAiyB,oBAQb,IAAAG,GAAA,SAAA/rB,GAAA,SAAA+rB,IAAA,IAAA7rB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASqtB,MAalB,OAdkCxwB,EAAAsqB,EAAA/rB,GAclC+rB,EAdA,CAAkCwE,GAArB52B,EAAAoyB,gBAiBb,IAAAG,GAAA,SAAAlsB,GAAA,SAAAksB,IAAA,IAAAhsB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASO,sBAalB,OAdyC1D,EAAAyqB,EAAAlsB,GAUvChF,OAAAC,eAAIixB,EAAAhwB,UAAA,iBAAJ,WACE,IAAI+V,EAAiBhY,KAAKgY,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe5U,OAAS,mCAE7D6uB,EAdA,CAAyC+E,GAA5Bt3B,EAAAuyB,uBAiBb,IAAAhB,GAAA,SAAAlrB,GAAA,SAAAkrB,IAAA,IAAAhrB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASstB,KAQlB,OATiCzwB,EAAAypB,EAAAlrB,GASjCkrB,EATA,CAAiCqF,GAApB52B,EAAAuxB,eAYb,IAAAM,GAAA,SAAAxrB,GAAA,SAAAwrB,IAAA,IAAAtrB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASutB,oBAIlB,OALuC1wB,EAAA+pB,EAAAxrB,GAKvCwrB,EALA,CAAuCyF,GAA1Bt3B,EAAA6xB,qBAQb,IAAAH,GAAA,SAAArrB,GAAA,SAAAqrB,IAAA,IAAAnrB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASS,SAYlB,OAbqC5D,EAAA4pB,EAAArrB,GAarCqrB,EAbA,CAAqCkF,GAAxB52B,EAAA0xB,mBAgBb,IAAAK,GAAA,SAAA1rB,GAAA,SAAA0rB,IAAA,IAAAxrB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASW,uBAClB,OAF0C9D,EAAAiqB,EAAA1rB,GAE1C0rB,EAFA,CAA0ClC,IAA7B7vB,EAAA+xB,wBAKb,IAAAU,GAAA,SAAApsB,GAAA,SAAAosB,IAAA,IAAAlsB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASkI,oBAClB,OAFuCrL,EAAA2qB,EAAApsB,GAEvCosB,EAFA,CAAuCF,IAA1BvyB,EAAAyyB,qBAKb,IAAAE,GAAA,SAAAtsB,GAAA,SAAAssB,IAAA,IAAApsB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASa,uBAIlB,OAL0ChE,EAAA6qB,EAAAtsB,GAK1CssB,EALA,CAA0C2E,GAA7Bt3B,EAAA2yB,wBAQb,IAAAE,GAAA,SAAAxsB,GAAA,SAAAwsB,IAAA,IAAAtsB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASwtB,SAIlB,OALqC3wB,EAAA+qB,EAAAxsB,GAKrCwsB,EALA,CAAqC+D,GAAxB52B,EAAA6yB,mBAQb,IAAAK,GAAA,SAAA7sB,GAAA,SAAA6sB,IAAA,IAAA3sB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASytB,aAMlB,OAPgC5wB,EAAAorB,EAAA7sB,GAOhC6sB,EAPA,CAAgC7J,GAAnBrpB,EAAAkzB,cAUb,IAAAF,GAAA,SAAA3sB,GAAA,SAAA2sB,IAAA,IAAAzsB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS0tB,SAMlB,OAPqC7wB,EAAAkrB,EAAA3sB,GAOrC2sB,EAPA,CAAqC4D,GAAxB52B,EAAAgzB,mBAUb,IAAAI,GAAA,SAAA/sB,GAAA,SAAA+sB,IAAA,IAAA7sB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS2tB,QAIlB,OALoC9wB,EAAAsrB,EAAA/sB,GAKpC+sB,EALA,CAAoCwD,GAAvB52B,EAAAozB,kBAQb,IAAAK,GAAA,SAAAptB,GAAA,SAAAotB,IAAA,IAAAltB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS4tB,MAUlB,OAXkC/wB,EAAA2rB,EAAAptB,GAWlCotB,EAXA,CAAkCmD,GAArB52B,EAAAyzB,gBAcb,IAAAE,GAAA,SAAAttB,GAAA,SAAAstB,IAAA,IAAAptB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASe,kBAMlB,OAPqClE,EAAA6rB,EAAAttB,GAOrCstB,EAPA,CAAqC2D,GAAxBt3B,EAAA2zB,mBAUb,IAAAI,GAAA,SAAA1tB,GAAA,SAAA0tB,IAAA,IAAAxtB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS6tB,sBAClB,OAFyChxB,EAAAisB,EAAA1tB,GAEzC0tB,EAFA,CAAyC6D,GAA5B53B,EAAA+zB,uBAKb,IAAAF,GAAA,SAAAxtB,GAAA,SAAAwtB,IAAA,IAAAttB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAASiB,WAMlB,OAPuCpE,EAAA+rB,EAAAxtB,GAOvCwtB,EAPA,CAAuC+C,GAA1B52B,EAAA6zB,qBAUb,IAAAI,GAAA,SAAA5tB,GAAA,SAAA4tB,IAAA,IAAA1tB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS8tB,OAIlB,OALmCjxB,EAAAmsB,EAAA5tB,GAKnC4tB,EALA,CAAmC2C,GAAtB52B,EAAAi0B,iBAQb,IAAAE,GAAA,SAAA9tB,GAAA,SAAA8tB,IAAA,IAAA5tB,EAAA,OAAAF,KAAAguB,MAAA/zB,KAAAqU,YAAArU,YACEiG,EAAAyE,KAAOC,EAAS+tB,QAMlB,OAPoClxB,EAAAqsB,EAAA9tB,GAOpC8tB,EAPA,CAAoCyC,GAqBpC,SAAgBa,GAAmBprB,EAAmC4sB,QAAA,IAAAA,OAAA,GACpE,IAAI/3B,EAAOmL,EAAYnL,KAAKgM,KACxBF,EAASX,EAAYW,OACzB,OAAKA,IAEHX,EAAYrB,MAAQC,EAAS6tB,qBAC7B9rB,EAAOhC,MAAQC,EAASiB,WAElBc,EAASA,EAAOA,SAEpBA,EAAOhC,MAAQC,EAASC,iBACnBusB,GAAqCzqB,EAAQisB,IAClD5sB,EAAYgE,GAAGzN,EAAA6M,YAAYkE,QACvB/Q,EAAAwT,iBACAxT,EAAA2T,oBACFrV,EAGJ8L,EAAOhC,MAAQC,EAASa,sBACxBkB,EAAOhC,MAAQC,EAASG,gBAEjBqsB,GAAyCzqB,EAAQisB,GACjDr2B,EAAAwT,iBAAmBlV,EAErB+3B,EACH/3B,EACAmL,EAAYU,MAAM3E,OAAO2O,aAAenU,EAAAuU,eAAiBjW,EAvBzCA,EA2BtB,SAAgB2vB,GAAmB5jB,GAEjC,OADIA,EAAK8K,SAAS,SAAQ9K,EAAOA,EAAK+K,UAAU,EAAG/K,EAAKvJ,OAAS,IAC1DuJ,EAMT,SAASwc,GAAU4B,EAAere,GAChC,IAAK,IAAIrM,EAAI,EAAGwH,EAAIkjB,EAAM3nB,OAAQ/C,EAAIwH,IAAKxH,EACzC0qB,EAAM1qB,GAAGqM,OAASA,EA7DThN,EAAAm0B,kBAUbn0B,EAAA+T,cAAA,SAA8B/I,EAAqB6F,GACjD,GAAIA,EACF,IAAK,IAAIlQ,EAAI,EAAGwH,EAAI0I,EAAWnN,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACjD,IAAIqQ,EAAYH,EAAWlQ,GAC3B,GAAIqQ,EAAUzN,eAAiByH,EAAM,OAAOgG,EAGhD,OAAO,MAIThR,EAAAy3B,sBA8BAz3B,EAAA6wB,qGC98DA,SAAYphB,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAEAA,IAAA,gDAKAA,IAAA,yBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,4BAEAA,IAAA,kCAEAA,IAAA,sBAEAA,IAAA,uCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,0BAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,uBAIAA,IAAA,2BAvEF,CAAYzP,EAAAyP,cAAAzP,EAAAyP,iBA2ECzP,EAAAmX,eAAiB,IAEjBnX,EAAAk5B,aAAe,KAEfl5B,EAAAiW,cAAgB,OAEhBjW,EAAAkW,cAAgB,OAEhBlW,EAAAuW,mBAAqB,IAErBvW,EAAAoW,iBAAmB,IAEnBpW,EAAAm5B,gBAAkB,IAElBn5B,EAAAo5B,cAAgB,OAEhBp5B,EAAAwI,eAAiBxI,EAAAo5B,cAAgBp5B,EAAAmX,eAEjCnX,EAAAkX,iBAAmB,uFCzFhC,IAeYmiB,EAfZC,EAAA74B,EAAA,IAKAgoB,EAAAhoB,EAAA,GAIA84B,EAAA94B,EAAA,IAgBA,SAAgB+4B,EAA2BC,GACzC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,MAAO,OACrC,KAAKL,EAAmBM,QAAS,MAAO,UACxC,KAAKN,EAAmBO,MAAO,MAAO,QACtC,QAEE,OADAn2B,QAAO,GACA,IAeb,SAAgBo2B,EAA0BJ,GACxC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,OAAO15B,EAAA85B,WACrC,KAAKT,EAAmBM,QAAS,OAAO35B,EAAA+5B,aACxC,KAAKV,EAAmBO,MAAO,OAAO55B,EAAAg6B,UACtC,QAEE,OADAv2B,QAAO,GACA,IA5CXzD,EAAA6M,eAAA0sB,EAAA1sB,eACA7M,EAAAi6B,uBAAAV,EAAAU,uBAIF,SAAYZ,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAr5B,EAAAq5B,qBAAAr5B,EAAAq5B,wBAUZr5B,EAAAw5B,6BAaax5B,EAAA85B,WAAqB,QAErB95B,EAAA+5B,aAAuB,QAEvB/5B,EAAAg6B,UAAoB,QAEpBh6B,EAAAk6B,YAAsB,OAGnCl6B,EAAA65B,4BAaA,IAAAM,EAAA,WAYE,SAAAA,EAAoBC,EAAWX,EAA8BY,GAH7D/5B,KAAAyM,MAAsB,KAIpBzM,KAAK85B,KAAOA,EACZ95B,KAAKm5B,SAAWA,EAChBn5B,KAAK+5B,QAAUA,EA4EnB,OAxESF,EAAAl4B,OAAP,SACEm4B,EACAX,EACAa,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUf,EAAAW,uBAAuBG,GAIrC,OAHY,MAARE,IAAcD,EAAUA,EAAQI,QAAQ,MAAOH,IACvC,MAARC,IAAcF,EAAUA,EAAQI,QAAQ,MAAOF,IACvC,MAARC,IAAcH,EAAUA,EAAQI,QAAQ,MAAOD,IAC5C,IAAIL,EAAkBC,EAAMX,EAAUY,IAIxCF,EAAAO,WAAP,SACEN,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBl4B,OAAOm4B,EAAMf,EAAmBK,KAAMY,EAAMC,IAIhEJ,EAAAQ,cAAP,SACEP,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBl4B,OAAOm4B,EAAMf,EAAmBM,QAASW,EAAMC,IAInEJ,EAAAS,YAAP,SACER,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBl4B,OAAOm4B,EAAMf,EAAmBO,MAAOU,EAAMC,IAIxEJ,EAAA53B,UAAAs4B,UAAA,SAAU9tB,GAER,OADAzM,KAAKyM,MAAQA,EACNzM,MAIT65B,EAAA53B,UAAAgP,SAAA,WACE,OAAIjR,KAAKyM,MAELysB,EAA2Bl5B,KAAKm5B,UAChC,IACAn5B,KAAK85B,KAAK7oB,SAAS,IACnB,MACAjR,KAAK+5B,QACL,QACA/5B,KAAKyM,MAAM3E,OAAOF,eAClB,IACA5H,KAAKyM,MAAM4Q,KAAKpM,SAAS,IACzB,IACAjR,KAAKyM,MAAM6Q,OAAOrM,SAAS,IAI7BioB,EAA2Bl5B,KAAKm5B,UAChC,IACAn5B,KAAK85B,KAAK7oB,SAAS,IACnB,KACAjR,KAAK+5B,SAGXF,EA3FA,GA8FA,SAAgBW,EACdT,EACAU,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAAIC,KAUJ,GATIF,GAAWE,EAAGxoB,KAAKonB,EAA0BQ,EAAQZ,WACzDwB,EAAGxoB,KAAK+mB,EAA2Ba,EAAQZ,WACvCsB,GAAWE,EAAGxoB,KAAKzS,EAAAk6B,aACvBe,EAAGxoB,KAAK4nB,EAAQD,KAAO,IAAO,MAAQ,OACtCa,EAAGxoB,KAAK4nB,EAAQD,KAAK7oB,SAAS,KAC9B0pB,EAAGxoB,KAAK,MACRwoB,EAAGxoB,KAAK4nB,EAAQA,SAGZA,EAAQttB,MAAO,CAGjB,IAAIA,EAAQstB,EAAQttB,MAChBiuB,IACFC,EAAGxoB,KAAK,MACRwoB,EAAGxoB,KAAKyoB,EAAwBb,EAAQttB,MAAOguB,KAGjDE,EAAGxoB,KAAK,MACRwoB,EAAGxoB,KAAK,QACRwoB,EAAGxoB,KAAK1F,EAAM3E,OAAOF,gBACrB+yB,EAAGxoB,KAAK,KACRwoB,EAAGxoB,KAAK1F,EAAM4Q,KAAKpM,SAAS,KAC5B0pB,EAAGxoB,KAAK,KACRwoB,EAAGxoB,KAAK1F,EAAM6Q,OAAOrM,SAAS,KAC9B0pB,EAAGxoB,KAAK,KAEV,OAAOwoB,EAAGzoB,KAAK,IAIjB,SAAgB0oB,EAAwBnuB,EAAcguB,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAI7tB,EAAOH,EAAM3E,OAAO8E,KACpBiuB,EAAMjuB,EAAKxJ,OACX03B,EAAQruB,EAAMquB,MACdC,EAAMtuB,EAAMsuB,IACTD,EAAQ,IAAM3S,EAAA6S,YAAYpuB,EAAKpJ,WAAWs3B,EAAQ,KAAKA,IAC9D,KAAOC,EAAMF,IAAQ1S,EAAA6S,YAAYpuB,EAAKpJ,WAAWu3B,KAAOA,IAMxD,IALA,IAAIJ,GACF,MACA/tB,EAAK8K,UAAUojB,EAAOC,GACtB,OAEKD,EAAQruB,EAAMquB,OACnBH,EAAGxoB,KAAK,KACR2oB,IAGF,GADIL,GAAWE,EAAGxoB,KAAKzS,EAAAg6B,WACnBjtB,EAAMquB,OAASruB,EAAMsuB,IACvBJ,EAAGxoB,KAAK,UAER,KAAO2oB,IAAUruB,EAAMsuB,KAAKJ,EAAGxoB,KAAK,KAGtC,OADIsoB,GAAWE,EAAGxoB,KAAKzS,EAAAk6B,aAChBe,EAAGzoB,KAAK,IA5JJxS,EAAAm6B,oBA8Fbn6B,EAAA86B,0BAuCA96B,EAAAk7B,0BA2BA,IAAAziB,EAAA,WAME,SAAAA,EAAsBnS,QAAA,IAAAA,MAAA,MACpBhG,KAAKgG,YAAcA,GAAiD,IAAI8D,MAqD5E,OAjDEqO,EAAAlW,UAAAg5B,eAAA,SACEnB,EACAX,EACA1sB,EACAutB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUF,EAAkBl4B,OAAOm4B,EAAMX,EAAUa,EAAMC,EAAMC,GAAMK,UAAU9tB,GAEnF,GADAzM,KAAKgG,YAAYmM,KAAK4nB,GAClBZ,GAAYJ,EAAmBO,MAGjC,MAFA4B,QAAQC,IAAIX,EAAwBT,GAAS,GAAM,GAAQ,MAC3DmB,QAAQC,IAAY,IAAI1sB,MAAM,SAAS2sB,OACzB,IAAI3sB,MAAM,SAAS2sB,OAKrCjjB,EAAAlW,UAAAo5B,KAAA,SACEvB,EACArtB,EACAutB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAl6B,KAAKi7B,eAAenB,EAAMf,EAAmBK,KAAM3sB,EAAOutB,EAAMC,EAAMC,IAIxE/hB,EAAAlW,UAAAq5B,QAAA,SACExB,EACArtB,EACAutB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAl6B,KAAKi7B,eAAenB,EAAMf,EAAmBM,QAAS5sB,EAAOutB,EAAMC,EAAMC,IAI3E/hB,EAAAlW,UAAAqK,MAAA,SACEwtB,EACArtB,EACAutB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAl6B,KAAKi7B,eAAenB,EAAMf,EAAmBO,MAAO7sB,EAAOutB,EAAMC,EAAMC,IAE3E/hB,EA5DA,GAAsBzY,EAAAyY,iKChOtBojB,EAAAp7B,EAAA,KACAo7B,EAAAp7B,EAAA,KACAo7B,EAAAp7B,EAAA,KACAo7B,EAAAp7B,EAAA,oFCJA,IAuBYiiB,EAvBZoZ,EAAAr7B,EAAA,KAaA,SAAkBs7B,GAChBA,IAAA,eACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,6BACAA,IAAA,gBAPF,CAAkB/7B,EAAA+7B,aAAA/7B,EAAA+7B,gBAUlB,SAAYrZ,GACVA,IAAA,QAAUsZ,sBAAoB,UAC9BtZ,IAAA,MAAQuZ,oBAAkB,QAC1BvZ,IAAA,GAAKwZ,iBAAe,KACpBxZ,IAAA,KAAOyZ,mBAAiB,OACxBzZ,IAAA,MAAQ0Z,oBAAkB,QAC1B1Z,IAAA,OAAS2Z,qBAAmB,SAC5B3Z,IAAA,KAAO4Z,mBAAiB,OACxB5Z,IAAA,aAAe6Z,2BAAyB,eACxC7Z,IAAA,SAAW8Z,uBAAqB,WAChC9Z,IAAA,SAAW+Z,uBAAqB,WAChC/Z,IAAA,UAAYga,wBAAsB,YAClCha,IAAA,UAAYia,wBAAsB,YAClCja,IAAA,KAAOka,mBAAiB,OACxBla,IAAA,MAAQma,oBAAkB,QAC1Bna,IAAA,MAAQoa,oBAAkB,QAC1Bpa,IAAA,MAAQqa,oBAAkB,QAC1Bra,IAAA,OAASsa,qBAAmB,SAC5Bta,IAAA,OAASua,qBAAmB,SAC5Bva,IAAA,KAAOwa,mBAAiB,OACxBxa,IAAA,OAASya,qBAAmB,SAC5Bza,IAAA,KAAO0a,mBAAiB,OACxB1a,IAAA,IAAM2a,kBAAgB,MACtB3a,IAAA,YAAc4a,0BAAwB,cACtC5a,IAAA,cAAgB6a,4BAA0B,gBAC1C7a,IAAA,UAAY8a,wBAAsB,YAClC9a,IAAA,WAAa+a,yBAAuB,aACpC/a,IAAA,WAAagb,yBAAuB,aA3BtC,CAAYhb,EAAA1iB,EAAA0iB,eAAA1iB,EAAA0iB,kBA8BZ,SAAY8D,GACVA,IAAA,OAASmX,qBAAmB,SAC5BnX,IAAA,OAASoX,qBAAmB,SAC5BpX,IAAA,UAAYqX,wBAAsB,YAClCrX,IAAA,OAASsX,uBAAqB,SAC9BtX,IAAA,OAASuX,uBAAqB,SAC9BvX,IAAA,QAAUwX,wBAAsB,UAChCxX,IAAA,SAAWyX,yBAAuB,WAClCzX,IAAA,SAAW0X,yBAAuB,WAClC1X,IAAA,WAAa2X,2BAAyB,aACtC3X,IAAA,QAAU4X,wBAAsB,UAChC5X,IAAA,OAAS6X,qBAAmB,SAC5B7X,IAAA,OAAS8X,qBAAmB,SAC5B9X,IAAA,OAAS+X,qBAAmB,SAC5B/X,IAAA,UAAYgY,wBAAsB,YAClChY,IAAA,OAASiY,uBAAqB,SAC9BjY,IAAA,OAASkY,uBAAqB,SAC9BlY,IAAA,QAAUmY,wBAAsB,UAChCnY,IAAA,SAAWoY,yBAAuB,WAClCpY,IAAA,SAAWqY,yBAAuB,WAClCrY,IAAA,WAAasY,2BAAyB,aACtCtY,IAAA,QAAUuY,wBAAsB,UAChCvY,IAAA,OAASwY,qBAAmB,SAC5BxY,IAAA,UAAYyY,yBAAuB,YACnCzY,IAAA,UAAY0Y,yBAAuB,YACnC1Y,IAAA,QAAU2Y,sBAAoB,UAC9B3Y,IAAA,cAAgB4Y,iCAA+B,gBAC/C5Y,IAAA,cAAgB6Y,iCAA+B,gBAC/C7Y,IAAA,cAAgB8Y,iCAA+B,gBAC/C9Y,IAAA,cAAgB+Y,iCAA+B,gBAC/C/Y,IAAA,cAAgBgZ,iCAA+B,gBAC/ChZ,IAAA,cAAgBiZ,iCAA+B,gBAC/CjZ,IAAA,cAAgBkZ,iCAA+B,gBAC/ClZ,IAAA,cAAgBmZ,iCAA+B,gBAC/CnZ,IAAA,eAAiBoZ,+BAA6B,iBAC9CpZ,IAAA,eAAiBqZ,+BAA6B,iBAC9CrZ,IAAA,gBAAkBsZ,mCAAiC,kBACnDtZ,IAAA,gBAAkBuZ,mCAAiC,kBACnDvZ,IAAA,gBAAkBwZ,mCAAiC,kBACnDxZ,IAAA,gBAAkByZ,mCAAiC,kBACnDzZ,IAAA,gBAAkB0Z,mCAAiC,kBACnD1Z,IAAA,gBAAkB2Z,mCAAiC,kBACnD3Z,IAAA,gBAAkB4Z,mCAAiC,kBACnD5Z,IAAA,gBAAkB6Z,mCAAiC,kBACnD7Z,IAAA,WAAa8Z,2BAAyB,aACtC9Z,IAAA,UAAY+Z,0BAAwB,YACpC/Z,IAAA,eAAiBga,6BAA2B,iBAC5Cha,IAAA,eAAiBia,6BAA2B,iBAG5Cja,IAAA,cAAgBka,0BAAwB,gBACxCla,IAAA,eAAiBma,2BAAyB,iBAC1Cna,IAAA,cAAgBoa,0BAAwB,gBACxCpa,IAAA,eAAiBqa,2BAAyB,iBAC1Cra,IAAA,eAAiBsa,2BAAyB,iBAtD5C,CAAY9gC,EAAAwmB,UAAAxmB,EAAAwmB,aAmEZ,SAAYlD,GACVA,IAAA,OAASyd,qBAAmB,SAC5Bzd,IAAA,OAAS0d,qBAAmB,SAC5B1d,IAAA,OAAS2d,qBAAmB,SAC5B3d,IAAA,OAAS4d,sBAAoB,SAC7B5d,IAAA,OAAS6d,sBAAoB,SAC7B7d,IAAA,OAAS8d,sBAAoB,SAC7B9d,IAAA,OAAS+d,sBAAoB,SAC7B/d,IAAA,OAASge,qBAAmB,SAC5Bhe,IAAA,MAAQie,oBAAkB,QAC1Bje,IAAA,OAASke,qBAAmB,SAC5Ble,IAAA,OAASme,qBAAmB,SAC5Bne,IAAA,OAASoe,sBAAoB,SAC7Bpe,IAAA,OAASqe,sBAAoB,SAC7Bre,IAAA,QAAUse,sBAAoB,UAC9Bte,IAAA,QAAUue,sBAAoB,UAC9Bve,IAAA,MAAQwe,oBAAkB,QAC1Bxe,IAAA,MAAQye,oBAAkB,QAC1Bze,IAAA,MAAQ0e,qBAAmB,QAC3B1e,IAAA,MAAQ2e,qBAAmB,QAC3B3e,IAAA,MAAQ4e,qBAAmB,QAC3B5e,IAAA,MAAQ6e,qBAAmB,QAC3B7e,IAAA,MAAQ8e,qBAAmB,QAC3B9e,IAAA,MAAQ+e,qBAAmB,QAC3B/e,IAAA,MAAQgf,qBAAmB,QAC3Bhf,IAAA,MAAQif,qBAAmB,QAC3Bjf,IAAA,OAASkf,qBAAmB,SAC5Blf,IAAA,OAASmf,qBAAmB,SAC5Bnf,IAAA,OAASof,qBAAmB,SAC5Bpf,IAAA,OAASqf,sBAAoB,SAC7Brf,IAAA,OAASsf,sBAAoB,SAC7Btf,IAAA,OAASuf,sBAAoB,SAC7Bvf,IAAA,OAASwf,sBAAoB,SAC7Bxf,IAAA,OAASyf,qBAAmB,SAC5Bzf,IAAA,MAAQ0f,oBAAkB,QAC1B1f,IAAA,OAAS2f,qBAAmB,SAC5B3f,IAAA,OAAS4f,qBAAmB,SAC5B5f,IAAA,OAAS6f,sBAAoB,SAC7B7f,IAAA,OAAS8f,sBAAoB,SAC7B9f,IAAA,QAAU+f,sBAAoB,UAC9B/f,IAAA,QAAUggB,sBAAoB,UAC9BhgB,IAAA,MAAQigB,oBAAkB,QAC1BjgB,IAAA,MAAQkgB,oBAAkB,QAC1BlgB,IAAA,MAAQmgB,qBAAmB,QAC3BngB,IAAA,MAAQogB,qBAAmB,QAC3BpgB,IAAA,MAAQqgB,qBAAmB,QAC3BrgB,IAAA,MAAQsgB,qBAAmB,QAC3BtgB,IAAA,MAAQugB,qBAAmB,QAC3BvgB,IAAA,MAAQwgB,qBAAmB,QAC3BxgB,IAAA,MAAQygB,qBAAmB,QAC3BzgB,IAAA,MAAQ0gB,qBAAmB,QAC3B1gB,IAAA,OAAS2gB,uBAAqB,SAC9B3gB,IAAA,OAAS4gB,uBAAqB,SAC9B5gB,IAAA,OAAS6gB,uBAAqB,SAC9B7gB,IAAA,OAAS8gB,uBAAqB,SAC9B9gB,IAAA,YAAc+gB,4BAA0B,cACxC/gB,IAAA,OAASghB,uBAAqB,SAC9BhhB,IAAA,OAASihB,uBAAqB,SAC9BjhB,IAAA,MAAQkhB,sBAAoB,QAC5BlhB,IAAA,MAAQmhB,sBAAoB,QAC5BnhB,IAAA,MAAQohB,sBAAoB,QAC5BphB,IAAA,MAAQqhB,sBAAoB,QAC5BrhB,IAAA,MAAQshB,sBAAoB,QAC5BthB,IAAA,MAAQuhB,sBAAoB,QAC5BvhB,IAAA,OAASwhB,uBAAqB,SAC9BxhB,IAAA,OAASyhB,uBAAqB,SAC9BzhB,IAAA,OAAS0hB,uBAAqB,SAC9B1hB,IAAA,OAAS2hB,uBAAqB,SAC9B3hB,IAAA,YAAc4hB,4BAA0B,cACxC5hB,IAAA,OAAS6hB,uBAAqB,SAC9B7hB,IAAA,OAAS8hB,uBAAqB,SAC9B9hB,IAAA,MAAQ+hB,sBAAoB,QAC5B/hB,IAAA,MAAQgiB,sBAAoB,QAC5BhiB,IAAA,MAAQiiB,sBAAoB,QAC5BjiB,IAAA,MAAQkiB,sBAAoB,QAC5BliB,IAAA,MAAQmiB,sBAAoB,QAC5BniB,IAAA,MAAQoiB,sBAAoB,QA5E9B,CAAY1lC,EAAAsjB,WAAAtjB,EAAAsjB,cA+EZ,SAAYqiB,GACVA,IAAA,cAAgBC,0BAAwB,gBACxCD,IAAA,WAAaE,uBAAqB,aAFpC,CAAY7lC,EAAA2lC,SAAA3lC,EAAA2lC,YASZ,SAAYG,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYpmC,EAAA8lC,cAAA9lC,EAAA8lC,iBASZ,IAAAO,EAAA,oBAAAA,KAWA,OANSA,EAAApkC,OAAP,SAAcqkC,EAAoBC,GAChC,IAAIC,EAAU,IAAIH,EAGlB,OAFAG,EAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXH,EAXA,GAAarmC,EAAAqmC,gBAab,IAAAI,EAAA,WAyBE,SAAAA,IAkZQnmC,KAAAomC,oBAA6B,EAC7BpmC,KAAAqmC,sBAA6B,EAyQ7BrmC,KAAAsmC,qBAA8B,EAC9BtmC,KAAAumC,sBAA+B,EAgMzC,OAh3BSJ,EAAAxkC,OAAP,WACE,IAAIhC,EAAS,IAAIwmC,EAGjB,OAFAxmC,EAAO6a,IAAMgsB,wBACb7mC,EAAO8mC,cAAgBC,OAAOC,SAAS,IAChChnC,GAGFwmC,EAAAS,WAAP,SAAkBZ,GAChB,IAAIa,EAAOC,EAAad,GACxB,IACE,IAAIrmC,EAAS,IAAIwmC,EAGjB,OAFAxmC,EAAO6a,IAAMusB,oBAAoBF,EAAMb,EAAO5iC,QAC9CzD,EAAO8mC,cAAgBC,OAAOC,SAAS,IAChChnC,UAEP+mC,OAAOxmB,KAAK8mB,WAAkBH,MAQlCV,EAAAlkC,UAAAglC,gBAAA,SACErmC,EACA8X,EACAwuB,GAEA,IAAIC,EAAOC,EAAYxmC,GACnBimC,EAAOQ,EAAcH,GACzB,IACE,OAAOI,yBAAyBtnC,KAAKwa,IAAK2sB,EAAMzuB,EAAQmuB,EAAMK,EAAaA,EAAW9jC,OAAS,WAE/FsjC,OAAOxmB,KAAK2mB,GACZH,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAslC,2BAAA,SACE7uB,EACAwuB,GAEA,IAAIL,EAAOQ,EAAcH,GACzB,IACE,OAAOM,oCAAoCxnC,KAAKwa,IAAK9B,EAAQmuB,EAAMK,EAAaA,EAAW9jC,OAAS,WAEpGsjC,OAAOxmB,KAAK2mB,KAIhBV,EAAAlkC,UAAAwlC,mBAAA,SAAmB7mC,GACjB,IAAIumC,EAAOC,EAAYxmC,GACvB,IACE8mC,4BAA4B1nC,KAAKwa,IAAK2sB,WAEtCT,OAAOxmB,KAAKinB,KAMhBhB,EAAAlkC,UAAA0lC,UAAA,SAAUrmC,GACR,IAAIsmC,EAAM5nC,KAAKymC,cAEf,OADAoB,sBAAsBD,EAAKtmC,GACpBwmC,eAAe9nC,KAAKwa,IAAKotB,IAGlCzB,EAAAlkC,UAAA8lC,UAAA,SAAUC,EAAeC,QAAA,IAAAA,MAAA,GACvB,IAAIL,EAAM5nC,KAAKymC,cAEf,OADAyB,sBAAsBN,EAAKI,EAAUC,GAC9BH,eAAe9nC,KAAKwa,IAAKotB,IAGlCzB,EAAAlkC,UAAAkmC,UAAA,SAAU7mC,GACR,IAAIsmC,EAAM5nC,KAAKymC,cAEf,OADA2B,wBAAwBR,EAAKtmC,GACtBwmC,eAAe9nC,KAAKwa,IAAKotB,IAGlCzB,EAAAlkC,UAAAomC,UAAA,SAAU/mC,GACR,IAAIsmC,EAAM5nC,KAAKymC,cAEf,OADA6B,wBAAwBV,EAAKtmC,GACtBwmC,eAAe9nC,KAAKwa,IAAKotB,IAKlCzB,EAAAlkC,UAAAsmC,YAAA,SACEC,EACAvmB,GAEA,OAAOwmB,eAAezoC,KAAKwa,IAAKguB,EAAIvmB,IAGtCkkB,EAAAlkC,UAAAymC,aAAA,SACEF,EACA/mB,EACAC,GAEA,OAAOinB,gBAAgB3oC,KAAKwa,IAAKguB,EAAI/mB,EAAMC,IAG7CykB,EAAAlkC,UAAA2mC,WAAA,SACEJ,EACA5nC,EACAioC,QADA,IAAAjoC,MAAA,WACA,IAAAioC,MAAA,MAEA,IAAI1B,EAAOC,EAAYxmC,GACnBimC,EAAOiC,EAAcD,GACzB,IACE,OAAOE,cAAc/oC,KAAKwa,IAAKguB,EAAIrB,EAAMN,EAAMgC,EAA6BA,EAAUzlC,OAAS,WAE/FsjC,OAAOxmB,KAAK2mB,GACZH,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAA+mC,eAAA,SACErvB,EACA5K,GAEA,OAAOk6B,kBAAkBjpC,KAAKwa,IAAKb,EAAO5K,IAG5Co3B,EAAAlkC,UAAAinC,eAAA,SACEvvB,EACArY,GAEA,OAAO6nC,kBAAkBnpC,KAAKwa,IAAKb,EAAOrY,IAG5C6kC,EAAAlkC,UAAAmnC,gBAAA,SACExoC,EACAmO,GAEA,IAAIo4B,EAAOC,EAAYxmC,GACvB,IACE,OAAOyoC,mBAAmBrpC,KAAKwa,IAAK2sB,EAAMp4B,WAE1C23B,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAqnC,WAAA,SACEC,EACAC,EACAC,EACA16B,EACAk3B,GAEA,YAFA,IAAAA,MAAA,GAEOyD,cAAc1pC,KAAKwa,IAAK+uB,EAAOC,EAAS,EAAI,EAAGvD,EAA6BsD,EAAOx6B,EAAM06B,IAGlGtD,EAAAlkC,UAAA0nC,YAAA,SACEJ,EACAE,EACAnoC,EACAyN,EACAk3B,GAEA,YAFA,IAAAA,MAAA,GAEO2D,eAAe5pC,KAAKwa,IAAK+uB,EAAOtD,EAA6BsD,EAAOE,EAAKnoC,EAAOyN,IAGzFo3B,EAAAlkC,UAAA4nC,iBAAA,SACEN,EACAE,EACA16B,EACAk3B,GAEA,YAFA,IAAAA,MAAA,GAEO6D,oBAAoB9pC,KAAKwa,IAAK+uB,EAAOtD,EAAQl3B,EAAM06B,IAG5DtD,EAAAlkC,UAAA8nC,kBAAA,SACER,EACAE,EACAnoC,EACAyN,EACAk3B,GAEA,YAFA,IAAAA,MAAA,GAEO+D,qBAAqBhqC,KAAKwa,IAAK+uB,EAAOtD,EAAQwD,EAAKnoC,EAAOyN,IAGnEo3B,EAAAlkC,UAAAgoC,gBAAA,SACEzB,EACAe,EACAtD,EACAwD,EACAnoC,EACAyN,GAEA,OAAOm7B,mBAAmBlqC,KAAKwa,IAAKguB,EAAIe,EAAOtD,EAAQwD,EAAKnoC,EAAOyN,IAGrEo3B,EAAAlkC,UAAAkoC,oBAAA,SACEZ,EACAtD,EACAwD,EACAW,EACAC,EACAt7B,GAEA,OAAOu7B,uBAAuBtqC,KAAKwa,IAAK+uB,EAAOtD,EAAQwD,EAAKW,EAAUC,EAAat7B,IAGrFo3B,EAAAlkC,UAAAsoC,iBAAA,SACEd,EACAW,EACAI,EACAC,GAEA,OAAOC,oBAAoB1qC,KAAKwa,IAAKivB,EAAKW,EAAUI,EAASC,IAG/DtE,EAAAlkC,UAAA0oC,iBAAA,SACElB,EACAmB,GAEA,OAAOC,oBAAoB7qC,KAAKwa,IAAKivB,EAAKmB,IAK5CzE,EAAAlkC,UAAA6oC,eAAA,SACEnxB,EACArY,GAEA,OAAOypC,kBAAkB/qC,KAAKwa,IAAKb,EAAOrY,IAG5C6kC,EAAAlkC,UAAA+oC,gBAAA,SACEpqC,EACAU,GAEA,IAAI6lC,EAAOC,EAAYxmC,GACvB,IACE,OAAOqqC,mBAAmBjrC,KAAKwa,IAAK2sB,EAAM7lC,WAE1ColC,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAipC,YAAA,SACE9b,EACA+b,EACAp8B,QAAA,IAAAA,MAAA,GAEA,IAAIo4B,EAAOC,EAAYhY,GACnByX,EAAOiC,EAAcqC,GACzB,IACE,OAAOC,eAAeprC,KAAKwa,IAAK2sB,EAAMN,EAAMsE,EAAS/nC,OAAQ2L,WAE7D23B,OAAOxmB,KAAK2mB,GACZH,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAopC,YAAA,SACEjc,EACAnB,EACA3sB,QADA,IAAA2sB,MAAA,QACA,IAAA3sB,MAAA,GAEA,IAAI6lC,EAAOC,EAAYhY,GACvB,IACE,OAAOkc,eAAetrC,KAAKwa,IAAK2sB,EAAMlZ,EAAW3sB,WAEjDolC,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAspC,WAAA,SACEpgB,GAEA,OAAOqgB,cAAcxrC,KAAKwa,IAAK2Q,IAGjCgb,EAAAlkC,UAAAwpC,WAAA,SACErc,EACA4C,GAEA,IAAImV,EAAOC,EAAYhY,GACvB,IACE,OAAOsc,cAAc1rC,KAAKwa,IAAK2sB,EAAMnV,WAErC0U,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAA0pC,SAAA,SACE1d,EACA8C,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEO4a,YAAY5rC,KAAKwa,IAAKyT,EAAW8C,EAAQC,IAGlDmV,EAAAlkC,UAAA4pC,UAAA,WACE,OAAOC,aAAa9rC,KAAKwa,MAG3B2rB,EAAAlkC,UAAA8pC,aAAA,SACE5gB,GAEA,YAFA,IAAAA,MAAA,GAEO6gB,gBAAgBhsC,KAAKwa,IAAK2Q,IAGnCgb,EAAAlkC,UAAAgqC,aAAA,SACElb,EACAC,EACA/C,GAEA,OAAOie,gBAAgBlsC,KAAKwa,IAAKyT,EAAW8C,EAAQC,IAGtDmV,EAAAlkC,UAAAkqC,aAAA,SACE7e,EACA8e,EACAne,EACA3sB,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAI+qC,EAAW/e,EAAMlqB,OACjBkpC,EAAO,IAAIxiC,MAAauiC,GACnBhsC,EAAI,EAAGA,EAAIgsC,IAAYhsC,EAC9BisC,EAAKjsC,GAAK+mC,EAAY9Z,EAAMjtB,IAE9B,IAAIwmC,EAAOQ,EAAciF,GACrBnF,EAAOC,EAAYgF,GACvB,IACE,OAAOG,gBAAgBvsC,KAAKwa,IAAKqsB,EAAMwF,EAAUlF,EAAMlZ,EAAW3sB,WAElEolC,OAAOxmB,KAAKinB,GACZT,OAAOxmB,KAAK2mB,GACZ,IAASxmC,EAAIgsC,EAAW,EAAGhsC,GAAK,IAAKA,EAAGqmC,OAAOxmB,KAAKosB,EAAKjsC,MAI7D8lC,EAAAlkC,UAAAuqC,WAAA,SACE9tB,EACAmqB,EACAj5B,GAEA,IAAIu3B,EAAOC,EAAY1oB,GACnBmoB,EAAOiC,EAAcD,GACzB,IACE,OAAO4D,cAAczsC,KAAKwa,IAAK2sB,EAAMN,EAAMgC,GAAYA,EAASzlC,QAAU,EAAGwM,WAE7E82B,OAAOxmB,KAAK2mB,GACZH,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAyqC,mBAAA,SACE/yB,EACAkvB,EACA8D,GAEA,IAAI9F,EAAOiC,EAAcD,GACrB1B,EAAOC,EAAYuF,GACvB,IACE,OAAOC,sBAAsB5sC,KAAKwa,IAAKb,EAAOktB,EAAMgC,GAAYA,EAASzlC,QAAU,EAAG+jC,WAEtFT,OAAOxmB,KAAKinB,GACZT,OAAOxmB,KAAK2mB,KAIhBV,EAAAlkC,UAAA4qC,kBAAA,WACE,OAAOC,qBAAqB9sC,KAAKwa,MAKnC2rB,EAAAlkC,UAAA8qC,UAAA,SACEnsC,EACAmO,EACAi+B,EACAvzB,GAEA,IAAI0tB,EAAOC,EAAYxmC,GACvB,IACE,OAAOqsC,mBAAmBjtC,KAAKwa,IAAK2sB,EAAMp4B,EAAMi+B,EAAU,EAAI,EAAGvzB,WAEjEitB,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAirC,aAAA,SACEtsC,GAEA,IAAIumC,EAAOC,EAAYxmC,GACvB,IACEusC,sBAAsBntC,KAAKwa,IAAK2sB,WAEhCT,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAmrC,YAAA,SACExsC,EACAmO,EACAs+B,EACArb,GAEA,IAAImV,EAAOC,EAAYxmC,GACnBimC,EAAOQ,EAAcgG,GACzB,IACE,OAAOC,qBAAqBttC,KAAKwa,IAAK2sB,EAAMp4B,EAAM83B,EAAMwG,EAAWA,EAASjqC,OAAS,EAAG4uB,WAExF0U,OAAOxmB,KAAK2mB,GACZH,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAsrC,eAAA,SAAe3sC,GACb,IAAIumC,EAAOC,EAAYxmC,GACvB,IACE4sC,wBAAwBxtC,KAAKwa,IAAK2sB,WAElCT,OAAOxmB,KAAKinB,KAOhBhB,EAAAlkC,UAAAwrC,qBAAA,SAAqB/0B,EAAoBwuB,EAAiClV,GACxEhyB,KAAKqmC,qBAAuBljC,QAAQnD,KAAKqmC,sBACzC,IAAIqH,EAAW1tC,KAAKomC,oBACfsH,IAAU1tC,KAAKomC,oBAAsBsH,EAAWtG,EAAY,KACjE,IAAIP,EAAOQ,EAAcH,GACzB,IACE,IAAIyG,EAAUrG,yBAAyBtnC,KAAKwa,IAAKkzB,EAAUh1B,EAAQmuB,EAAMK,EAAaA,EAAW9jC,OAAS,GAC1G,OAAOkqC,qBAAqBttC,KAAKwa,IAAKkzB,EAAUC,EAAS,EAAG,EAAG3b,WAE/D0U,OAAOxmB,KAAK2mB,KAIhBV,EAAAlkC,UAAA2rC,wBAAA,WACE5tC,KAAKqmC,sBAAwBljC,OAAOnD,KAAKqmC,sBACzC,IAAIqH,EAAWvqC,OAAOnD,KAAKomC,qBAC3BoH,wBAAwBxtC,KAAKwa,IAAKkzB,GAClChG,4BAA4B1nC,KAAKwa,IAAKkzB,IAGxCvH,EAAAlkC,UAAA4rC,kBAAA,SACExjC,EACA6B,GAEA,IAAI4hC,EAAQ1G,EAAY/8B,GACpB0jC,EAAQ3G,EAAYl7B,GACxB,IACE,OAAO8hC,2BAA2BhuC,KAAKwa,IAAKszB,EAAOC,WAEnDrH,OAAOxmB,KAAK6tB,GACZrH,OAAOxmB,KAAK4tB,KAIhB3H,EAAAlkC,UAAAgsC,eAAA,SACE5jC,EACA6B,GAEA,IAAI4hC,EAAQ1G,EAAY/8B,GACpB0jC,EAAQ3G,EAAYl7B,GACxB,IACE,OAAOgiC,wBAAwBluC,KAAKwa,IAAKszB,EAAOC,WAEhDrH,OAAOxmB,KAAK6tB,GACZrH,OAAOxmB,KAAK4tB,KAIhB3H,EAAAlkC,UAAAksC,gBAAA,SACE9jC,EACA6B,GAEA,IAAI4hC,EAAQ1G,EAAY/8B,GACpB0jC,EAAQ3G,EAAYl7B,GACxB,IACE,OAAOkiC,yBAAyBpuC,KAAKwa,IAAKszB,EAAOC,WAEjDrH,OAAOxmB,KAAK6tB,GACZrH,OAAOxmB,KAAK4tB,KAIhB3H,EAAAlkC,UAAAosC,gBAAA,SACEhkC,EACA6B,GAEA,IAAI4hC,EAAQ1G,EAAY/8B,GACpB0jC,EAAQ3G,EAAYl7B,GACxB,IACE,OAAOoiC,yBAAyBtuC,KAAKwa,IAAKszB,EAAOC,WAEjDrH,OAAOxmB,KAAK6tB,GACZrH,OAAOxmB,KAAK4tB,KAIhB3H,EAAAlkC,UAAAssC,aAAA,SAAariC,GACX,IAAIi7B,EAAOC,EAAYl7B,GACvB,IACEsiC,sBAAsBxuC,KAAKwa,IAAK2sB,WAEhCT,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAwsC,kBAAA,SACEpkC,EACAqkC,EACAC,EACAC,GAEA,IAAId,EAAQ1G,EAAY/8B,GACpB0jC,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOG,2BAA2B9uC,KAAKwa,IAAKszB,EAAOC,EAAOc,EAAOD,WAEjElI,OAAOxmB,KAAK2uB,GACZnI,OAAOxmB,KAAK6tB,GACZrH,OAAOxmB,KAAK4tB,KAIhB3H,EAAAlkC,UAAA8sC,eAAA,SACE1kC,EACAqkC,EACAC,GAEA,IAAIb,EAAQ1G,EAAY/8B,GACpB0jC,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOK,wBAAwBhvC,KAAKwa,IAAKszB,EAAOC,EAAOc,WAEvDnI,OAAOxmB,KAAK2uB,GACZnI,OAAOxmB,KAAK6tB,GACZrH,OAAOxmB,KAAK4tB,KAIhB3H,EAAAlkC,UAAAgtC,gBAAA,SACE5kC,EACAqkC,EACAC,GAEA,IAAIb,EAAQ1G,EAAY/8B,GACpB0jC,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOO,yBAAyBlvC,KAAKwa,IAAKszB,EAAOC,EAAOc,WAExDnI,OAAOxmB,KAAK2uB,GACZnI,OAAOxmB,KAAK6tB,GACZrH,OAAOxmB,KAAK4tB,KAIhB3H,EAAAlkC,UAAAktC,gBAAA,SACE9kC,EACAqkC,EACAC,EACAS,GAEA,IAAItB,EAAQ1G,EAAY/8B,GACpB0jC,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOU,yBAAyBrvC,KAAKwa,IAAKszB,EAAOC,EAAOc,EAAOO,WAE/D1I,OAAOxmB,KAAK2uB,GACZnI,OAAOxmB,KAAK6tB,GACZrH,OAAOxmB,KAAK4tB,KAOhB3H,EAAAlkC,UAAAqtC,UAAA,SACEC,EACAC,EACAC,EACA/wB,EACAtR,QAAA,IAAAA,MAAA,MAOA,IALA,IAAI+5B,EAAOC,EAAYh6B,GACnBvF,EAAI4nC,EAASrsC,OACbssC,EAAO,IAAI5lC,MAAajC,GACxB8nC,EAAO,IAAI7lC,MAAqBjC,GAChC+nC,EAAO,IAAI9lC,MAAajC,GACnBxH,EAAI,EAAGA,EAAIwH,IAAKxH,EAAG,CAC1B,IAAI2lC,EAASyJ,EAASpvC,GAAG2lC,OACrBC,EAASwJ,EAASpvC,GAAG4lC,OACzByJ,EAAKrvC,GAAKymC,EAAad,GACvB2J,EAAKtvC,GAAKqe,GAAU8c,EAAAqU,OAAOC,OACvB9vC,KAAK+nC,UAAUgI,QAAQ9J,GAAS+J,SAAS/J,IACzCjmC,KAAK2nC,UAAUoI,QAAQ9J,IAC3B2J,EAAKvvC,GAAK2lC,EAAO5iC,OAEnB,IAAI6sC,EAAQ5I,EAAcqI,GACtBQ,EAAQ7I,EAAcsI,GACtBQ,EAAQ9I,EAAcuI,GAC1B,IACEQ,mBAAmBpwC,KAAKwa,IAAK+0B,EAASC,EAASrI,EAAM8I,EAAOC,EAAOC,EAAOtoC,WAE1E6+B,OAAOxmB,KAAKiwB,GACZzJ,OAAOxmB,KAAKgwB,GACZxJ,OAAOxmB,KAAK+vB,GACZ,IAAS5vC,EAAIwH,EAAI,EAAGxH,GAAK,IAAKA,EAAGqmC,OAAOxmB,KAAKwvB,EAAKrvC,IAClDqmC,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAouC,iBAAA,SACEd,EACAC,EACAc,GAIA,IAFA,IAAIjE,EAAWiE,EAAMltC,OACjBkqB,EAAQ,IAAIxjB,MAAauiC,GACpBhsC,EAAI,EAAGA,EAAIgsC,IAAYhsC,EAC9BitB,EAAMjtB,GAAK+mC,EAAYkJ,EAAMjwC,IAE/B,IAAIwmC,EAAOQ,EAAc/Z,GACzB,IACEijB,0BAA0BvwC,KAAKwa,IAAK+0B,EAASC,EAAS3I,EAAMwF,WAE5D3F,OAAOxmB,KAAK2mB,GACZ,IAASxmC,EAAIgsC,EAAUhsC,GAAK,IAAKA,EAAGqmC,OAAOxmB,KAAKoN,EAAMjtB,MAI1D8lC,EAAAlkC,UAAAuuC,SAAA,SAASC,GACPC,kBAAkB1wC,KAAKwa,IAAKi2B,IAG9BtK,EAAAlkC,UAAA0uC,iBAAA,WACE,OAAOC,6BAGTzK,EAAAlkC,UAAA4uC,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5B3K,EAAAlkC,UAAA+uC,eAAA,WACE,OAAOC,2BAGT9K,EAAAlkC,UAAAivC,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1B3K,EAAAlkC,UAAAmvC,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBlL,EAAAlkC,UAAAsvC,SAAA,SAASd,QAAA,IAAAA,MAAA,GACHA,EACFe,0BAA0Bf,EAAMzwC,KAAKwa,KAErCi3B,wBAAwBzxC,KAAKwa,MAIjC2rB,EAAAlkC,UAAAyvC,UAAA,SAAUC,EAAkBlB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAIpE,EAAWsF,EAAOvuC,OAClBkqB,EAAQ,IAAIxjB,MAAauiC,GACpBhsC,EAAI,EAAGA,EAAIgsC,IAAYhsC,EAC9BitB,EAAMjtB,GAAK+mC,EAAYuK,EAAOtxC,IAEhC,IAAIwmC,EAAOQ,EAAc/Z,GACzB,IACMmjB,EACFmB,2BAA2BnB,EAAMzwC,KAAKwa,IAAKqsB,EAAMwF,GAEjDwF,yBAAyB7xC,KAAKwa,IAAKqsB,EAAMwF,WAG3C3F,OAAOxmB,KAAK2mB,GACZ,IAASxmC,EAAIgsC,EAAUhsC,GAAK,IAAKA,EAAGqmC,OAAOxmB,KAAKoN,EAAMjtB,MAO1D8lC,EAAAlkC,UAAA6vC,qBAAA,SAAqB7vB,GAEnB,IAAI8vB,EAAwBnB,4BACxBoB,EAAsBf,0BACtBgB,EAAoBC,wBACxBnB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIviC,EAAOojC,2BAA2BlwB,GAClCwuB,EAAOzwC,KAAKytC,qBAAqB1+B,EAAM,KAAMkT,GAC7CqL,EAAQttB,KAAKumC,sBACjB,IAAKjZ,EAAO,CACV,IAAI1sB,EAAOwmC,EAAY,cACvBpnC,KAAKsmC,qBAAuB1lC,EAC5BZ,KAAKumC,sBAAwBjZ,EAAQ+Z,GAAgBzmC,IAUvD,OARAgxC,2BAA2BnB,EAAMzwC,KAAKwa,IAAK8S,EAAO,GAClDrL,EAAOmwB,yBAAyB3B,GAChCzwC,KAAK4tC,0BAGLmD,0BAA0BgB,GAC1BZ,wBAAwBa,GACxBV,sBAAsBW,GACfhwB,GAGTkkB,EAAAlkC,UAAAowC,SAAA,WACE,OAA4C,GAArCC,wBAAwBtyC,KAAKwa,MAGtC2rB,EAAAlkC,UAAAswC,UAAA,WACEC,yBAAyBxyC,KAAKwa,MAGhC2rB,EAAAlkC,UAAAwwC,SAAA,SAASC,GACP,IAAI9K,EAAM5nC,KAAKymC,cACXU,EAAOC,EAAYsL,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgCjL,EAAK5nC,KAAKwa,IAAK2sB,GAC/CwL,EAAYG,EAAQlL,GACpB,IAAImL,EAAcD,EAAQlL,EAAM,GAChCgL,EAAeE,EAAQlL,EAAM,GAC7B,IAAIoL,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OAmiBV,SAAoBzJ,EAAYrmC,GAE9B,IADA,IAAI4vC,EAAM,IAAIG,WAAW/vC,GAChB/C,EAAW,EAAGA,EAAI+C,IAAU/C,EACnC2yC,EAAI3yC,GAAK+yC,KAAS3J,EAAMppC,GAE1B,OAAO2yC,EAxiBUK,CAAWV,EAAWI,GACnCC,EAAIh2B,UAAYs2B,EAAWV,GACpBI,UAEH7L,GAAMT,OAAOxmB,KAAKinB,GAClBwL,GAAWjM,OAAOxmB,KAAKyyB,GACvBC,GAAclM,OAAOxmB,KAAK0yB,KAIlCzM,EAAAlkC,UAAAsxC,OAAA,WACE,MAAM,IAAI9kC,MAAM,oBAGlB03B,EAAAlkC,UAAAuxC,QAAA,WACE,MAAM,IAAI/kC,MAAM,oBAGlB03B,EAAAlkC,UAAAwxC,QAAA,WACEtwC,OAAOnD,KAAKwa,KACZksB,OAAOxmB,KAAKlgB,KAAKymC,eACjBC,OAAOxmB,KAAKlgB,KAAKomC,qBACjBM,OAAOxmB,KAAKlgB,KAAKsmC,sBACjBI,OAAOxmB,KAAKlgB,KAAKumC,uBACjBmN,uBAAuB1zC,KAAKwa,KAC5Bxa,KAAKwa,IAAM,GAGb2rB,EAAAlkC,UAAA0xC,eAAA,WACE,OAAOC,EAASjyC,OAAO3B,OAGzBmmC,EAAAlkC,UAAA4xC,gBAAA,SACE5xB,EACA6xB,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBvrC,IAAIqe,WAEhBktB,EAAW,EAAG,OAAO,EAGzB,IAAIC,EACAC,EAEA,OALJF,GAAY,EAKAG,yBAAyBjyB,IACnC,KAAKG,EAAa+C,MAChB,OAAQgtB,2BAA2BlwB,IACjC,OACE,OAAOjiB,KAAK2nC,UAAUwM,0BAA0BlyB,IAElD,OACE,OAAOjiB,KAAK+nC,UACVqM,6BAA6BnyB,GAC7BoyB,8BAA8BpyB,IAGlC,OACE,OAAOjiB,KAAKmoC,UAAUmM,0BAA0BryB,IAElD,OACE,OAAOjiB,KAAKqoC,UAAUkM,0BAA0BtyB,IAElD,QACE,MAAM,IAAIxT,MAAM,0BAItB,KAAK2T,EAAaC,SAChB,OAAO4mB,kBAAkBjpC,KAAKwa,IAC5Bg6B,0BAA0BvyB,GAC1BkwB,2BAA2BlwB,IAG/B,KAAKG,EAAaO,UAChB,IAAI7S,EAAa2kC,0BAA0BxyB,GAC3C,IAAKnS,EAAY,MACjB,OAAOu5B,mBAAmBrpC,KAAKwa,IAAK1K,EAAYqiC,2BAA2BlwB,IAE7E,KAAKG,EAAa0E,KAChB,KAAMktB,EAAUh0C,KAAK6zC,gBAAgBa,oBAAoBzyB,GAAO6xB,EAAeC,IAC7E,MAEF,OACEY,sBAAsB1yB,GAClB6nB,oBAAoB9pC,KAAKwa,IACvBo6B,sBAAsB3yB,GACtB4yB,uBAAuB5yB,GACvBkwB,2BAA2BlwB,GAC3B+xB,GAEFtK,cAAc1pC,KAAKwa,IACjBo6B,sBAAsB3yB,GACtB6yB,sBAAsB7yB,GAAQ,EAAI,EAClC4yB,uBAAuB5yB,GACvB8yB,sBAAsB9yB,GACtBkwB,2BAA2BlwB,GAC3B+xB,GAIV,KAAK5xB,EAAa4D,MAChB,KAAMguB,EAAUh0C,KAAK6zC,gBAAgBmB,uBAAuB/yB,GAAO6xB,EAAeC,IAChF,MAEF,OAAOtL,eAAezoC,KAAKwa,IAAKy6B,oBAAoBhzB,GAAO+xB,GAE7D,KAAK5xB,EAAaU,OAChB,KAAMkxB,EAAUh0C,KAAK6zC,gBAAgBqB,uBAAuBjzB,GAAO6xB,EAAeC,IAChF,MAEF,KAAME,EAAUj0C,KAAK6zC,gBAAgBsB,wBAAwBlzB,GAAO6xB,EAAeC,IACjF,MAEF,OAAOpL,gBAAgB3oC,KAAKwa,IAAK46B,qBAAqBnzB,GAAO+xB,EAASC,GAG1E,OAAO,GAKT9N,EAAAlkC,UAAAozC,iBAAA,SAAiBz0C,GACf,IAAIumC,EAAOC,EAAYxmC,GACvB,IACE,OAAO00C,oCAAoCt1C,KAAKwa,IAAK2sB,WAErDT,OAAOxmB,KAAKinB,KAIhBhB,EAAAlkC,UAAAszC,iBAAA,SAAiB57B,GACf,OAAO25B,EAAWkC,oCAAoCx1C,KAAKwa,IAAKb,KAGlEwsB,EAAAlkC,UAAAib,iBAAA,SACEuzB,EACAxuB,EACAwzB,EACAC,EACAC,GAEAC,kCAAkCnF,EAAMxuB,EAAMwzB,EAAWC,EAAYC,IA1SvDxP,EAAA0P,kBAAkC,EA4SpD1P,EAt3BA,GAAazmC,EAAAymC,SA03BbzmC,EAAAyiB,gBAAA,SAAgCF,GAC9B,OAAOiyB,yBAAyBjyB,IAGlCviB,EAAA8mB,kBAAA,SAAkCvE,GAChC,OAAOkwB,2BAA2BlwB,IAGpCviB,EAAA0lB,iBAAA,SAAiCnD,GAC/B,OAAOkyB,0BAA0BlyB,IAGnCviB,EAAA+mB,oBAAA,SAAoCxE,GAClC,OAAOmyB,6BAA6BnyB,IAGtCviB,EAAAo2C,qBAAA,SAAqC7zB,GACnC,OAAOoyB,8BAA8BpyB,IAGvCviB,EAAAgnB,iBAAA,SAAiCzE,GAC/B,OAAOqyB,0BAA0BryB,IAGnCviB,EAAAinB,iBAAA,SAAiC1E,GAC/B,OAAOsyB,0BAA0BtyB,IAGnCviB,EAAA4iB,iBAAA,SAAiCL,GAC/B,OAAOuyB,0BAA0BvyB,IAGnCviB,EAAAq2C,iBAAA,SAAiC9zB,GAC/B,OAAO+zB,0BAA0B/zB,IAGnCviB,EAAAgjB,iBAAA,SAAiCT,GAC/B,OAAOg0B,0BAA0Bh0B,IAGnCviB,EAAA+iB,WAAA,SAA2BR,GACzB,OAAOi0B,uBAAuBj0B,IAGhCviB,EAAAmjB,iBAAA,SAAiCZ,GAC/B,OAAOqxB,EAAWmB,0BAA0BxyB,KAG9CviB,EAAAqjB,YAAA,SAA4Bd,GAC1B,OAAOmzB,qBAAqBnzB,IAG9BviB,EAAAwlB,cAAA,SAA8BjD,GAC5B,OAAOizB,uBAAuBjzB,IAGhCviB,EAAA2lB,eAAA,SAA+BpD,GAC7B,OAAOkzB,wBAAwBlzB,IAGjCviB,EAAAumB,WAAA,SAA2BhE,GACzB,OAAOgzB,oBAAoBhzB,IAG7BviB,EAAAy2C,cAAA,SAA8Bl0B,GAC5B,OAAO+yB,uBAAuB/yB,IAGhCviB,EAAAsnB,aAAA,SAA6B/E,GAC3B,OAAO2yB,sBAAsB3yB,IAG/BviB,EAAA02C,cAAA,SAA8Bn0B,GAC5B,OAAO4yB,uBAAuB5yB,IAGhCviB,EAAA22C,WAAA,SAA2Bp0B,GACzB,OAAOyyB,oBAAoBzyB,IAG7BviB,EAAAunB,aAAA,SAA6BhF,GAC3B,OAAO6yB,sBAAsB7yB,IAG/BviB,EAAA42C,cAAA,SAA8Br0B,GAC5B,OAAOs0B,uBAAuBt0B,IAGhCviB,EAAA82C,eAAA,SAA+Bv0B,GAC7B,OAAOw0B,wBAAwBx0B,IAGjCviB,EAAAg3C,YAAA,SAA4Bz0B,GAC1B,OAAO00B,qBAAqB10B,IAG9BviB,EAAAk3C,cAAA,SAA8B30B,GAC5B,OAAO40B,uBAAuB50B,IAGhCviB,EAAAynB,aAAA,SAA6BlF,GAC3B,OAAOqxB,EAAWwD,sBAAsB70B,KAG1CviB,EAAA0nB,mBAAA,SAAmCnF,GACjC,OAAO80B,6BAA6B90B,IAGtCviB,EAAA4nB,cAAA,SAA8BrF,EAAqBtI,GACjD,OAAOq9B,uBAAuB/0B,EAAMtI,IAGtCja,EAAAu3C,eAAA,SAA+Bh1B,GAC7B,OAAOi1B,wBAAwBj1B,IAGjCviB,EAAA8nB,UAAA,SAA0BvF,GACxB,OAAOk1B,qBAAqBl1B,IAG9BviB,EAAA+nB,WAAA,SAA2BxF,GACzB,OAAOm1B,sBAAsBn1B,IAG/BviB,EAAA23C,YAAA,SAA4Bp1B,GAC1B,OAAOqxB,EAAWgE,qBAAqBr1B,KAGzCviB,EAAA63C,YAAA,SAA4Bt1B,GAC1B,OAAOu1B,qBAAqBv1B,IAG9BviB,EAAA+3C,aAAA,SAA6Bx1B,GAC3B,OAAOqxB,EAAWoE,sBAAsBz1B,KAG1CviB,EAAAi4C,kBAAA,SAAkC11B,GAChC,OAAO21B,2BAA2B31B,IAGpCviB,EAAAioB,cAAA,SAA8B1F,GAC5B,OAAO41B,yBAAyB51B,IAGlCviB,EAAAkoB,cAAA,SAA8B3F,GAC5B,OAAO61B,0BAA0B71B,IAGnCviB,EAAAq4C,mBAAA,SAAmC91B,GACjC,OAAO+1B,4BAA4B/1B,IAGrCviB,EAAAu4C,aAAA,SAA6Bh2B,GAC3B,OAAOi2B,sBAAsBj2B,IAG/BviB,EAAAy4C,eAAA,SAA+Bl2B,GAC7B,OAAOm2B,wBAAwBn2B,IAGjCviB,EAAAooB,cAAA,SAA8B7F,GAC5B,OAAOqxB,EAAW+E,uBAAuBp2B,KAG3CviB,EAAA44C,UAAA,SAA0Br2B,GACxB,OAAOs2B,mBAAmBt2B,IAG5BviB,EAAA84C,oBAAA,SAAoCv2B,GAClC,OAAOw2B,4BAA4Bx2B,IAGrCviB,EAAAg5C,eAAA,SAA+Bz2B,EAAqBtI,GAClD,OAAOg/B,wBAAwB12B,EAAMtI,IAGvCja,EAAAk5C,YAAA,SAA4B32B,GAC1B,OAAOqxB,EAAWuF,4BAA4B52B,KAKhDviB,EAAAo5C,gBAAA,SAAgCrI,GAC9B,OAAO2B,yBAAyB3B,IAGlC/wC,EAAAq5C,gBAAA,SAAgCtI,GAC9B,OAAO6C,EAAW0F,yBAAyBvI,KAG7C/wC,EAAAu5C,sBAAA,SAAsCxI,GACpC,OAAOyI,8BAA8BzI,IAGvC/wC,EAAAy5C,qBAAA,SAAqC1I,EAAmB92B,GACtD,OAAOy/B,0BAA0B3I,EAAM92B,IAGzCja,EAAA25C,sBAAA,SAAsC5I,GACpC,OAAO6I,2BAA2B7I,IAGpC,IAAAmD,EAAA,WAYE,SAAAA,KAoCF,OA3CSA,EAAAjyC,OAAP,SAAchC,GACZ,IAAI45C,EAAW,IAAI3F,EAGnB,OAFA2F,EAAS55C,OAASA,EAClB45C,EAAS/+B,IAAMg/B,gBAAgB75C,EAAO6a,KAC/B++B,GAKT3F,EAAA3xC,UAAAw3C,SAAA,SAAS3f,GACP,OAAO4f,kBAAkB15C,KAAKwa,IAAKsf,IAGrC8Z,EAAA3xC,UAAA03C,UAAA,SACEC,EACAC,EACA5rB,EACA6L,QADA,IAAA7L,MAAA,QACA,IAAA6L,MAAA,GAEAggB,mBAAmBF,EAAMC,EAAI5rB,EAAW6L,IAG1C8Z,EAAA3xC,UAAA83C,mBAAA,SAAmBjgB,EAAqB7L,GACtC,OAAO+rB,4BAA4Bh6C,KAAKwa,IAAKsf,EAAM7L,IAGrD2lB,EAAA3xC,UAAAg4C,mBAAA,SACEL,EACAC,EACAK,EACApgB,QAAA,IAAAA,MAAA,GAEA,IAAI+M,EAAOQ,EAAc6S,GACzB,IACEC,4BAA4BP,EAAMC,EAAIhT,EAAMqT,EAAQ92C,OAAQ02B,WAE5D4M,OAAOxmB,KAAK2mB,KAIhB+M,EAAA3xC,UAAAm4C,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0Bv6C,KAAKwa,IAAK6/B,EAAOC,IAEtD1G,EAhDA,GA4FA,SAAS9M,EAAa0T,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIp3C,OAChBqmC,EAAM/C,OAAOC,SAAS8T,GACtBC,EAAMjR,EACDppC,EAAI,EAAGA,EAAIo6C,IAAap6C,EAC/Bs6C,MAAUD,IAAOF,EAAIn6C,IAEvB,OAAOopC,EAGT,SAASpC,EAAcuT,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAInR,EAAM/C,OAAOC,SAASiU,EAAKx3C,QAAU,GACrCs3C,EAAMjR,EACDppC,EAAI,EAAGwH,EAAI+yC,EAAKx3C,OAAQ/C,EAAIwH,IAAKxH,EAAG,CAC3C,IAAIw6C,EAAMD,EAAKv6C,GAEfs6C,MAAUD,EAAyB,IAAdG,GACrBF,MAAUD,EAAM,EAAKG,GAAS,EAAK,KACnCF,MAAUD,EAAM,EAAKG,GAAQ,GAAM,KACnCF,MAAUD,EAAM,EAAKG,IAAQ,IAC7BH,GAAO,EAET,OAAOjR,EAGT,SAASX,EAAcgS,GACrB,OAAOzT,EAAcyT,GA2BvB,SAAS1T,EAAY3uB,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAIgxB,EAAM/C,OAAOC,SA1BnB,SAA0BluB,GAExB,IADA,IAAIoiB,EAAM,EACDx6B,EAAI,EAAGwH,EAAI4Q,EAAIrV,OAAQ/C,EAAIwH,IAAKxH,EAAG,CAC1C,IAAI06C,EAAItiC,EAAIjV,WAAWnD,GACnB06C,GAAK,OAAUA,GAAK,OAAU16C,EAAI,EAAIwH,IACxCkzC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBtiC,EAAIjV,aAAanD,IAEpD06C,GAAK,MACLlgB,EAEFA,GADSkgB,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOlgB,EAKmBmgB,CAAiBviC,GAAO,GAE9CiiC,EAAMjR,EACDppC,EAAI,EAAGwH,EAAI4Q,EAAIrV,OAAQ/C,EAAIwH,IAAKxH,EAAG,CAC1C,IAAI06C,EAAItiC,EAAIjV,WAAWnD,GACnB06C,GAAK,OAAUA,GAAK,OAAU16C,EAAI,EAAIwH,IACxCkzC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBtiC,EAAIjV,aAAanD,IAEpD06C,GAAK,IACPJ,MAAUD,IAAOK,GACRA,GAAK,MACdJ,MAAUD,IAAQ,IAASK,IAAM,GACjCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,OACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,SACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,UACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,KAE3BJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAI/B,OADAJ,MAAUD,EAAK,GACRjR,EAGT,SAASqJ,EAAQrJ,GACf,OACG2J,KAAS3J,GACT2J,KAAS3J,EAAM,IAAO,EACtB2J,KAAS3J,EAAM,IAAM,GACrB2J,KAAS3J,EAAM,IAAM,GAY1B,SAAgB6J,EAAW7J,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEIwR,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIxxC,MAIPmxC,EAAK7H,KAAS3J,MACR,IAALwR,GAINC,EAAuB,GAAlB9H,KAAS3J,KACK,MAAT,IAALwR,IAILE,EAAuB,GAAlB/H,KAAS3J,KACK,MAAT,IAALwR,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBhI,KAAS3J,KACK,MAAT,IAALwR,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBjI,KAAS3J,KAEZwR,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBjI,KAAS3J,OAKpB6R,EAAInpC,KAAK8oC,IApBPK,EAAInpC,MAAY,GAAL8oC,IAAY,EAAKC,IAL5BI,EAAInpC,KAAK8oC,GAmCb,OAAOM,OAAOC,eAAeF,GA1PlB57C,EAAAk0C,WA+Mbl0C,EAAA4zC,aA+CA,IAAAL,EAAA,WAKA,OALA,gBAAavzC,EAAAuzC,eAQbvzC,EAAA+7C,yBAAA,SAAgBA,EAAyBx5B,GAEvC,OAAQkwB,2BAA2BlwB,IACjC,OACA,OACA,OACA,OAAqB,OAAO,EAE9B,OAAQiyB,yBAAyBjyB,IAC/B,KAAKG,EAAa2F,YAClB,KAAK3F,EAAas5B,OAAQ,OAAO,EACjC,KAAKt5B,EAAau5B,MAAO,OAA2C,GAApC/D,2BAA2B31B,GAC3D,KAAKG,EAAa8E,MAChB,IAAK4vB,sBAAsB70B,GAAO,CAChC,IAAI25B,EAAc7E,6BAA6B90B,GAC/C,OAAO25B,EAAc,GAAKH,EAAyBzE,uBAAuB/0B,EAAM25B,EAAc,KAIpG,OAAO,kBCxkDT,IAAAC,EAGAA,EAAA,WACA,OAAA77C,KADA,GAIA,IAEA67C,KAAA7hC,SAAA,cAAAA,KAAA,EAAA8hC,MAAA,QACC,MAAAC,GAED,iBAAAC,SAAAH,EAAAG,QAOAr8C,EAAAD,QAAAm8C,iFCdA,IAAAI,EAAA97C,EAAA,IAcA,SAAkB+7C,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAxCF,CAAkBx8C,EAAAw8C,WAAAx8C,EAAAw8C,cA4ClB,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBArBF,CAAkBz8C,EAAAy8C,YAAAz8C,EAAAy8C,eAyBlB,IAAA9zC,EAAA,WAoBE,SAAAA,EAAYqC,EAAgB4N,EAAkBoN,GAHtC1lB,KAAAo8C,mBAAkC,KAIxCp8C,KAAK0K,KAAOA,EACZ1K,KAAKsY,MAAQA,EACbtY,KAAK0lB,KAAOA,EACZ1lB,KAAK6P,SAAgBwsC,KAAe32B,EAAO,GAC3C1lB,KAAKs8C,eAAiB,KACtBt8C,KAAK2P,mBAAqB,KAC1B3P,KAAKu8C,gBAAkBv8C,KAuW3B,OAnWEe,OAAAC,eAAIqH,EAAApG,UAAA,eAAJ,WACE,OAAQjC,KAAK0K,MACX,OAAkB,OAAOrC,EAAKC,GAC9B,OAAmB,OAAOD,EAAKE,IAC/B,QACA,OAAmB,OAAOF,EAAKG,IAC/B,QACA,OAAmB,OAAOH,EAAKI,IAC/B,OAAqB,OAAoB,IAAbzI,KAAK0lB,KAAard,EAAKm0C,QAAUn0C,EAAKo0C,QAClE,OAAkB,OAAOp0C,EAAKM,GAC9B,OAAmB,OAAON,EAAKO,IAC/B,OAAmB,OAAOP,EAAKQ,IAC/B,OAAmB,OAAOR,EAAKS,IAC/B,OAAqB,OAAoB,IAAb9I,KAAK0lB,KAAard,EAAKq0C,QAAUr0C,EAAKs0C,QAClE,QACA,QAAS,OAAOt0C,EAAKG,sCAKzBH,EAAApG,UAAA26C,UAAA,SAAUvkC,GACR,GAAIA,EAAQtR,MAAO,CACjB,IAAIu1C,EAAiBt8C,KAAKs8C,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAejrC,aAAa4qC,EAAAt2C,eAAekM,WAEhF,OAAO,GAITxJ,EAAApG,UAAA46C,yBAAA,SAAyBC,GACvB,OAAOA,EAAWp3B,KAAO1lB,KAAK0lB,MAIhCrd,EAAApG,UAAAsjB,wBAAA,SAAwBu3B,GACtB,IAAIp3B,EAAO1lB,KAAK+P,GAAE,GAAuB/P,KAAK0lB,KAAO1lB,KAAK0lB,KAAO,EACjE,OAAO,IAAQo3B,EAAWp3B,KAAOA,GAInCrd,EAAApG,UAAA8N,GAAA,SAAGuI,GAA0B,OAAQtY,KAAKsY,MAAQA,IAAUA,GAE5DjQ,EAAApG,UAAAiN,MAAA,SAAMoJ,GAA0B,OAA+B,IAAvBtY,KAAKsY,MAAQA,IAGrDjQ,EAAApG,UAAAoc,QAAA,SAAQ0+B,GACN55C,OAAgB,GAATnD,KAAK0K,OAA2B1K,KAAKs8C,gBAC5C,IAAItJ,EAAM,IAAI3qC,EAAKrI,KAAK0K,MAAmB,IAAb1K,KAAKsY,MAAwB,IAAwBtY,KAAK0lB,MAExF,OADAstB,EAAIsJ,eAAiBS,EACd/J,GAIT3qC,EAAApG,UAAAyb,WAAA,SAAWjO,GACTtM,OAAgB,GAATnD,KAAK0K,OAAyB1K,KAAK2P,oBAC1C,IAAIqjC,EAAM,IAAI3qC,EAAKrI,KAAK0K,MAAmB,IAAb1K,KAAKsY,MAAwB,IAAwBtY,KAAK0lB,MAExF,OADAstB,EAAIrjC,mBAAqBF,EAClBujC,GAIT3qC,EAAApG,UAAA+6C,WAAA,WASE,OARA75C,OAAOnD,KAAK+P,GAAE,MACT/P,KAAKo8C,qBACRj5C,QAAQnD,KAAK+P,GAAE,MACf/P,KAAKo8C,mBAAqB,IAAI/zC,EAAKrI,KAAK0K,KAAgB,IAAV1K,KAAKsY,MAA4BtY,KAAK0lB,MACpF1lB,KAAKo8C,mBAAmBG,gBAAkBv8C,KAC1CA,KAAKo8C,mBAAmBE,eAAiBt8C,KAAKs8C,eAC9Ct8C,KAAKo8C,mBAAmBzsC,mBAAqB3P,KAAK2P,oBAE7C3P,KAAKo8C,oBAId/zC,EAAApG,UAAAwc,eAAA,SAAeC,EAAcu+B,GAC3B,IAAIC,EACAC,EACA59B,EACA69B,EACJ,QAL2B,IAAAH,OAAA,GAKvBj9C,KAAK+P,GAAE,MACT,GAAI2O,EAAO3O,GAAE,QACN/P,KAAK+P,GAAE,MAAwB2O,EAAO3O,GAAE,MAC3C,GAAImtC,EAAel9C,KAAKs8C,gBACtB,GAAIa,EAAcz+B,EAAO49B,eACvB,OAAOY,EAAaz+B,eAAe0+B,QAEhC,IAAI59B,EAAkBvf,KAAK2P,sBAC5BytC,EAAiB1+B,EAAO/O,oBAC1B,OAAO4P,EAAgBd,eAAe2+B,QAKzC,IAAK1+B,EAAO3O,GAAE,KACnB,GAAI/P,KAAK+P,GAAE,GACT,GAAI2O,EAAO3O,GAAE,IACX,IACGktC,GACDj9C,MAAQqI,EAAKW,MACbhJ,KAAK+P,GAAE,IAAsB2O,EAAO3O,GAAE,GAEtC,OAAO/P,KAAK0lB,MAAQhH,EAAOgH,SAExB,IAAe,IAAXhH,EAAOhU,KAChB,OAAO1K,KAAK0lB,MAAQ,GACf,GAAe,IAAXhH,EAAOhU,KAChB,OAAO1K,KAAK0lB,MAAQ,QAEjB,GAAI1lB,KAAK+P,GAAE,IACZ2O,EAAO3O,GAAE,GACX,OAAO/P,KAAK0lB,MAAQhH,EAAOgH,KAIjC,OAAO,GAIFrd,EAAAg1C,iBAAP,SAAwB57B,EAAYC,EAAa47B,GAC/C,OAAI57B,EAAMjD,eAAegD,EAAM67B,GAA+B77B,EACrDA,EAAKhD,eAAeiD,EAAO47B,GAA+B57B,EAC5D,MAITrZ,EAAApG,UAAAgP,SAAA,SAASssC,GACP,QADO,IAAAA,OAAA,IACFA,GAAYv9C,KAAK+P,GAAE,KAAuB,CAC7C,IAAIusC,EAAiBt8C,KAAKs8C,eAC1B,GAAIA,EACF,OAAOt8C,KAAK+P,GAAE,KACVusC,EAAerrC,WAAa,UAC5BqrC,EAAerrC,WAErB,IAAItB,EAAqB3P,KAAK2P,mBAC9B,GAAIA,EACF,OAAO3P,KAAK+P,GAAE,KACV,IAAMJ,EAAmBsB,UAAS,GAAQ,WAC1CtB,EAAmBsB,UAAS,GAElC9N,QAAO,GAET,OAAQnD,KAAK0K,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAASvH,QAAO,GAChB,QAAoB,MAAO,SAO/BkF,EAAApG,UAAAsa,aAAA,WACE,OAAQvc,KAAK0K,MACX,QAAS,SACT,OACA,OAAmB,SACnB,OACA,OAAqB,OAAoB,IAAb1K,KAAK0lB,KAAY,EAAiB,EAC9D,QAAmB,SACnB,QAAmB,SACnB,QAAqB,WAKzBrd,EAAApG,UAAAu7C,aAAA,SAAa79C,GACX,OAAQK,KAAK0K,MACX,QAAoBvH,QAAO,GAC3B,QAAS,OAAOxD,EAAOgoC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAb3nC,KAAK0lB,KAAY,OAAO/lB,EAAOgoC,UAAU,GAClE,OACA,OAAmB,OAAOhoC,EAAOooC,UAAU,GAC3C,QAAmB,OAAOpoC,EAAOwoC,UAAU,GAC3C,QAAmB,OAAOxoC,EAAO0oC,UAAU,KAK/ChgC,EAAApG,UAAAw7C,YAAA,SAAY99C,GACV,OAAQK,KAAK0K,MACX,QAAoBvH,QAAO,GAC3B,QAAS,OAAOxD,EAAOgoC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAb3nC,KAAK0lB,KAAY,OAAO/lB,EAAOgoC,UAAU,GAClE,OACA,OAAmB,OAAOhoC,EAAOooC,UAAU,GAC3C,QAAmB,OAAOpoC,EAAOwoC,UAAU,GAC3C,QAAmB,OAAOxoC,EAAO0oC,UAAU,KAK/ChgC,EAAApG,UAAAy7C,eAAA,SAAe/9C,GACb,OAAQK,KAAK0K,MACX,QAAoBvH,QAAO,GAC3B,QAAS,OAAOxD,EAAOgoC,WAAW,GAClC,OACA,OAAqB,GAAiB,IAAb3nC,KAAK0lB,KAAY,OAAO/lB,EAAOgoC,WAAW,GACnE,OACA,OAAmB,OAAOhoC,EAAOooC,WAAW,GAAI,GAChD,QAAmB,OAAOpoC,EAAOwoC,WAAW,GAC5C,QAAmB,OAAOxoC,EAAO0oC,WAAW,KAKhDhgC,EAAApG,UAAAwb,kBAAA,WACE,OAAQzd,KAAK0K,MACX,QAAS,MAAO,IAChB,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAb1K,KAAK0lB,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,MAOfrd,EAAAC,GAAY,IAAID,EAAI,EAClC,IAGmB,GAILA,EAAAE,IAAY,IAAIF,EAAI,EAClC,IAGkB,IAIJA,EAAAG,IAAY,IAAIH,EAAI,EAClC,IAEkB,IAIJA,EAAAI,IAAY,IAAIJ,EAAI,EAClC,IAGkB,IAIJA,EAAAo0C,QAAgB,IAAIp0C,EAAI,EACtC,IAGkB,IAIJA,EAAAm0C,QAAgB,IAAIn0C,EAAI,EACtC,IAIkB,IAIJA,EAAAM,GAAW,IAAIN,EAAI,EACjC,IAGmB,GAILA,EAAAO,IAAY,IAAIP,EAAI,EAClC,IAGkB,IAIJA,EAAAQ,IAAY,IAAIR,EAAI,EAClC,IAEkB,IAIJA,EAAAS,IAAY,IAAIT,EAAI,EAClC,IAGkB,IAIJA,EAAAs0C,QAAgB,IAAIt0C,EAAI,EACtC,IAGkB,IAIJA,EAAAq0C,QAAgB,IAAIr0C,EAAI,EACtC,IAIkB,IAIJA,EAAAW,KAAa,IAAIX,EAAI,GACnC,IAGmB,GAILA,EAAAY,IAAY,IAAIZ,EAAI,GAClC,IAEkB,IAIJA,EAAAa,IAAY,IAAIb,EAAI,GAClC,IAGkB,IAIJA,EAAAc,KAAa,IAAId,EAAI,KAAgC,GACvEA,EAlYA,GAAa3I,EAAA2I,OAqYb3I,EAAAi+C,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAMx6C,OACjB4vC,EAAM,IAAIlpC,MAAkB+zC,GACvBx9C,EAAI,EAAGA,EAAIw9C,IAAYx9C,EAAG2yC,EAAI3yC,GAAKu9C,EAAMv9C,GAAGkc,eACrD,OAAOy2B,GAITtzC,EAAAo+C,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAMx6C,OACrB,IAAKy6C,EAAU,MAAO,GAEtB,IADA,IAAIljB,EAAK,IAAI7wB,MAAc+zC,GAClBx9C,EAAI,EAAGA,EAAIw9C,IAAYx9C,EAAGs6B,EAAGt6B,GAAKu9C,EAAMv9C,GAAG4Q,WACpD,OAAO0pB,EAAGzoB,KAAK,MAIjB,IAAA6rC,EAAA,WAoBE,SAAAA,EACEruC,EACAE,EACA2L,QAFA,IAAA7L,MAAA,WACA,IAAAE,MAAA,WACA,IAAA2L,MAAA,MARFvb,KAAAg+C,qBAA8C,KAU5Ch+C,KAAK0P,eAAiBA,MACtB1P,KAAKi+C,eAAiB,KACtBj+C,KAAKk+C,mBAAqB,EAC1Bl+C,KAAK4P,WAAaA,GAA0BvH,EAAKc,KACjDnJ,KAAKub,SAAWA,EAChBvb,KAAKm+C,SAAU,EACfn+C,KAAK+O,KAAO1G,EAAKQ,IAAI6U,WAAW1d,MA8FpC,OA1FE+9C,EAAA97C,UAAA+Z,iBAAA,SAAiBrC,GACf,IAAIskC,EAAiBj+C,KAAKi+C,eAC1B,OAAOA,GAAkBA,EAAe76C,OAASuW,EAC7CskC,EAAetkC,GACfykC,EAAwBzkC,IAI9BokC,EAAA97C,UAAAwc,eAAA,SAAeC,GAIb,IAAI2/B,EAAer+C,KAAKub,SACpB+iC,EAAiB5/B,EAAOnD,SAC5B,GAAI8iC,GACF,IAAMC,IAAkBD,EAAa5/B,eAAe6/B,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAIt+C,KAAKm+C,SAAWz/B,EAAOy/B,QAAS,OAAO,EAG3C,IAAII,EAAqBv+C,KAAK0P,eAC1B8uC,EAAuB9/B,EAAOhP,eAC9B+uC,EAAgBF,EAAmBn7C,OACvC,GAAIq7C,GAAiBD,EAAqBp7C,OAAQ,OAAO,EACzD,IAAK,IAAI/C,EAAI,EAAGA,EAAIo+C,IAAiBp+C,EAAG,CACtC,IAAIq+C,EAAoBH,EAAmBl+C,GACvCs+C,EAAsBH,EAAqBn+C,GAC/C,IAAKq+C,EAAkBjgC,eAAekgC,GAAsB,OAAO,EAIrE,IAAIC,EAAiB5+C,KAAK4P,WACtBivC,EAAmBngC,EAAO9O,WAC9B,OAAOgvC,GAAkBC,GAAoBD,EAAengC,eAAeogC,IAItEd,EAAAe,oBAAP,SAA2BpvC,EAA+BE,EAAkB2L,QAAA,IAAAA,MAAA,MAC1E,IAAIof,KAEJ,GADIpf,GAAUof,EAAGxoB,KAAKoJ,EAASkC,qBAC3B/N,EACF,IAAK,IAAIrP,EAAI,EAAGwH,EAAI6H,EAAetM,OAAQ/C,EAAIwH,IAAKxH,EAAGs6B,EAAGxoB,KAAKzC,EAAerP,GAAGod,qBAGnF,OADAkd,EAAGxoB,KAAKvC,EAAW6N,qBACZkd,EAAGzoB,KAAK,KAIjB6rC,EAAA97C,UAAAwb,kBAAA,WACE,OAAOsgC,EAAUe,oBAAoB9+C,KAAK0P,eAAgB1P,KAAK4P,WAAY5P,KAAKub,WAIlFwiC,EAAA97C,UAAAgP,SAAA,SAAS8tC,QAAA,IAAAA,OAAA,GACP,IAAIpkB,EAAK,IAAI7wB,MACb6wB,EAAGxoB,KAAK,KACR,IAAIwH,EAAQ,EACR4B,EAAWvb,KAAKub,SAChBA,GACEwjC,IACFpkB,EAAGxoB,KAAK,UACRwoB,EAAGxoB,KAAKoJ,EAAStK,YACjB0I,EAAQ,GAGZ,IAAIkQ,EAAa7pB,KAAK0P,eAClB+uC,EAAgB50B,EAAWzmB,OAC/B,GAAIq7C,EAKF,IAJA,IAAInxB,EAAQttB,KAAKi+C,eACb5R,EAAW/e,EAAQA,EAAMlqB,OAAS,EAClC47C,EAAgBh/C,KAAKk+C,mBACrBe,EAAYj/C,KAAKm+C,QAAUM,EAAgB,GAAK,EAC3Cp+C,EAAI,EAAGA,EAAIo+C,IAAiBp+C,IAAKsZ,EACpCA,GAAOghB,EAAGxoB,KAAK,MACf9R,GAAK4+C,GAAWtkB,EAAGxoB,KAAK,OACxB9R,EAAIgsC,EAAU1R,EAAGxoB,KAAgBmb,EAAOjtB,IACvCs6B,EAAGxoB,KAAKisC,EAAwB/9C,IACjCA,GAAK2+C,GAAiB3+C,GAAK4+C,EAAWtkB,EAAGxoB,KAAK,OAC7CwoB,EAAGxoB,KAAK,MACbwoB,EAAGxoB,KAAK0X,EAAWxpB,GAAG4Q,YAK1B,OAFA0pB,EAAGxoB,KAAK,SACRwoB,EAAGxoB,KAAKnS,KAAK4P,WAAWqB,YACjB0pB,EAAGzoB,KAAK,KAEnB6rC,EA7HA,GAAar+C,EAAAq+C,YAkIb,IAAImB,EAA+C,KAGnD,SAAgBd,EAAwBzkC,GACjCulC,IAA6BA,MAClC,IAAK,IAAI7+C,EAAI6+C,EAA4B97C,OAAQ/C,GAAKsZ,IAAStZ,EAC7D6+C,EAA4B/sC,KAAK,OAAS9R,EAAE4Q,SAAS,KAEvD,OAAOiuC,EAA4BvlC,EAAQ,GAL7Cja,EAAA0+C,8cC1mBA,IAuBYl2B,EAwIAi3B,EA/JZ58C,EAAApC,EAAA,GAMAsC,EAAAtC,EAAA,GAKAgoB,EAAAhoB,EAAA,GA0JA,SAAgBi/C,EAAiBxyC,GAE/B,OADAzJ,OAAOyJ,EAAKxJ,QACJwJ,EAAKpJ,WAAW,IACtB,QACE,OAAQoJ,GACN,IAAK,WAAY,OAAOsb,EAAMxU,SAC9B,IAAK,KAAM,OAAOwU,EAAMm3B,GACxB,IAAK,QAAS,OAAOn3B,EAAMo3B,MAC3B,IAAK,QAAS,OAAOp3B,EAAMq3B,MAE7B,MAEF,QACE,OAAQ3yC,GACN,IAAK,QAAS,OAAOsb,EAAMqP,MAE7B,MAEF,QACE,OAAQ3qB,GACN,IAAK,OAAQ,OAAOsb,EAAMs3B,KAC1B,IAAK,QAAS,OAAOt3B,EAAMu3B,MAC3B,IAAK,QAAS,OAAOv3B,EAAM9M,MAC3B,IAAK,WAAY,OAAO8M,EAAMsP,SAC9B,IAAK,QAAS,OAAOtP,EAAMhQ,MAC3B,IAAK,cAAe,OAAOgQ,EAAMnU,YAEnC,MAEF,SACE,OAAQnH,GACN,IAAK,WAAY,OAAOsb,EAAMw3B,SAC9B,IAAK,UAAW,OAAOx3B,EAAMy3B,QAC7B,IAAK,UAAW,OAAOz3B,EAAM03B,QAC7B,IAAK,SAAU,OAAO13B,EAAM23B,OAC5B,IAAK,KAAM,OAAO33B,EAAMuP,GAE1B,MAEF,SACE,OAAQ7qB,GACN,IAAK,OAAQ,OAAOsb,EAAM43B,KAC1B,IAAK,OAAQ,OAAO53B,EAAMnP,KAC1B,IAAK,SAAU,OAAOmP,EAAMld,OAC5B,IAAK,UAAW,OAAOkd,EAAM63B,QAE/B,MAEF,SACE,OAAQnzC,GACN,IAAK,QAAS,OAAOsb,EAAMK,MAC3B,IAAK,UAAW,OAAOL,EAAM83B,QAC7B,IAAK,MAAO,OAAO93B,EAAM8P,IACzB,IAAK,OAAQ,OAAO9P,EAAM+3B,KAC1B,IAAK,WAAY,OAAO/3B,EAAMhO,SAEhC,MAEF,SACE,OAAQtN,GACN,IAAK,MAAO,OAAOsb,EAAMpV,IAE3B,MAEF,SACE,OAAQlG,GACN,IAAK,KAAM,OAAOsb,EAAM+P,GACxB,IAAK,aAAc,OAAO/P,EAAMg4B,WAChC,IAAK,SAAU,OAAOh4B,EAAM9c,OAC5B,IAAK,KAAM,OAAO8c,EAAMi4B,GACxB,IAAK,aAAc,OAAOj4B,EAAMsN,WAChC,IAAK,YAAa,OAAOtN,EAAM9I,UAC/B,IAAK,KAAM,OAAO8I,EAAMk4B,GAE1B,MAEF,SACE,OAAQxzC,GACN,IAAK,QAAS,OAAOsb,EAAMm4B,MAE7B,MAEF,SACE,OAAQzzC,GACN,IAAK,MAAO,OAAOsb,EAAMo4B,IAE3B,MAEF,SACE,OAAQ1zC,GACN,IAAK,SAAU,OAAOsb,EAAMq4B,OAE9B,MAEF,SACE,OAAQ3zC,GACN,IAAK,YAAa,OAAOsb,EAAMpP,UAC/B,IAAK,MAAO,OAAOoP,EAAMwN,IACzB,IAAK,OAAQ,OAAOxN,EAAMG,KAE5B,MAEF,SACE,OAAQzb,GACN,IAAK,KAAM,OAAOsb,EAAMs4B,GAE1B,MAEF,SACE,OAAQ5zC,GACN,IAAK,UAAW,OAAOsb,EAAMu4B,QAC7B,IAAK,UAAW,OAAOv4B,EAAMw4B,QAC7B,IAAK,YAAa,OAAOx4B,EAAMy4B,UAC/B,IAAK,SAAU,OAAOz4B,EAAM04B,OAE9B,MAEF,SACE,OAAQh0C,GACN,IAAK,WAAY,OAAOsb,EAAM1U,SAC9B,IAAK,SAAU,OAAO0U,EAAMiQ,OAE9B,MAEF,SACE,OAAQvrB,GACN,IAAK,MAAO,OAAOsb,EAAMnV,IACzB,IAAK,SAAU,OAAOmV,EAAM7U,OAC5B,IAAK,QAAS,OAAO6U,EAAM4N,MAC3B,IAAK,SAAU,OAAO5N,EAAMmQ,OAE9B,MAEF,SACE,OAAQzrB,GACN,IAAK,OAAQ,OAAOsb,EAAM6N,KAC1B,IAAK,QAAS,OAAO7N,EAAMoQ,MAC3B,IAAK,OAAQ,OAAOpQ,EAAMI,KAC1B,IAAK,MAAO,OAAOJ,EAAMqQ,IACzB,IAAK,OAAQ,OAAOrQ,EAAM8L,KAC1B,IAAK,SAAU,OAAO9L,EAAM24B,OAE9B,MAEF,SACE,OAAQj0C,GACN,IAAK,MAAO,OAAOsb,EAAM44B,IACzB,IAAK,OAAQ,OAAO54B,EAAMuQ,KAE5B,MAEF,SACE,OAAQ7rB,GACN,IAAK,QAAS,OAAOsb,EAAMwQ,MAC3B,IAAK,OAAQ,OAAOxQ,EAAM64B,KAE5B,MAEF,SACE,OAAQn0C,GACN,IAAK,QAAS,OAAOsb,EAAM84B,OAKjC,OAAO94B,EAAMziB,QAGf,SAAgBw7C,EAAsBC,GACpC,OAAQA,GACN,KAAKh5B,EAAMxU,SACX,KAAKwU,EAAMm3B,GACX,KAAKn3B,EAAMnU,YACX,KAAKmU,EAAMy3B,QACX,KAAKz3B,EAAM23B,OACX,KAAK33B,EAAM+3B,KACX,KAAK/3B,EAAM8P,IACX,KAAK9P,EAAMpV,IACX,KAAKoV,EAAMk4B,GACX,KAAKl4B,EAAMm4B,MACX,KAAKn4B,EAAMq4B,OACX,KAAKr4B,EAAMpP,UACX,KAAKoP,EAAM1U,SACX,KAAK0U,EAAMnV,IACX,KAAKmV,EAAM8L,KACX,KAAK9L,EAAMuQ,KAAM,OAAO,EACxB,QAAS,OAAO,IAxUpB,SAAYvQ,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAAxoB,EAAAwoB,QAAAxoB,EAAAwoB,WAwIZ,SAAYi3B,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAAz/C,EAAAy/C,qBAAAz/C,EAAAy/C,wBAMZz/C,EAAA0/C,mBAwKA1/C,EAAAuhD,wBAsBAvhD,EAAAyhD,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAKh5B,EAAM23B,OAAQ,MAAO,SAC1B,KAAK33B,EAAMi4B,GAAI,MAAO,KACtB,KAAKj4B,EAAMsN,WAAY,MAAO,aAC9B,KAAKtN,EAAMwN,IAAK,MAAO,MACvB,KAAKxN,EAAM24B,OAAQ,MAAO,SAC1B,KAAK34B,EAAMuQ,KAAM,MAAO,OACxB,KAAKvQ,EAAM84B,MAAO,MAAO,QACzB,KAAK94B,EAAMk5B,YAAa,MAAO,MAC/B,KAAKl5B,EAAMoN,MAAO,MAAO,IACzB,KAAKpN,EAAMm5B,SAAU,MAAO,IAC5B,KAAKn5B,EAAMo5B,YAAa,MAAO,IAC/B,KAAKp5B,EAAMq5B,gBAAiB,MAAO,KACnC,KAAKr5B,EAAMs5B,mBAAoB,MAAO,KACtC,KAAKt5B,EAAMu5B,cAAe,MAAO,KACjC,KAAKv5B,EAAMw5B,mBAAoB,MAAO,KACtC,KAAKx5B,EAAMy5B,qBAAsB,MAAO,MACxC,KAAKz5B,EAAM05B,0BAA2B,MAAO,MAC7C,KAAK15B,EAAMljB,KAAM,MAAO,IACxB,KAAKkjB,EAAMhjB,MAAO,MAAO,IACzB,KAAKgjB,EAAM25B,kBAAmB,MAAO,KACrC,KAAK35B,EAAM45B,SAAU,MAAO,IAC5B,KAAK55B,EAAM65B,MAAO,MAAO,IACzB,KAAK75B,EAAM85B,QAAS,MAAO,IAC3B,KAAK95B,EAAM+5B,UAAW,MAAO,KAC7B,KAAK/5B,EAAMg6B,YAAa,MAAO,KAC/B,KAAKh6B,EAAMi6B,kBAAmB,MAAO,KACrC,KAAKj6B,EAAMk6B,wBAAyB,MAAO,KAC3C,KAAKl6B,EAAMm6B,oCAAqC,MAAO,MACvD,KAAKn6B,EAAMo6B,UAAW,MAAO,IAC7B,KAAKp6B,EAAMq6B,IAAK,MAAO,IACvB,KAAKr6B,EAAMs6B,MAAO,MAAO,IACzB,KAAKt6B,EAAMu6B,YAAa,MAAO,IAC/B,KAAKv6B,EAAMw6B,MAAO,MAAO,IACzB,KAAKx6B,EAAMy6B,oBAAqB,MAAO,KACvC,KAAKz6B,EAAM06B,QAAS,MAAO,KAC3B,KAAK16B,EAAM26B,OAAQ,MAAO,IAC1B,KAAK36B,EAAM46B,YAAa,MAAO,KAC/B,KAAK56B,EAAM66B,aAAc,MAAO,KAChC,KAAK76B,EAAM86B,gBAAiB,MAAO,KACnC,KAAK96B,EAAM+6B,yBAA0B,MAAO,MAC5C,KAAK/6B,EAAMg7B,aAAc,MAAO,KAChC,KAAKh7B,EAAMi7B,eAAgB,MAAO,KAClC,KAAKj7B,EAAMk7B,yBAA0B,MAAO,MAC5C,KAAKl7B,EAAMm7B,+BAAgC,MAAO,MAClD,KAAKn7B,EAAMo7B,2CAA4C,MAAO,OAC9D,KAAKp7B,EAAMq7B,iBAAkB,MAAO,KACpC,KAAKr7B,EAAMs7B,WAAY,MAAO,KAC9B,KAAKt7B,EAAMu7B,aAAc,MAAO,KAChC,QAEE,OADAtgD,QAAO,GACA,KAKb,IAAA8O,EAAA,WAUE,SAAAA,EAAYnK,EAAgBgzB,EAAYC,GA4CxC/6B,KAAAmd,aAAsB,EA3CpBnd,KAAK8H,OAASA,EACd9H,KAAK86B,MAAQA,EACb96B,KAAK+6B,IAAMA,EA0Cf,OAvCS9oB,EAAAC,KAAP,SAAYwxC,EAAUC,GACpB,GAAID,EAAE57C,QAAU67C,EAAE77C,OAAQ,MAAM,IAAI2G,MAAM,mBAC1C,OAAO,IAAIwD,EAAMyxC,EAAE57C,OACjB47C,EAAE5oB,MAAQ6oB,EAAE7oB,MAAQ4oB,EAAE5oB,MAAQ6oB,EAAE7oB,MAChC4oB,EAAE3oB,IAAM4oB,EAAE5oB,IAAM2oB,EAAE3oB,IAAM4oB,EAAE5oB,MAI9Bh6B,OAAAC,eAAIiR,EAAAhQ,UAAA,eAAJ,WACE,OAAO,IAAIgQ,EAAMjS,KAAK8H,OAAQ9H,KAAK86B,MAAO96B,KAAK86B,wCAEjD/5B,OAAAC,eAAIiR,EAAAhQ,UAAA,aAAJ,WACE,OAAO,IAAIgQ,EAAMjS,KAAK8H,OAAQ9H,KAAK+6B,IAAK/6B,KAAK+6B,sCAG/Ch6B,OAAAC,eAAIiR,EAAAhQ,UAAA,YAAJ,WAGE,IAFA,IAAI2K,EAAO5M,KAAK8H,OAAO8E,KACnByQ,EAAO,EACFsZ,EAAM32B,KAAK86B,MAAOnE,GAAO,IAAKA,EACb,IAApB/pB,EAAKpJ,WAAWmzB,IAA2BtZ,IAEjD,OAAOA,mCAGTtc,OAAAC,eAAIiR,EAAAhQ,UAAA,cAAJ,WAGE,IAFA,IAAI2K,EAAO5M,KAAK8H,OAAO8E,KACnB0Q,EAAS,EACJqZ,EAAM32B,KAAK86B,MAAQ,EAAGnE,GAAO,GACZ,IAApB/pB,EAAKpJ,WAAWmzB,KADqBA,IAEvCrZ,EAEJ,OAAOA,mCAGTrL,EAAAhQ,UAAAgP,SAAA,WACE,OAAOjR,KAAK8H,OAAO8E,KAAK8K,UAAU1X,KAAK86B,MAAO96B,KAAK+6B,MAIvD9oB,EAvDA,GAAavS,EAAAuS,QA+Db,IAAA2xC,EAAA,SAAA79C,GAgBE,SAAA69C,EAAY97C,EAAgB9B,QAAA,IAAAA,MAAA,MAA5B,IAAAC,EACEF,EAAAvF,KAAAR,KAAMgG,IAAYhG,KAdpBiG,EAAA80B,IAAW,EAEX90B,EAAA0wB,IAAW,EACX1wB,EAAAi7C,OAAgB,EAChBj7C,EAAA49C,SAAgB,EAEhB59C,EAAA69C,WAAoB,EACpB79C,EAAA89C,aAAoB,EACpB99C,EAAA+9C,oBAA2B,EAE3B/9C,EAAAg+C,UAAmC,KAKjCh+C,EAAK6B,OAASA,EACd7B,EAAK0wB,IAAM,EACX1wB,EAAK80B,IAAMjzB,EAAO8E,KAAKxJ,OACvB6C,EAAKD,YAAcA,GAA4B,IAAI8D,MAEnD,IAAI8C,EAAO9E,EAAO8E,KAWlB,GAPE3G,EAAK0wB,IAAM1wB,EAAK80B,KACS,OAAzBnuB,EAAKpJ,WAAWyC,EAAK0wB,QAEnB1wB,EAAK0wB,IAKP1wB,EAAK0wB,IAAM,EAAI1wB,EAAK80B,KACK,IAAzBnuB,EAAKpJ,WAAWyC,EAAK0wB,MACQ,IAA7B/pB,EAAKpJ,WAAWyC,EAAK0wB,IAAM,GAG3B,IADA1wB,EAAK0wB,KAAO,EAEV1wB,EAAK0wB,IAAM1wB,EAAK80B,KACS,IAAzBnuB,EAAKpJ,WAAWyC,EAAK0wB,QAEnB1wB,EAAK0wB,aA6hCf,OAzkC+BnvB,EAAAo8C,EAAA79C,GAkD7B69C,EAAA3hD,UAAA+K,KAAA,SAAKk3C,GAEH,YAFG,IAAAA,MAAyC/E,EAAmBS,SAC/D5/C,KAAK8jD,WAAa,EACX9jD,KAAKkhD,MAAQlhD,KAAKmkD,WAAWD,IAG9BN,EAAA3hD,UAAAkiD,WAAR,SACED,EACAE,QADA,IAAAF,MAAyC/E,EAAmBS,cAC5D,IAAAwE,MAAsB57C,IAAIqe,WAG1B,IADA,IAAIja,EAAO5M,KAAK8H,OAAO8E,KAChB5M,KAAK22B,IAAM32B,KAAK+6B,KAAK,CAC1B/6B,KAAK6jD,SAAW7jD,KAAK22B,IACrB,IAAIj2B,EAAIkM,EAAKpJ,WAAWxD,KAAK22B,KAC7B,OAAQj2B,GACN,QACE,OACIV,KAAK22B,IAAM32B,KAAK+6B,KACO,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,MACpB,MAGL,QACA,OACA,QACA,QACA,UACI32B,KAAK22B,IACP,MAEF,QAEE,QADE32B,KAAK22B,IAELytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,KACb,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IAELytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,KACb,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IACAzO,EAAM05B,2BAER15B,EAAMw5B,oBAERx5B,EAAMu6B,YAEf,QACA,QACA,QACE,OAAOv6B,EAAMm8B,cAEf,QAEE,QADErkD,KAAK22B,IAELytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,KACb,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IACAzO,EAAMi7B,gBAERj7B,EAAM85B,QAEf,QAEE,KADEhiD,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAMy6B,oBAEf,GAA6B,IAAzB/1C,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAMq7B,iBAGjB,OAAOr7B,EAAMo6B,UAEf,QAEE,QADEtiD,KAAK22B,IACAzO,EAAMo8B,UAEf,QAEE,QADEtkD,KAAK22B,IACAzO,EAAMq8B,WAEf,QAEE,KADEvkD,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAM86B,gBAEf,GAA6B,IAAzBp2C,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IAELytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,KACb,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IACAzO,EAAM+6B,0BAER/6B,EAAM25B,kBAGjB,OAAO35B,EAAM45B,SAEf,QAEE,KADE9hD,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAM+5B,UAEf,GAA6B,IAAzBr1C,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAM46B,YAGjB,OAAO56B,EAAMljB,KAEf,QAEE,QADEhF,KAAK22B,IACAzO,EAAMoN,MAEf,QAEE,KADEt1B,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAMg6B,YAEf,GAA6B,IAAzBt1C,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAM66B,aAGjB,OAAO76B,EAAMhjB,MAEf,QAEE,KADElF,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAAI5S,EAAAq8B,eAAe53C,EAAKpJ,WAAWxD,KAAK22B,MAEtC,QADE32B,KAAK22B,IACAzO,EAAMu8B,aAEf,GACEL,EAAiB,GAAKpkD,KAAK22B,IAAM,EAAI32B,KAAK+6B,KACjB,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,MACQ,IAA7B/pB,EAAKpJ,WAAWxD,KAAK22B,IAAM,GAG3B,OADA32B,KAAK22B,KAAO,EACLzO,EAAMk5B,YAGjB,OAAOl5B,EAAMw8B,IAEf,QACE,IAAIC,EAAkB3kD,KAAK22B,IAE3B,KADE32B,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAAwB,CAC/C,IAAInM,EAAc/nB,EAAAqyB,YAAY8vB,KAQ9B,IANE5kD,KAAK22B,IAAM,EAAI32B,KAAK+6B,KACS,IAA7BnuB,EAAKpJ,WAAWxD,KAAK22B,IAAM,OAEzB32B,KAAK22B,IACPnM,EAAc/nB,EAAAqyB,YAAY+vB,UAEnB7kD,KAAK22B,IAAM32B,KAAK+6B,KACvB,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAA2B,GAChD32B,KAAK22B,IACP,MAGA32B,KAAKikD,WACPjkD,KAAKikD,UACHz5B,EACA5d,EAAK8K,UAAUitC,EAAiB3kD,KAAK22B,KACrC32B,KAAKyM,MAAMk4C,EAAiB3kD,KAAK22B,MAGrC,MAEF,GAA6B,IAAzB/pB,EAAKpJ,WAAWxD,KAAK22B,KAA2B,CAElD,IADA,IAAImuB,GAAS,IACJ9kD,KAAK22B,IAAM32B,KAAK+6B,KAEvB,GACG,KAFHr6B,EAAIkM,EAAKpJ,WAAWxD,KAAK22B,OAGvB32B,KAAK22B,IAAM,EAAI32B,KAAK+6B,KACS,IAA7BnuB,EAAKpJ,WAAWxD,KAAK22B,IAAM,GAC3B,CACA32B,KAAK22B,KAAO,EACZmuB,GAAS,EACT,MAGCA,EAKM9kD,KAAKikD,WACdjkD,KAAKikD,UACHxhD,EAAAqyB,YAAYsB,MACZxpB,EAAK8K,UAAUitC,EAAiB3kD,KAAK22B,KACrC32B,KAAKyM,MAAMk4C,EAAiB3kD,KAAK22B,MARnC32B,KAAKsM,MACH/J,EAAAgK,eAAew4C,YACf/kD,KAAKyM,MAAMzM,KAAK22B,KAAM,MAS1B,MAEF,GAA6B,IAAzB/pB,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAMg7B,aAGjB,OAAOh7B,EAAM65B,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAO/hD,KAAKglD,cACR98B,EAAM+8B,eACN/8B,EAAMu8B,aAEZ,QAEE,QADEzkD,KAAK22B,IACAzO,EAAMg9B,MAEf,QAEE,QADEllD,KAAK22B,IACAzO,EAAMi9B,UAEf,QAEE,KADEnlD,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IAELytB,EAAiB,GACjBpkD,KAAK22B,IAAM32B,KAAK+6B,KACS,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IACAzO,EAAMk7B,0BAERl7B,EAAMi6B,kBAEf,GAA6B,IAAzBv1C,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAMq5B,gBAGjB,OAAOr5B,EAAMm5B,SAEf,QAEE,KADErhD,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IAELytB,EAAiB,GACjBpkD,KAAK22B,IAAM32B,KAAK+6B,KACS,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IACAzO,EAAMy5B,sBAERz5B,EAAMu5B,cAEf,GAA6B,IAAzB70C,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAMk9B,mBAGjB,OAAOl9B,EAAM26B,OAEf,QAEE,KADE7iD,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAA8B,CAErD,KADE32B,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IAELytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,KACb,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IACAzO,EAAMo7B,4CAERp7B,EAAMm6B,oCAEf,GAA6B,IAAzBz1C,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAMm7B,+BAGjB,OAAOn7B,EAAMk6B,wBAEf,GAA6B,IAAzBx1C,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAMs5B,mBAGjB,OAAOt5B,EAAMo5B,YAEf,QAEE,QADEthD,KAAK22B,IACAzO,EAAMm9B,SAEf,QAEE,QADErlD,KAAK22B,IACAzO,EAAMo9B,YAEf,QAEE,QADEtlD,KAAK22B,IACAzO,EAAMq9B,aAEf,QAEE,QADEvlD,KAAK22B,IAELytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,KACb,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IACAzO,EAAMu7B,cAERv7B,EAAMs6B,MAEf,SAEE,QADExiD,KAAK22B,IACAzO,EAAMs9B,UAEf,SAEE,KADExlD,KAAK22B,IACHytB,EAAiB,GAAKpkD,KAAK22B,IAAM32B,KAAK+6B,IAAK,CAC7C,GAA6B,KAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAM06B,QAEf,GAA6B,IAAzBh2C,EAAKpJ,WAAWxD,KAAK22B,KAEvB,QADE32B,KAAK22B,IACAzO,EAAMs7B,WAGjB,OAAOt7B,EAAMq6B,IAEf,SAEE,QADEviD,KAAK22B,IACAzO,EAAMu9B,WAEf,SAEE,QADEzlD,KAAK22B,IACAzO,EAAMw6B,MAEf,QAEE,QADE1iD,KAAK22B,IACAzO,EAAMw9B,GAEf,QACE,GAAIv9B,EAAAw9B,kBAAkBjlD,GAAI,CACxB,GAAIynB,EAAAy9B,mBAAmBllD,GAAI,CAEzB,IADA,IAAImlD,EAAY7lD,KAAK22B,MAEjB32B,KAAK22B,IAAM32B,KAAK+6B,KAClB5S,EAAA29B,iBAAiBplD,EAAIkM,EAAKpJ,WAAWxD,KAAK22B,OAE1C,IAAKxO,EAAAy9B,mBAAmBllD,GAEtB,OADAV,KAAK22B,IAAMkvB,EACJ39B,EAAMO,WAGjB,IACIs9B,EAAe3G,EADDxyC,EAAK8K,UAAUmuC,EAAW7lD,KAAK22B,MAEjD,GACEovB,GAAgB79B,EAAMziB,SACtBy+C,IAAuB/E,EAAmB6G,SAExC9B,IAAuB/E,EAAmB8G,SAC1ChF,EAAsB8E,IAGxB,OAAOA,EAET/lD,KAAK22B,IAAMkvB,EAEb,OAAO39B,EAAMO,WACR,GAAIN,EAAA+9B,aAAaxlD,GAAI,GACxBV,KAAK22B,IACP,MAOF,OALA32B,KAAKsM,MACH/J,EAAAgK,eAAe45C,kBACfnmD,KAAKyM,MAAMzM,KAAK22B,IAAK32B,KAAK22B,IAAM,MAEhC32B,KAAK22B,IACAzO,EAAMziB,SAInB,OAAOyiB,EAAMk+B,WAGfxC,EAAA3hD,UAAAokD,KAAA,SACEC,EACApC,EACAqC,QAFA,IAAAD,OAAA,QACA,IAAApC,MAAyC/E,EAAmBS,cAC5D,IAAA2G,MAAyB/9C,IAAIqe,WAE7B,IAAIja,EAAO5M,KAAK8H,OAAO8E,KACvB,GAAI5M,KAAK8jD,UAAY,EAAG,CACtB,IAAI+B,EAAY7lD,KAAK22B,IACjB6vB,EAAcxmD,KAAKkhD,MACnBuF,EAAiBzmD,KAAK6jD,SAG1B,GAFA7jD,KAAK8jD,UAAY9jD,KAAKmkD,WAAWD,EAAoBqC,GACrDvmD,KAAK+jD,aAAe/jD,KAAK6jD,SACrByC,EAAgB,CAClBtmD,KAAKgkD,oBAAqB,EAC1B,IAAK,IAAIrtB,EAAMkvB,EAAW9qB,EAAM/6B,KAAK+jD,aAAcptB,EAAMoE,IAAOpE,EAC9D,GAAIxO,EAAA6S,YAAYpuB,EAAKpJ,WAAWmzB,IAAO,CACrC32B,KAAKgkD,oBAAqB,EAC1B,OAINhkD,KAAK22B,IAAMkvB,EACX7lD,KAAKkhD,MAAQsF,EACbxmD,KAAK6jD,SAAW4C,EAElB,OAAOzmD,KAAK8jD,WAGdF,EAAA3hD,UAAAykD,eAAA,SAAexC,GACb,YADa,IAAAA,MAAyC/E,EAAmB8G,QAClEjmD,KAAK2mD,KAAKz+B,EAAMO,WAAYy7B,IAGrCN,EAAA3hD,UAAA0kD,KAAA,SAAKzF,EAAcgD,QAAA,IAAAA,MAAyC/E,EAAmBS,SAC7E,IAAIiG,EAAY7lD,KAAK22B,IACjB6vB,EAAcxmD,KAAKkhD,MACnBuF,EAAiBzmD,KAAK6jD,SACtB0C,EAAoB/9C,IAAIqe,UAC5B,OAAQq6B,GACN,KAAKh5B,EAAMo5B,YACTiF,EAAoB,EAKxB,OADAvmD,KAAKkhD,MAAQlhD,KAAKmkD,WAAWD,EAAoBqC,GAC7CvmD,KAAKkhD,OAASA,GAChBlhD,KAAK8jD,WAAa,GACX,IAEP9jD,KAAK22B,IAAMkvB,EACX7lD,KAAKkhD,MAAQsF,EACbxmD,KAAK6jD,SAAW4C,GACT,IAIX7C,EAAA3hD,UAAA2kD,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMlwB,IAAM32B,KAAK22B,IACjBkwB,EAAM3F,MAAQlhD,KAAKkhD,MACnB2F,EAAMhD,SAAW7jD,KAAK6jD,SACfgD,GAGTjD,EAAA3hD,UAAA+kD,QAAA,SAAQH,GACNC,EAAgBD,GAGlBjD,EAAA3hD,UAAAglD,MAAA,SAAMJ,GACJ7mD,KAAK22B,IAAMkwB,EAAMlwB,IACjB32B,KAAKkhD,MAAQ2F,EAAM3F,MACnBlhD,KAAK6jD,SAAWgD,EAAMhD,SACtB7jD,KAAK8jD,WAAa,GAGpBF,EAAA3hD,UAAAwK,MAAA,SAAMquB,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQ96B,KAAK6jD,SACb9oB,EAAM/6B,KAAK22B,KACFoE,EAAM,IACfA,EAAMD,GAED,IAAI7oB,EAAMjS,KAAK8H,OAAQgzB,EAAOC,IAGvC6oB,EAAA3hD,UAAAilD,eAAA,WAGE,IAFA,IAAIt6C,EAAO5M,KAAK8H,OAAO8E,KACnBkuB,EAAQ96B,KAAK22B,MAEb32B,KAAK22B,IAAM32B,KAAK+6B,KAClB5S,EAAA29B,iBAAiBl5C,EAAKpJ,WAAWxD,KAAK22B,QAExC,OAAO/pB,EAAK8K,UAAUojB,EAAO96B,KAAK22B,MAGpCitB,EAAA3hD,UAAAqxC,WAAA,WAKE,IAJA,IAAI1mC,EAAO5M,KAAK8H,OAAO8E,KACnBu6C,EAAQv6C,EAAKpJ,WAAWxD,KAAK22B,OAC7BmE,EAAQ96B,KAAK22B,IACbje,EAAS,KACA,CACX,GAAI1Y,KAAK22B,KAAO32B,KAAK+6B,IAAK,CACxBriB,GAAU9L,EAAK8K,UAAUojB,EAAO96B,KAAK22B,KACrC32B,KAAKsM,MACH/J,EAAAgK,eAAe66C,4BACfpnD,KAAKyM,MAAMquB,EAAQ,EAAG96B,KAAK+6B,MAE7B,MAEF,IAAIr6B,EAAIkM,EAAKpJ,WAAWxD,KAAK22B,KAC7B,GAAIj2B,GAAKymD,EAAO,CACdzuC,GAAU9L,EAAK8K,UAAUojB,EAAO96B,KAAK22B,OACrC,MAEF,GAAK,IAADj2B,EAAJ,CAMA,GAAIynB,EAAA6S,YAAYt6B,GAAI,CAClBgY,GAAU9L,EAAK8K,UAAUojB,EAAO96B,KAAK22B,KACrC32B,KAAKsM,MACH/J,EAAAgK,eAAe66C,4BACfpnD,KAAKyM,MAAMquB,EAAQ,EAAG96B,KAAK22B,MAE7B,QAEA32B,KAAK22B,SAbLje,GAAU9L,EAAK8K,UAAUojB,EAAO96B,KAAK22B,KACrCje,GAAU1Y,KAAKqnD,qBACfvsB,EAAQ96B,KAAK22B,IAajB,OAAOje,GAGTkrC,EAAA3hD,UAAAolD,mBAAA,WACE,KAAMrnD,KAAK22B,KAAO32B,KAAK+6B,IAKrB,OAJA/6B,KAAKsM,MACH/J,EAAAgK,eAAe+6C,uBACftnD,KAAKyM,MAAMzM,KAAK+6B,MAEX,GAGT,IAAInuB,EAAO5M,KAAK8H,OAAO8E,KACnBlM,EAAIkM,EAAKpJ,WAAWxD,KAAK22B,OAC7B,OAAQj2B,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAK22B,IAAM32B,KAAK+6B,KACS,KAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IACA32B,KAAKunD,6BAEPvnD,KAAKwnD,oBAEd,QAEIxnD,KAAK22B,IAAM32B,KAAK+6B,KACS,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,QAEnB32B,KAAK22B,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAO4kB,OAAOkM,aAAa/mD,KAIxCkjD,EAAA3hD,UAAAylD,kBAAA,WAIE,IAHA,IAAI96C,EAAO5M,KAAK8H,OAAO8E,KACnBkuB,EAAQ96B,KAAK22B,IACbgxB,GAAU,IACD,CACX,GAAI3nD,KAAK22B,KAAO32B,KAAK+6B,IAAK,CACxB/6B,KAAKsM,MACH/J,EAAAgK,eAAeq7C,wCACf5nD,KAAKyM,MAAMquB,EAAO96B,KAAK+6B,MAEzB,MAEF,GAA6B,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAAzB,CAKA,IAAIj2B,EAAIkM,EAAKpJ,WAAWxD,KAAK22B,KAC7B,GAAK,IAADj2B,IAAwBinD,EAAS,MACrC,GAAIx/B,EAAA6S,YAAYt6B,GAAI,CAClBV,KAAKsM,MACH/J,EAAAgK,eAAeq7C,wCACf5nD,KAAKyM,MAAMquB,EAAO96B,KAAK22B,MAEzB,QAEA32B,KAAK22B,IACPgxB,GAAU,QAdN3nD,KAAK22B,IACPgxB,GAAU,EAed,OAAO/6C,EAAK8K,UAAUojB,EAAO96B,KAAK22B,MAGpCitB,EAAA3hD,UAAA4lD,gBAAA,WAIE,IAHA,IAAIj7C,EAAO5M,KAAK8H,OAAO8E,KACnBkuB,EAAQ96B,KAAK22B,IACbre,EAAQ,EACLtY,KAAK22B,IAAM32B,KAAK+6B,KAAK,CAC1B,IAAIr6B,EAASkM,EAAKpJ,WAAWxD,KAAK22B,KAClC,IAAKxO,EAAA29B,iBAAiBplD,GAAI,MAI1B,SAHEV,KAAK22B,IAGCj2B,GACN,SACE4X,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFtY,KAAKsM,MACH/J,EAAAgK,eAAeu7C,iCACf9nD,KAAKyM,MAAMquB,EAAO96B,KAAK22B,MAGpB/pB,EAAK8K,UAAUojB,EAAO96B,KAAK22B,MAGpCitB,EAAA3hD,UAAA+iD,YAAA,WACE,IAAIp4C,EAAO5M,KAAK8H,OAAO8E,KACvB,GAA6B,IAAzBA,EAAKpJ,WAAWxD,KAAK22B,MAAuB32B,KAAK22B,IAAM,EAAI32B,KAAK+6B,IAClE,OAAQnuB,EAAKpJ,WAAWxD,KAAK22B,IAAM,IACjC,QACA,SACA,QACA,QACA,QACA,SAAiB,OAAO,EAI5B,IADA,IAAIA,EAAM32B,KAAK22B,IACRA,EAAM32B,KAAK+6B,KAAK,CACrB,IAAIr6B,EAAIkM,EAAKpJ,WAAWmzB,GACxB,GAAK,IAADj2B,GAAsB,IAADA,GAAoB,KAADA,EAC1C,OAAO,EAET,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7Di2B,IAEF,OAAO,GAGTitB,EAAA3hD,UAAA8lD,YAAA,WACE,IAAIn7C,EAAO5M,KAAK8H,OAAO8E,KACvB,GAA6B,IAAzBA,EAAKpJ,WAAWxD,KAAK22B,MAAuB32B,KAAK22B,IAAM,EAAI32B,KAAK+6B,IAAK,CACvE,OAAQnuB,EAAKpJ,WAAWxD,KAAK22B,IAAM,IACjC,QACA,SAEE,OADA32B,KAAK22B,KAAO,EACL32B,KAAKgoD,iBAEd,QACA,QAEE,OADAhoD,KAAK22B,KAAO,EACL32B,KAAKioD,oBAEd,QACA,SAEE,OADAjoD,KAAK22B,KAAO,EACL32B,KAAKkoD,mBAGhB,GAAI//B,EAAAggC,aAAav7C,EAAKpJ,WAAWxD,KAAK22B,IAAM,IAAK,CAC/C,IAAImE,EAAQ96B,KAAK22B,MACf32B,KAAK22B,IACP,IAAIr1B,EAAQtB,KAAKkoD,mBAKjB,OAJAloD,KAAKsM,MACH/J,EAAAgK,eAAe67C,8CACfpoD,KAAKyM,MAAMquB,EAAO96B,KAAK22B,MAElBr1B,GAGX,OAAOtB,KAAKqoD,sBAGdzE,EAAA3hD,UAAA+lD,eAAA,WAME,IALA,IAAIp7C,EAAO5M,KAAK8H,OAAO8E,KACnBkuB,EAAQ96B,KAAK22B,IACbr1B,EAAQ+H,QAAQ,EAAG,GACnBi/C,EAASj/C,QAAQ,GAAI,GACrBk/C,EAASztB,EACN96B,KAAK22B,IAAM32B,KAAK+6B,KAAK,CAC1B,IAAIpE,EAAM32B,KAAK22B,IACXj2B,EAAIkM,EAAKpJ,WAAWmzB,GACxB,GAAIj2B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQknD,QACNC,QAAQnnD,EAAOgnD,GACfj/C,QAAQ3I,EAAC,GAAgB,SAErB,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQknD,QACNC,QAAQnnD,EAAOgnD,GACfj/C,QAAQ,GAAK3I,EAAC,GAAe,SAE1B,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQknD,QACNC,QAAQnnD,EAAOgnD,GACfj/C,QAAQ,GAAK3I,EAAC,GAAe,QAE1B,IAAK,IAADA,EAWT,MAVI6nD,GAAU5xB,GACZ32B,KAAKsM,MACHi8C,GAAUztB,EACNv4B,EAAAgK,eAAem8C,wCACfnmD,EAAAgK,eAAeo8C,0DACnB3oD,KAAKyM,MAAMkqB,IAGf4xB,EAAS5xB,EAAM,EAIjB32B,KAAK22B,IAAMA,EAAM,EAanB,OAXI32B,KAAK22B,KAAOmE,EACd96B,KAAKsM,MACH/J,EAAAgK,eAAeq8C,2BACf5oD,KAAKyM,MAAMquB,IAEJytB,GAAUvoD,KAAK22B,KACxB32B,KAAKsM,MACH/J,EAAAgK,eAAem8C,wCACf1oD,KAAKyM,MAAM87C,EAAS,IAGjBjnD,GAGTsiD,EAAA3hD,UAAAomD,mBAAA,WAME,IALA,IAAIz7C,EAAO5M,KAAK8H,OAAO8E,KACnBkuB,EAAQ96B,KAAK22B,IACbr1B,EAAQ+H,QAAQ,EAAG,GACnBw/C,EAASx/C,QAAQ,GAAI,GACrBk/C,EAASztB,EACN96B,KAAK22B,IAAM32B,KAAK+6B,KAAK,CAC1B,IAAIpE,EAAM32B,KAAK22B,IACXj2B,EAAIkM,EAAKpJ,WAAWmzB,GACxB,GAAIj2B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQknD,QACNC,QAAQnnD,EAAOunD,GACfx/C,QAAQ3I,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVI6nD,GAAU5xB,GACZ32B,KAAKsM,MACHi8C,GAAUztB,EACNv4B,EAAAgK,eAAem8C,wCACfnmD,EAAAgK,eAAeo8C,0DACnB3oD,KAAKyM,MAAMkqB,IAGf4xB,EAAS5xB,EAAM,EAIjB32B,KAAK22B,IAAMA,EAAM,EAanB,OAXI32B,KAAK22B,KAAOmE,EACd96B,KAAKsM,MACH/J,EAAAgK,eAAeu8C,eACf9oD,KAAKyM,MAAMquB,IAEJytB,GAAUvoD,KAAK22B,KACxB32B,KAAKsM,MACH/J,EAAAgK,eAAem8C,wCACf1oD,KAAKyM,MAAM87C,EAAS,IAGjBjnD,GAGTsiD,EAAA3hD,UAAAimD,iBAAA,WAME,IALA,IAAIt7C,EAAO5M,KAAK8H,OAAO8E,KACnBkuB,EAAQ96B,KAAK22B,IACbr1B,EAAQ+H,QAAQ,EAAG,GACnB0/C,EAAQ1/C,QAAQ,EAAG,GACnBk/C,EAASztB,EACN96B,KAAK22B,IAAM32B,KAAK+6B,KAAK,CAC1B,IAAIpE,EAAM32B,KAAK22B,IACXj2B,EAAIkM,EAAKpJ,WAAWmzB,GACxB,GAAIj2B,GAAC,IAAmBA,GAAC,GAEvBY,EAAQknD,QACNC,QAAQnnD,EAAOynD,GACf1/C,QAAQ3I,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVI6nD,GAAU5xB,GACZ32B,KAAKsM,MACHi8C,GAAUztB,EACNv4B,EAAAgK,eAAem8C,wCACfnmD,EAAAgK,eAAeo8C,0DACnB3oD,KAAKyM,MAAMkqB,IAGf4xB,EAAS5xB,EAAM,IAIf32B,KAAK22B,IAaT,OAXI32B,KAAK22B,KAAOmE,EACd96B,KAAKsM,MACH/J,EAAAgK,eAAey8C,qBACfhpD,KAAKyM,MAAMquB,IAEJytB,GAAUvoD,KAAK22B,KACxB32B,KAAKsM,MACH/J,EAAAgK,eAAem8C,wCACf1oD,KAAKyM,MAAM87C,EAAS,IAGjBjnD,GAGTsiD,EAAA3hD,UAAAgmD,kBAAA,WAOE,IANA,IAAIr7C,EAAO5M,KAAK8H,OAAO8E,KACnBkuB,EAAQ96B,KAAK22B,IACbr1B,EAAQ+H,QAAQ,EAAG,GACnB4/C,EAAQ5/C,QAAQ,EAAG,GACnB6/C,EAAQ7/C,QAAQ,EAAG,GACnBk/C,EAASztB,EACN96B,KAAK22B,IAAM32B,KAAK+6B,KAAK,CAC1B,IAAIpE,EAAM32B,KAAK22B,IACXj2B,EAAIkM,EAAKpJ,WAAWmzB,GACxB,GAAK,IAADj2B,EAEFY,EAAQmnD,QACNnnD,EACA2nD,QAEG,GAAK,IAADvoD,EAETY,EAAQknD,QACNC,QAAQnnD,EAAO2nD,GACfC,OAEG,IAAK,IAADxoD,EAWT,MAVI6nD,GAAU5xB,GACZ32B,KAAKsM,MACHi8C,GAAUztB,EACNv4B,EAAAgK,eAAem8C,wCACfnmD,EAAAgK,eAAeo8C,0DACnB3oD,KAAKyM,MAAMkqB,IAGf4xB,EAAS5xB,EAAM,EAIjB32B,KAAK22B,IAAMA,EAAM,EAanB,OAXI32B,KAAK22B,KAAOmE,EACd96B,KAAKsM,MACH/J,EAAAgK,eAAe48C,sBACfnpD,KAAKyM,MAAMquB,IAEJytB,GAAUvoD,KAAK22B,KACxB32B,KAAKsM,MACH/J,EAAAgK,eAAem8C,wCACf1oD,KAAKyM,MAAM87C,EAAS,IAGjBjnD,GAGTsiD,EAAA3hD,UAAAmnD,UAAA,WAWE,OAAOppD,KAAKqpD,oBAGdzF,EAAA3hD,UAAAonD,iBAAA,WAIE,IAFA,IAAIvuB,EAAQ96B,KAAK22B,IACb/pB,EAAO5M,KAAK8H,OAAO8E,KAChB5M,KAAK22B,IAAM32B,KAAK+6B,KAAO5S,EAAAq8B,eAAe53C,EAAKpJ,WAAWxD,KAAK22B,SAC9D32B,KAAK22B,IAET,GAAI32B,KAAK22B,IAAM32B,KAAK+6B,KAAgC,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,KAE9C,MADE32B,KAAK22B,IACA32B,KAAK22B,IAAM32B,KAAK+6B,KAAO5S,EAAAq8B,eAAe53C,EAAKpJ,WAAWxD,KAAK22B,SAC9D32B,KAAK22B,IAGX,GAAI32B,KAAK22B,IAAM32B,KAAK+6B,IAAK,CACvB,IAAIr6B,EAAIkM,EAAKpJ,WAAWxD,KAAK22B,KAC7B,GAAK,IAADj2B,GAAoB,KAADA,EAUrB,MARIV,KAAK22B,IAAM32B,KAAK+6B,MACS,IAAzBnuB,EAAKpJ,WAAWxD,KAAK22B,MACI,IAAzB/pB,EAAKpJ,WAAWxD,KAAK22B,OAEvBxO,EAAAq8B,eAAe53C,EAAKpJ,WAAWxD,KAAK22B,IAAM,OAExC32B,KAAK22B,IAEF32B,KAAK22B,IAAM32B,KAAK+6B,KAAO5S,EAAAq8B,eAAe53C,EAAKpJ,WAAWxD,KAAK22B,SAC9D32B,KAAK22B,IAIb,OAAO2yB,WAAW18C,EAAK8K,UAAUojB,EAAO96B,KAAK22B,OAG/CitB,EAAA3hD,UAAAsnD,aAAA,WACE,MAAM,IAAI96C,MAAM,oBAGlBm1C,EAAA3hD,UAAAulD,kBAAA,WAIE,IAHA,IAAIgC,EAAS,EACTloD,EAAQ,EACRsL,EAAO5M,KAAK8H,OAAO8E,KAChB5M,KAAK22B,IAAM32B,KAAK+6B,KAAK,CAC1B,IAAIr6B,EAAIkM,EAAKpJ,WAAWxD,KAAK22B,OAC7B,GAAIj2B,GAAC,IAAmBA,GAAC,GACvBY,EAAgB,GAARA,EAAaZ,EAAC,QACjB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,EAAgB,GAARA,EAAa,GAAKZ,EAAC,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKsM,MACH/J,EAAAgK,eAAeq8C,2BACf5oD,KAAKyM,MAAMzM,KAAK22B,IAAM,EAAG32B,KAAK22B,MAEzB,GANPr1B,EAAgB,GAARA,EAAa,GAAKZ,EAAC,GAQ7B,GAAgB,KAAV8oD,EAAa,MAErB,OAAIA,GACFxpD,KAAKsM,MACH/J,EAAAgK,eAAe+6C,uBACftnD,KAAKyM,MAAMzM,KAAK22B,MAEX,IAEF4kB,OAAOkM,aAAanmD,IAGrBsiD,EAAA3hD,UAAAslD,0BAAR,WACE,IAAIzsB,EAAQ96B,KAAK22B,IACbr1B,EAAQtB,KAAKgoD,iBACbyB,EAAU1Z,QAAQzuC,GAClBooD,GAAU,EAEdvmD,QAAQ6sC,SAAS1uC,IACbmoD,EAAU,UACZzpD,KAAKsM,MACH/J,EAAAgK,eAAeo9C,4EACf3pD,KAAKyM,MAAMquB,EAAO96B,KAAK22B,MAEzB+yB,GAAU,GAGZ,IAAI98C,EAAO5M,KAAK8H,OAAO8E,KAiBvB,OAhBI5M,KAAK22B,KAAO32B,KAAK+6B,KACnB/6B,KAAKsM,MACH/J,EAAAgK,eAAe+6C,uBACftnD,KAAKyM,MAAMquB,EAAO96B,KAAK+6B,MAEzB2uB,GAAU,GACwB,KAAzB98C,EAAKpJ,WAAWxD,KAAK22B,OAC5B32B,KAAK22B,KAEP32B,KAAKsM,MACH/J,EAAAgK,eAAeq9C,qCACf5pD,KAAKyM,MAAMquB,EAAO96B,KAAK22B,MAEzB+yB,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACblO,OAAOkM,aAAagC,GACpBlO,OAAOkM,aAC2B,QAA/BgC,EAAU,OAAS,KAAO,IAC1BA,EAAU,OAAS,KAAY,QAIxC7F,EAAA3hD,UAAA4nD,OAAA,aAEFjG,EAzkCA,CAA+BrhD,EAAA4V,mBAAlBzY,EAAAkkD,YA4kCb,IAAAmD,EAAA,WAOA,OAPA,gBAAarnD,EAAAqnD,QAUb,IAAID,EAA8B,mkBChjDlC,IA8OYgD,EA9OZ7N,EAAA97C,EAAA,GAWA4pD,EAAA5pD,EAAA,IAIAwC,EAAAxC,EAAA,IAIA6pD,EAAA,oBAAAA,KAsNA,OA/MWA,EAAAC,qBAAP,SAA4Bx/C,EAAiCC,WACzD,GAAID,EAAU8F,eACV,IAAsB,IAAAoL,EAAA7O,EAAArC,EAAU8F,YAAUrD,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CACxC,GADcE,EAAA5L,MACA2B,eAAiByH,EAC3B,OAAO,oGAInB,OAAO,GAGJs/C,EAAAE,oBAAP,SAA2Bz/C,EAAiCC,WACxD,GAAID,EAAU8F,eACV,IAAsB,IAAAoL,EAAA7O,EAAArC,EAAU8F,YAAUrD,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAAvC,IAAI0D,EAASxD,EAAA5L,MACd,GAAIoP,EAAUzN,eAAiByH,EAC3B,OAAOgG,oGAInB,OAAO,MAGJs5C,EAAAG,SAAP,SAAgBxd,GACZ,MAAO,UAAYA,GAAY,UAAYA,GAOxCqd,EAAAI,gBAAP,SAAuB9/B,GAInB,OAHmBA,EAAK7d,MAAM3E,OAAO2O,aAEH,IADvB6T,EAAK7d,MAAMwE,YAEFkpB,QAAQ,IAAK,MAQ9B6vB,EAAAK,qBAAP,SAA4BC,GACxBnnD,OAAO6mD,EAAQO,YAAYD,IAC3B,IAAIE,EAAeF,EAAYG,QAAQ,KACvC,IAAqB,GAAjBD,EAAoB,CACpB,IAAI7wC,GAAqC,GAA7B2wC,EAAYG,QAAQ,KAAaD,EAAeF,EAAYG,QAAQ,KAChF,OAAOH,EAAY5yC,UAAU,EAAGiC,GAGpC,IAAqB,IADrB6wC,EAAeF,EAAYG,QAAQ,MACX,CACpB,IAAIC,EAAWJ,EAAYG,QAAQ,KACnC,OAAOH,EAAY5yC,UAAU8yC,EAAe,EAAGE,GAEnD,OAAOJ,GAOJN,EAAAO,YAAP,SAAmBD,GACf,MAAsB,MAAfA,GAAsC,SAAfA,GAO3BN,EAAAW,UAAP,SAAiBL,GACb,MAAsB,OAAfA,GAAuC,YAAfA,GAG5BN,EAAAY,WAAP,SAAkBN,GACd,MAAO,YAAcA,GAMlBN,EAAAa,mBAAP,SAA0B33C,GACtB,IAAKA,EACD,OAAO,EAIX,OADsB82C,EAAQc,gBAAgB53C,EAAenH,YADvC,iBAEIi+C,EAAQa,mBAAmB33C,EAAehF,gBAOjE87C,EAAAe,iBAAP,SAAwBC,GAEpB,OAAOhB,EAAQc,gBAAgBE,EADT,eAIXhB,EAAAc,gBAAf,SAA+BE,EAAoCC,WAC3Dn5C,EAAkBk5C,EAAiBl5C,gBACvC,GAAIA,MACA,IAAkB,IAAAo5C,EAAAp+C,EAAAgF,GAAeq5C,EAAAD,EAAAl+C,QAAAm+C,EAAAl+C,KAAAk+C,EAAAD,EAAAl+C,OAAE,CAC/B,GADUm+C,EAAA7pD,MACAV,KAAK6L,MAAMwE,YAAcg6C,EAC/B,OAAO,oGAInB,OAAO,GAMJjB,EAAAoB,iBAAP,SAAwBl4C,GACpB,IACIhF,EAAuCgF,EAAehF,cAC1D,SAAIA,GAFiB,YAEAA,EAAcwD,aAMhCs4C,EAAAqB,iBAAP,SAAwBr/C,GACpB,OAAOA,EAAQtB,MAAQuxC,EAAAv2C,YAAYuI,iBAGhC+7C,EAAAsB,iBAAP,SAAwBt/C,EAAkBtB,GACtC,OAAOsB,EAAQtB,MAAQA,GAOpBs/C,EAAAuB,iBAAP,SAAwBr4C,GAGpB,YAFIs4C,EAAiCt4C,EACjCu4C,EAAuB,IAAI3hD,MACb,MAAX0hD,GAAiB,CACpB,IAAIE,EAAYF,EAAQz/C,YAAY+F,gBACpC,GAAI45C,MACA,IAAiB,IAAAC,EAAA7+C,EAAA4+C,GAASE,EAAAD,EAAA3+C,QAAA4+C,EAAA3+C,KAAA2+C,EAAAD,EAAA3+C,OAAE,CAAvB,IAAI+B,EAAI68C,EAAAtqD,MACTmqD,EAAWt5C,KAAKpD,EAAKnO,KAAK6L,MAAMwE,8GAGxCu6C,EAAUA,EAAQt9C,cAEtB,OAAOu9C,GAGJzB,EAAA6B,SAAP,SAAgBp/C,GACZ,OAAOA,EAAM3E,OAAOF,eAChB,IAAM6E,EAAM4Q,KAAKpM,SAAS,IAC1B,IAAMxE,EAAM6Q,OAAOrM,SAAS,KAG7B+4C,EAAA8B,mBAAP,SAA0BzzC,eAElB0zC,EAAkB1zC,EAAQhS,YAAY2lD,WAC1C,IAAgB,IAAAC,EAAAn/C,EAAAi/C,GAAeG,EAAAD,EAAAj/C,QAAAk/C,EAAAj/C,KAAAi/C,EAAAD,EAAAj/C,OAAE,CAA5B,IAAIpL,EAAGsqD,EAAA5qD,OACJA,EAAQ+W,EAAQhS,YAAYnF,IAAIU,KAEhCs5B,QAAQC,IAAI,qBAAqBv5B,EAAG,YAAYN,EAAMoJ,wGAG9D,IAAIyhD,EAAiB9zC,EAAQ/R,YAAY0lD,WACzC,IAAgB,IAAAI,EAAAt/C,EAAAq/C,GAAcE,EAAAD,EAAAp/C,QAAAq/C,EAAAp/C,KAAAo/C,EAAAD,EAAAp/C,OAAE,CAA3B,IACG1L,EADCM,EAAGyqD,EAAA/qD,OACJA,EAAQ+W,EAAQ/R,YAAYpF,IAAIU,KAEhCs5B,QAAQC,IAAI,mBAAmBv5B,EAAG,YAAYN,EAAMyN,KAAKtC,MAAMwE,gHAKpE+4C,EAAAsC,sBAAP,SAA6Bj0C,WACrB2zC,EAAO3zC,EAAQjS,gBAAgB4lD,WACnC,IAAgB,IAAAO,EAAAz/C,EAAAk/C,GAAIQ,EAAAD,EAAAv/C,QAAAw/C,EAAAv/C,KAAAu/C,EAAAD,EAAAv/C,OAAE,CAAjB,IAAIpL,EAAG4qD,EAAAlrD,MACJA,EAAQ+W,EAAQjS,gBAAgBlF,IAAIU,GACpCN,GACA45B,QAAQC,IAAI,uBAAuBv5B,EAAG,UAAUq6C,EAAAv2C,YAAYpE,EAAMoJ,2GAKvEs/C,EAAAyC,qBAAP,SAA4Bp0C,WACpBuS,EAAWvS,EAAQlS,mBACvB,IAA2B,IAAAumD,EAAA5/C,EAAA8d,GAAQ+hC,EAAAD,EAAA1/C,QAAA2/C,EAAA1/C,KAAA0/C,EAAAD,EAAA1/C,OAAE,CAA5B,IAAA2O,EAAAxO,EAAAw/C,EAAArrD,MAAA,GAACM,EAAA+Z,EAAA,GAAK3P,EAAA2P,EAAA,GACXuf,QAAQC,IAAI,sBAAsBv5B,EAAG,UAAUq6C,EAAAv2C,YAAYsG,EAAQtB,2GAKpEs/C,EAAA4C,oBAAP,SAA2Bv0C,eACnBuS,EAAWvS,EAAQlS,mBACvB,IAA2B,IAAA0mD,EAAA//C,EAAA8d,GAAQkiC,EAAAD,EAAA7/C,QAAA8/C,EAAA7/C,KAAA6/C,EAAAD,EAAA7/C,OAAE,CAA5B,IAAAE,EAAAC,EAAA2/C,EAAAxrD,MAAA,GAACM,EAAAsL,EAAA,GAAKlB,EAAAkB,EAAA,GACX,GAAIlB,GAAWA,EAAQtB,MAAQuxC,EAAAv2C,YAAYuI,gBAAiB,CACxD,IAAIiF,EAAiDlH,EACrD,GAAIkH,EAAe4G,cACf,IAAqB,IAAAvL,EAAAzB,EAAAoG,EAAe4G,WAASizC,EAAAx+C,EAAAvB,QAAA+/C,EAAA9/C,KAAA8/C,EAAAx+C,EAAAvB,OAAE,CAA1C,IAAI4B,EAAQm+C,EAAAzrD,MACb45B,QAAQC,IAAI,mBAAmBvsB,EAASqC,8GAG5CiC,EAAehF,eACfgtB,QAAQC,IAAI,sBAAsBv5B,EAAG,oBAAoBsR,EAAehF,cAAcwD,iHAK1Gs4C,EAtNA,GAAatqD,EAAAsqD,UA2Nb,SAAYF,GACRA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,aACAA,IAAA,iBALJ,CAAYA,EAAApqD,EAAAoqD,cAAApqD,EAAAoqD,iBAcZ,IAAAkD,EAAA,WAOI,SAAAA,EAAY30C,EAAkB40C,GAC1BjtD,KAAKqY,QAAUA,EACfrY,KAAKitD,SAAWA,EAEhBjtD,KAAK2sC,SAAW3sC,KAAKitD,SAASrsD,KAAK6L,MAAMwE,WA2JjD,OAxJI+7C,EAAA/qD,UAAAirD,eAAA,WACI,OAAOltD,KAAKitD,SAASxgD,MAAMwE,YAG/B+7C,EAAA/qD,UAAAkrD,OAAA,WACI,MAAwB,QAAjBntD,KAAK2sC,UAGhB5rC,OAAAC,eAAIgsD,EAAA/qD,UAAA,mBAAJ,WACI,IAAI0qC,EAAW3sC,KAAK2sC,SACpB,OAAIqd,EAAQG,SAASxd,GACVmd,EAAYp1C,OAEnBs1C,EAAQO,YAAY5d,GACbmd,EAAY50B,MAEnB80B,EAAQW,UAAUhe,GACXmd,EAAYsD,IAGX,MADDptD,KAAKqtD,iBAAiB1gB,GAEtBmd,EAAY1uC,MAEhB0uC,EAAYwD,wCAGvBN,EAAA/qD,UAAAsrD,QAAA,WACI,OAAOvtD,KAAKwtD,aAAe1D,EAAY50B,OAG3C83B,EAAA/qD,UAAAwrD,uBAAA,WACI,IAAI9gB,EAAW3sC,KAAK0tD,UAAU,GAC9B,OAAI1D,EAAQG,SAASxd,GACVmd,EAAYp1C,OAGX,MADD1U,KAAKqtD,iBAAiB1gB,GAEtBmd,EAAY1uC,MAEhB0uC,EAAYwD,QAGvBN,EAAA/qD,UAAA0rD,cAAA,WACI,OAAI3tD,KAAKwtD,aAAe1D,EAAYwD,QACmB,OAA5CttD,KAAK4tD,qBAAqB5tD,KAAK2sC,WAK9CqgB,EAAA/qD,UAAA4rD,YAAA,WACI,GAAI7tD,KAAKitD,SAASjvC,cACd,OAAOhe,KAAKitD,SAASjvC,cAAc,GAAGvR,MAAMwE,WAEhD,MAAM,IAAIxC,MAAM,6BAA6BzO,KAAK2sC,SAAQ,iBACpCqd,EAAQ6B,SAAS7rD,KAAKitD,SAASxgD,SAGzDugD,EAAA/qD,UAAA6rD,kBAAA,WACI,IAAIC,EAAU/tD,KAAKwtD,YACf7gB,EAAW3sC,KAAKitD,SAASrsD,KAAK6L,MAAMwE,WACxC,OAAQ88C,GACJ,KAAKjE,EAAYp1C,OACb,MAAO,SAEX,KAAKo1C,EAAYwD,OACjB,KAAKxD,EAAY1uC,MACb,OAAOuxB,EAEX,KAAKmd,EAAY50B,MACb,OAAUl1B,KAAK0tD,UAAU,GAAE,KAE/B,KAAK5D,EAAYsD,IACb,OAAIpD,EAAQY,WAAWje,GACT3sC,KAAK0tD,UAAUx7C,KAAK,KAAI,OAExBlS,KAAK0tD,UAAUx7C,KAAK,KAAI,KAG1C,QACI,OAAOy6B,IAKXqgB,EAAA/qD,UAAAyrD,QAAR,mBACQxjC,EAAOlqB,KAAKitD,SAASjvC,cACrBgwC,EAAU,IAAIlkD,MAClB,GAAIogB,MACA,IAAgB,IAAA+jC,EAAAnhD,EAAAod,GAAIgkC,EAAAD,EAAAjhD,QAAAkhD,EAAAjhD,KAAAihD,EAAAD,EAAAjhD,OAAE,CAAjB,IAAI9J,EAAGgrD,EAAA5sD,MACR0sD,EAAQ77C,KAAKjP,EAAIuJ,MAAMwE,8GAG/B,OAAO+8C,GAGXhB,EAAA/qD,UAAAksD,WAAA,WACI,IAAIjkC,EAAOlqB,KAAK0tD,UAChB,OAAK3D,EAAAqE,YAAYC,aAAankC,IAGtBlqB,KAAK2sC,UAFFziB,GAWf8iC,EAAA/qD,UAAAqsD,YAAA,SAAY3hB,GACR,IAAIl2B,EAAkBzW,KAAKitD,SAASxgD,MAAM3E,OAAO2O,aAAY,IAAIk2B,EAC7D3gC,EAAUhM,KAAKqY,QAAQlS,eAAejF,IAAIuV,GAC9C,OAAOzK,GAAoBhM,KAAKqY,QAAQlS,eAAejF,IAAIyrC,IAO/DqgB,EAAA/qD,UAAAorD,iBAAA,SAAiBkB,GACb,IAAIC,EAAiBxuD,KAAK4tD,qBAAqBW,GAE/C,OAD8BvuD,KAAKqY,QAAQhS,YAAYnF,IAAIstD,IAU/DxB,EAAA/qD,UAAA2rD,qBAAA,SAAqBjhB,GACjB,IAAI8hB,EAAYzuD,KAAKqY,QAAQ/R,YAAYpF,IAAIyrC,GAC7C,GAAI8hB,EAAW,CACX,IAAIC,EAAgBD,EAAU1/C,KAAKtC,MAAMwE,WACzC,OAAOjR,KAAK4tD,qBAAqBc,GAErC,OAAO/hB,GAGXqgB,EAAA/qD,UAAA0sD,kBAAA,SAAkBhiB,GACd,IAAIohB,EAAyBprD,EAAAisD,UAAUC,cAAc3tD,IAAIyrC,GACzD,GAAIohB,EACA,OAAOA,EAEX,IAAIU,EAAYzuD,KAAKqY,QAAQ/R,YAAYpF,IAAIyrC,GAC7C,GAAI8hB,EAAW,CACX,IAAIC,EAAgBD,EAAU1/C,KAAKtC,MAAMwE,WACzC,OAAOjR,KAAK2uD,kBAAkBD,GAElC,OAAO/hB,GAEfqgB,EAtKA,GAAattD,EAAAstD,k7BCjQb,IAoKYnd,EApKZif,EAAA3uD,EAAA,IAQAoC,EAAApC,EAAA,GAKAuC,EAAAvC,EAAA,GAyBAmC,EAAAnC,EAAA,GAUA87C,EAAA97C,EAAA,GA4BA8nB,EAAA9nB,EAAA,GAKAsC,EAAAtC,EAAA,GA+DAqC,EAAArC,EAAA,GASAgoB,EAAAhoB,EAAA,GAQA4uD,EAAA5uD,EAAA,IAGA,SAAY0vC,GAEVA,IAAA,mBAEAA,IAAA,mBAJF,CAAYA,EAAAnwC,EAAAmwC,SAAAnwC,EAAAmwC,YAQZ,IAAAmf,EAAA,oBAAAA,IAGEhvD,KAAA0e,OAAiBmxB,EAAOof,OAExBjvD,KAAAuJ,eAAsB,EAEtBvJ,KAAAwJ,UAAiB,EAEjBxJ,KAAAkvD,cAAqB,EAErBlvD,KAAAmvD,aAAoB,EAEpBnvD,KAAAgd,WAAkB,EAElBhd,KAAAyJ,WAAkB,EAElBzJ,KAAAoO,cAA2C,KAE3CpO,KAAAovD,SAAQ,EAGRpvD,KAAA0J,kBAAyB,EAEzB1J,KAAA2J,gBAAuB,EA0BzB,OAvBE5I,OAAAC,eAAIguD,EAAA/sD,UAAA,gBAAJ,WACE,OAAOjC,KAAK0e,QAAUmxB,EAAOC,wCAI/B/uC,OAAAC,eAAIguD,EAAA/sD,UAAA,iBAAJ,WACE,OAAOjC,KAAK0e,QAAUmxB,EAAOC,OAASttC,EAAA6F,KAAKq0C,QAAUl6C,EAAA6F,KAAKs0C,yCAI5D57C,OAAAC,eAAIguD,EAAA/sD,UAAA,iBAAJ,WACE,OAAOjC,KAAK0e,QAAUmxB,EAAOC,OAASttC,EAAA6F,KAAKm0C,QAAUh6C,EAAA6F,KAAKo0C,yCAI5D17C,OAAAC,eAAIguD,EAAA/sD,UAAA,sBAAJ,WACE,OAAOjC,KAAK0e,QAAUmxB,EAAOC,OAAQ,EAAiB,mCAIxDkf,EAAA/sD,UAAA2H,WAAA,SAAWylD,GACT,OAAoC,IAA5BrvD,KAAKovD,SAAWC,IAE5BL,EAlDA,GAAatvD,EAAAsvD,UAqDb,SAAkBM,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCANF,CAAkB5vD,EAAA4vD,UAAA5vD,EAAA4vD,aAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBANF,CAAkB7vD,EAAA6vD,iBAAA7vD,EAAA6vD,oBAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,eAJF,CAAkB9vD,EAAA8vD,WAAA9vD,EAAA8vD,cAQlB,IAu2OIC,EACAC,EAx2OJC,EAAA,SAAA5pD,GA6CE,SAAA4pD,EAAYt3C,EAAkBjQ,QAAA,IAAAA,MAAA,MAA9B,IAAAnC,EACEF,EAAAvF,KAAAR,KAAMqY,EAAQrS,cAAYhG,YAjC5BiG,EAAA2pD,qBAAwC,KAExC3pD,EAAA4pD,0BAEA5pD,EAAA6pD,YAA2B,KAE3B7pD,EAAA8pD,YAAoBvtD,EAAA6F,KAAKc,KAQzBlD,EAAA+pD,kBAEA/pD,EAAAgqD,eAA4C,IAAIpqD,IAEhDI,EAAAiqD,eAA4B,QAE5BjqD,EAAAkqD,QAAqB,EAErBlqD,EAAAmqD,QAAuB,EAEvBnqD,EAAAoqD,mBAA0B,EA22ElBpqD,EAAAqqD,eAAkC,KAClCrqD,EAAAsqD,eAAkC,KAClCtqD,EAAAuqD,eAAkC,KAClCvqD,EAAAwqD,eAAkC,KAp2ExCxqD,EAAKoS,QAAUA,EACfpS,EAAKoB,SAAWgR,EAAQhR,SACnBe,IAASA,EAAU,IAAI4mD,GAC5B/oD,EAAKmC,QAAUA,EACfnC,EAAK6X,aAAezU,QAGlBqnD,IAAItoD,EAAQqB,WAAY,IAE1BxD,EAAKtG,OAAS+C,EAAAyjC,OAAOxkC,WAivOzB,OAzyO8B6F,EAAAmoD,EAAA5pD,GAwCrB4pD,EAAAgB,QAAP,SAAet4C,EAAkBjQ,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIunD,EAASt3C,EAASjQ,GAASuoD,WAmBxChB,EAAA1tD,UAAA0uD,QAAA,mBACMvoD,EAAUpI,KAAKoI,QACfzI,EAASK,KAAKL,OACd0Y,EAAUrY,KAAKqY,QAGnBA,EAAQlQ,WAAWC,GAGnB,IAAIwoD,EAAwB,IAAI3U,EAAAjiC,SAAS3B,EAAQpJ,cAAe,QAAS,IAAIzM,EAAAu7C,aAAcv7C,EAAA6F,KAAKc,OAChGnJ,KAAK4wD,sBAAwBA,EAC7B,IAAIC,EAAoB,IAAI/mD,MAC5B9J,KAAK6wD,kBAAoBA,EACzB7wD,KAAKuf,gBAAkBqxC,EAGnBxoD,EAAQkB,SACV3J,EAAOotC,UACL,YAAW,GAEX,EACAptC,EAAOooC,UAAU,EAAG,IAGtBpoC,EAAOotC,UACL,YAAW,GAEX,EACAptC,EAAOgoC,UAAU,IAOrB,IAFA,IAAIpgC,EAAU8Q,EAAQ9Q,QAEblH,EAAI,EAAGwH,EAAIN,EAAQnE,OAAQ/C,EAAIwH,IAAKxH,EACvCkH,EAAQlH,GAAGiS,SAAStS,KAAK8wD,cAAcvpD,EAAQlH,IAIrD,GAAIwwD,EAAkBztD,QAAmC,OAAzBiV,EAAQzR,aAAuB,CAC7D,IAAI6I,EAAYmhD,EAAsBnhD,UAClCshD,EAAUpxD,EAAOytC,YACnBwjB,EAAsBvmD,aACtBrK,KAAKgxD,mBACHvhD,EAAUC,eACVD,EAAUG,WACVH,EAAU8L,UAEZ/Y,EAAAm7C,mBAAmBiT,EAAsBv2C,kBACzC1a,EAAOurC,YAAY,KAAM2lB,IAE3BD,EAAsB7zC,SAASpd,EAAQoxD,GAClC14C,EAAQzR,cAAcjH,EAAO6wC,SAASugB,GAI7C,IAAIjzC,EAAe9d,KAAK8d,aACxBA,EAAemzC,UAAUnzC,EAAc1V,EAAQW,UAAU8G,UACzD7P,KAAK8d,aAAeA,EACpBne,EAAOutC,aAAa,aAChB9kC,EAAQkB,SACV3J,EAAOotC,UACL,YAAW,GAEX,EACAptC,EAAOooC,UAAUgI,QAAQjyB,GAAekyB,SAASlyB,KAGnDne,EAAOotC,UACL,YAAW,GAEX,EACAptC,EAAOgoC,UAAUoI,QAAQjyB,KAK7B,IAAIozC,EAAWlxD,KAAKgwD,eAAe5sD,OAC/B2sC,QAAQohB,UAAUF,UAAUnzC,EAAc,OAAUzU,QAAQ,GAAI,KAChE,EACJ1J,EAAO2vC,UACL4hB,EACAxuD,EAAAyjC,OAAO0P,iBACP71C,KAAKgwD,eACL5nD,EAAQsW,OACR,UAIEtW,EAAQ8mD,cAAcvvD,EAAOsvC,gBAAgB,IAAK,MAAO,UAG7D,IAAIihB,EAAgBlwD,KAAKkwD,cACzBvwD,EAAO0wC,iBAAiB6f,EAAc9sD,OAAQ,WAAY8sD,GAC1DvwD,EAAOsuC,eAAe,IAAK,SAC3BtuC,EAAOytC,YAAY,OAAQptC,KAAKgxD,mBAAmB,KAAMxuD,EAAA6F,KAAKc,MAAO,KAAMxJ,EAAOurC,YAAY,UAG1F9iC,EAAQ+mD,aAAaxvD,EAAOovC,eAAe,IAAK,MAAO,aAG3D,IAAiC,IAAApzB,EAAA7O,EAAAuL,EAAQ7R,oBAAkB0G,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAApD,IAAAuB,EAAApB,EAAAD,EAAA5L,MAAA,GAACV,EAAA2N,EAAA,GAAM6iD,EAAA7iD,EAAA,GACdvO,KAAKqxD,iBAAiBzwD,EAAMwwD,EAAaplD,2GAM3C,OAFIhM,KAAKqwD,mBAAmBvB,EAAAwC,oBAAoBtxD,MAEzCL,GAIDgwD,EAAA1tD,UAAAovD,iBAAR,SAAyBzwD,EAAcoL,EAAkB2K,4BAAA,IAAAA,MAAA,IAGvD,IAAInH,EAAUxD,EAAQwD,QACtB,GAAIA,EAAS,CACX,IAAI+hD,EAAY56C,EAAS/V,GAAQoL,EAAQtB,MAAQuxC,EAAAv2C,YAAY0V,MACzD9Y,EAAA2T,mBACA3T,EAAAwT,kBAEJ,GAAI9J,EAAQtB,MAAQuxC,EAAAv2C,YAAYoT,cAC9B,IAAmB,IAAAi0C,EAAAjgD,EAAA0C,EAAQ4G,UAAQo7C,EAAAzE,EAAA//C,QAAAwkD,EAAAvkD,KAAAukD,EAAAzE,EAAA//C,OAAE,EAA5BQ,EAAMgkD,EAAAlwD,OACDyO,GAAGzN,EAAA6M,YAAYnE,SAC3BhL,KAAKqxD,iBAAiB7jD,EAAOkE,WAAYlE,EAAQ+jD,8GAGnD,IAAmB,IAAAE,EAAA3kD,EAAA0C,EAAQ4G,UAAQs7C,EAAAD,EAAAzkD,QAAA0kD,EAAAzkD,KAAAykD,EAAAD,EAAAzkD,OAAE,CAAhC,IAAIQ,KAAMkkD,EAAApwD,OACFyO,GAAGzN,EAAA6M,YAAYuxC,UAC1B1gD,KAAKqxD,iBAAiB7jD,EAAOkE,WAAYlE,EAAQ+jD,sGAKvD,OAAQvlD,EAAQtB,MAGd,KAAKuxC,EAAAv2C,YAAY4L,OAEf,GADctF,EAAQ+D,GAAGzN,EAAA6M,YAAY+I,QAAUlM,EAAQ+D,GAAGzN,EAAA6M,YAAYkE,OAAS/Q,EAAA6M,YAAYqE,WAC1ExT,KAAKoI,QAAQwB,WAAU,GAStC5J,KAAKL,OAAO0uC,gBAAgBriC,EAAQ3B,aAAcsM,EAAS/V,QARvDmL,EAAuBC,EAASD,cAElC/L,KAAKsM,MACH/J,EAAAgK,eAAeolD,+BACf5lD,EAAYnL,KAAK6L,OAMvB,MAEF,KAAKwvC,EAAAv2C,YAAYsT,UAEb,IAAIjN,EADN,GAAK5I,OAAO6I,EAAQU,QAAQqD,GAAGzN,EAAA6M,YAAY+I,QAAWlY,KAAKoI,QAAQwB,WAAU,GAS3E5J,KAAKL,OAAO0uC,gBAAgBriC,EAAQ3B,aAAcsM,EAAS/V,QARvDmL,EAA0BC,EAASD,cAErC/L,KAAKsM,MACH/J,EAAAgK,eAAeolD,+BACf5lD,EAAYnL,KAAK6L,OAMvB,MAIF,KAAKwvC,EAAAv2C,YAAYwU,SACf,IACIzK,GADAb,EAAqB5C,GACAyD,UACrBA,EAAUyuC,mBAAqBzuC,EAAUC,eAAetM,SAE1DwL,EAAW5O,KAAK4xD,iBAAiBhjD,GACjC5O,KAAK6xD,iBAEHjjD,EAASmB,GAAGzN,EAAA6M,YAAY2iD,WAAW9xD,KAAKL,OAAOkuC,kBAAkBj/B,EAASvE,aAAcsM,EAAS/V,GACrG,MAIF,KAAKq7C,EAAAv2C,YAAY4P,SACf,IAAIzU,EAASsC,OAAkB6I,EAASuJ,iBACxCvV,KAAKqxD,iBAAiB/uD,EAAAqT,cAAgB/U,EAAMC,EAAQ8V,GACpD,IAAIo7C,EAAoB/lD,EAASwJ,gBAC7Bu8C,GAAQ/xD,KAAKqxD,iBAAiB/uD,EAAAsT,cAAgBhV,EAAMmxD,EAAQp7C,GAChE,MAIF,KAAKslC,EAAAv2C,YAAYmY,MACf,IAAIle,EAASK,KAAKL,OACdoP,EAAe/C,EAAS+C,KACxBijD,EAAajjD,EAAKwN,eAClB0pB,EAAiBj6B,EAAS8R,aAC1B/U,EAAY/I,KAAKoI,QAAQW,UACzBkpD,EAAiBjyD,KAAKoI,QAAQ6pD,eAG9BC,EAAav7C,EAASrU,EAAAqT,cAAgB/U,EAgB1C,GAfAjB,EAAOytC,YACL8kB,EACAlyD,KAAKgxD,mBAAmB,KAAMjiD,EAAMhG,GACpC,KACApJ,EAAO2pC,WACLv6B,EAAKc,SACLd,EAAKgB,GAAE,GACPpQ,EAAOqpC,eAAe,EAAGipB,GACzBD,EACA/rB,IAGJtmC,EAAOkuC,kBAAkBqkB,EAAYA,IAGhClmD,EAAQ+D,GAAGzN,EAAA6M,YAAYqE,UAAW,CACrC,IAAI2+C,EAAax7C,EAASrU,EAAAsT,cAAgBhV,EAC1CjB,EAAOytC,YACL+kB,EACAnyD,KAAKgxD,oBAAqBjiD,GAAQvM,EAAA6F,KAAKc,KAAMJ,GAC7C,KACApJ,EAAOgqC,YACL56B,EAAKc,SACLlQ,EAAOqpC,eAAe,EAAGipB,GACzBtyD,EAAOqpC,eAAe,EAAGgpB,GACzBA,EACA/rB,IAGJtmC,EAAOkuC,kBAAkBskB,EAAYA,GAEvC,MAIF,KAAKlW,EAAAv2C,YAAYsJ,uBACf,IAAqB,IAAAojD,EAAAtlD,EAAoBd,EAAS8N,UAAU1D,UAAQi8C,EAAAD,EAAAplD,QAAAqlD,EAAAplD,KAAAolD,EAAAD,EAAAplD,OAAE,CAAjE,IACCgJ,EAAepV,EACnB,IAFOgO,EAAQyjD,EAAA/wD,OAEFyO,GAAGzN,EAAA6M,YAAYC,SAE1B4G,IADIs8C,EAAW1jD,EAASvE,cACCqN,UAAU46C,EAAS17B,YAAY,MAE1D52B,KAAKqxD,iBAAiBr7C,EAAcpH,EAAU+H,qGAEhD,MAEF,KAAKslC,EAAAv2C,YAAYuI,oBACf,IAAqB,IAAAskD,EAAAzlD,EAAiBd,EAAS8N,UAAU1D,UAAQo8C,EAAAD,EAAAvlD,QAAAwlD,EAAAvlD,KAAAulD,EAAAD,EAAAvlD,OAAE,CAA9D,IAAI4B,EAGD0jD,EAFFt8C,EAAepV,EACnB,IAFOgO,EAAQ4jD,EAAAlxD,OAEFyO,GAAGzN,EAAA6M,YAAYC,SAE1B4G,IADIs8C,EAAW1jD,EAASvE,cACCqN,UAAU46C,EAAS17B,YAAY,MAE1D,IAAI67B,EAAO7jD,EAASuP,oBAChBs0C,GAAMzyD,KAAKqxD,iBAAiBr7C,EAAe1T,EAAA2T,mBAAqBw8C,EAAK/gD,WAAY+gD,EAAM97C,GAC3F3W,KAAKqxD,iBAAiBr7C,EAAcpH,EAAU+H,qGAEhD,MAIF,KAAKslC,EAAAv2C,YAAYqT,KACjB,KAAKkjC,EAAAv2C,YAAY0V,MACjB,KAAK6gC,EAAAv2C,YAAYoT,UAAW,MAE5B,QAAS3V,QAAO,KAOpBwsD,EAAA1tD,UAAAywD,oBAAA,SAAoB1qD,EAAwC2qD,GAC1D,IAAI7qD,EAAS9H,KAAKqY,QAAQtQ,mBAAmBC,GACzCF,EAAQ9H,KAAK8wD,cAAchpD,GAE7B9H,KAAKsM,MACH/J,EAAAgK,eAAeqmD,iBACfD,EAAWlmD,MAAOzE,IAMxB2nD,EAAA1tD,UAAA6uD,cAAA,SAAchpD,GACZ,IAAIA,EAAOiI,GAAGzN,EAAA6M,YAAY2iD,UAA1B,CACAhqD,EAAOsC,IAAI9H,EAAA6M,YAAY2iD,UAQvB,IALA,IAAIvoD,EAAgBvJ,KAAKoI,QAAQmB,cAC7B+I,EAAUxK,EAAOwK,QACjBs+C,EAAwB5wD,KAAK4wD,sBAC7BC,EAAoB7wD,KAAK6wD,kBACzBtmD,EAAazC,EAAOyC,WACflK,EAAI,EAAGwH,EAAI0C,EAAWnH,OAAQ/C,EAAIwH,IAAKxH,EAAG,CACjD,IAAIoK,EAAYF,EAAWlK,GAC3B,OAAQoK,EAAUC,MAChB,KAAKjI,EAAAkI,SAASC,kBAETrB,GAAkB+I,GAAW7H,EAAUsF,GAAGzN,EAAA6M,YAAYnE,WACnCP,EAAWooD,WAE/B7yD,KAAK8yD,wBAA0CroD,KAAe,MAEhE,MAEF,KAAKhI,EAAAkI,SAASW,qBAAsB,MACpC,KAAK7I,EAAAkI,SAASG,iBACRvB,GAAkB+I,GAAW7H,EAAUsF,GAAGzN,EAAA6M,YAAYnE,UACxDhL,KAAK+yD,uBAAwCtoD,GAE/C,MAEF,KAAKhI,EAAAkI,SAASO,qBAET3B,GAAkB+I,GAAW7H,EAAUsF,GAAGzN,EAAA6M,YAAYnE,WAChCP,EAAWooD,WAElC7yD,KAAKgzD,2BAAgDvoD,MAEvD,MAEF,KAAKhI,EAAAkI,SAASS,OACZpL,KAAK0yD,oBACejoD,EAAW7C,eACX6C,EAAWkC,MAE/B,MAEF,KAAKlK,EAAAkI,SAASa,sBACRjC,GAAkB+I,GAAW7H,EAAUsF,GAAGzN,EAAA6M,YAAYnE,UACxDhL,KAAKizD,4BAAkDxoD,GAEzD,MAEF,KAAKhI,EAAAkI,SAASiB,SACZ,IAAIsnD,EAAelzD,KAAKmzD,yBAA4C1oD,GAChEyoD,GAAcrC,EAAkB1+C,KAAK+gD,GACzC,MAEF,KAAKzwD,EAAAkI,SAASK,OACuC,MAA7BP,EAAW7C,gBAC/B5H,KAAK0yD,oBACuBjoD,EAAW7C,eACM6C,EAAWkC,OAGtDpD,GAAiB+I,IACnBtS,KAAKozD,uBAAwC3oD,GAE/C,MAEF,QACE,IAAI4oD,EAAmBrzD,KAAKuf,gBAC5Bvf,KAAKuf,gBAAkBqxC,EACvBC,EAAkB1+C,KAAKnS,KAAKszD,iBAAiB7oD,IAC7CzK,KAAKuf,gBAAkB8zC,MAS/B1D,EAAA1tD,UAAAsxD,yBAAA,SAAyBxnD,GAEvB,IAAIC,EAAU7I,OAAOnD,KAAKqY,QAAQlS,eAAejF,IAAI6K,EAAY0F,wBAEjE,OADAtO,OAAO6I,EAAQtB,MAAQuxC,EAAAv2C,YAAY4L,QAC9BtR,KAAKwzD,cAAsBxnD,GACjBA,EADkC,MAInD2jD,EAAA1tD,UAAAuxD,cAAA,SAAcC,GACZ,GAAIA,EAAO1jD,GAAGzN,EAAA6M,YAAY2iD,UAAW,OAAO,EAC5C2B,EAAOrpD,IAAI9H,EAAA6M,YAAY2iD,UAEvB,IAAInyD,EAASK,KAAKL,OACdoM,EAAc0nD,EAAO1nD,YACrB2nD,EAA0B,EAE9B,GAAID,EAAO1kD,MAAQvM,EAAA6F,KAAKc,KACtB,GAAI4C,EAGF,GAAIA,EAAYgD,KAAM,CACpB,IAAI4kD,EAAe3zD,KAAKqH,SAASusD,YAAY7nD,EAAYgD,MACzD,IAAK4kD,EAAc,OAAO,EAC1B,GAAIA,GAAgBnxD,EAAA6F,KAAKc,KAKvB,OAJAnJ,KAAKsM,MACH/J,EAAAgK,eAAesnD,cACf9nD,EAAYgD,KAAKtC,QAEZ,EAETgnD,EAAO1kD,KAAO4kD,MAGT,KAAI5nD,EAAY0N,YAqBrB,OAJAzZ,KAAKsM,MACH/J,EAAAgK,eAAesnD,cACf9nD,EAAYnL,KAAK6L,MAAMqnD,QAElB,EAfP,GALAJ,EAAW1zD,KAAK+zD,4BACdhoD,EAAY0N,YACZjX,EAAA6F,KAAKc,KAAI,GAGPnJ,KAAK+vD,aAAevtD,EAAA6F,KAAKc,KAK3B,OAJAnJ,KAAKsM,MACH/J,EAAAgK,eAAeynD,mCACfjoD,EAAY0N,YAAYhN,MAAOzM,KAAK+vD,YAAY9+C,WAAY,WAEvD,EAETwiD,EAAO1kD,KAAO/O,KAAK+vD,iBAWrB5sD,QAAO,GAKX,GAAIswD,EAAO1jD,GAAGzN,EAAA6M,YAAYE,UAAYokD,EAAOpiD,aAAa4qC,EAAAt2C,eAAemL,SAAU,OAAO,EAE1F,IAAIkhD,EAAayB,EAAO1kD,KAAKwN,eACzB03C,EAAqBR,EAAO1jD,GAAGzN,EAAA6M,YAAY+I,QAAUu7C,EAAO1jD,GAAGzN,EAAA6M,YAAYkE,OAAS/Q,EAAA6M,YAAYqE,UAGpG,GAAIigD,EAAO1jD,GAAGzN,EAAA6M,YAAYE,SAGxB,OAAI4kD,GAAsBj0D,KAAKoI,QAAQwB,WAAU,IAC/C6pD,EAAOrpD,IAAI9H,EAAA6M,YAAY+kD,eACnBnoD,EACFooD,EAAiBV,EAAQ1nD,IAEzB0jD,EAA8B,MAC9BC,EAA+B+D,EAAO/hD,YAExC/R,EAAOwvC,gBACLskB,EAAOppD,aACPolD,EACAC,EACAsC,GAEFyB,EAAOrpD,IAAI9H,EAAA6M,YAAY2iD,WAChB,IAIP9xD,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfxR,OAAO4I,GAAaU,QAGjB,GAKT,IAAI2nD,GAAoB,EAGxB,GAAoB,OAAhBroD,GAAoD,OAA5BA,EAAY0N,aA0BtC,GAzBKi6C,IACHA,EAAW1zD,KAAKq0D,kBACdtoD,EAAY0N,YACZg6C,EAAO1kD,KAAI,MAMXrM,EAAAyf,gBAAgBuxC,IAAahxD,EAAA0f,aAAa+C,QACxC8uC,GACFP,EAAW/zD,EAAOmyC,qBAAqB4hB,GACnChxD,EAAAyf,gBAAgBuxC,IAAahxD,EAAA0f,aAAa+C,QAC5CnlB,KAAKs7B,QACH/4B,EAAAgK,eAAe+nD,4DACfvoD,EAAYU,OAEd2nD,GAAoB,IAGtBA,GAAoB,GAKpBX,EAAOpiD,aAAa4qC,EAAAt2C,eAAe4N,UAChC6gD,EAAmB,CAGtB,OAFAjxD,OAAOT,EAAAyf,gBAAgBuxC,IAAahxD,EAAA0f,aAAa+C,OAClCziB,EAAA8jB,kBAAkBktC,IAE/B,OACED,EAAOr6C,kBAAiB,EACxBq6C,EAAOp6C,qBAAuBhQ,QAAQ3G,EAAA0iB,iBAAiBsuC,GAAW,GAClE,MAEF,OACED,EAAOr6C,kBAAiB,EACxBq6C,EAAOp6C,qBAAuBhQ,QAC5B3G,EAAA+jB,oBAAoBitC,GACpBhxD,EAAAozC,qBAAqB4d,IAEvB,MAEF,OACED,EAAOr6C,kBAAiB,EACxBq6C,EAAOl6C,mBAAqB7W,EAAAgkB,iBAAiBgtC,GAC7C,MAEF,OACED,EAAOr6C,kBAAiB,EACxBq6C,EAAOl6C,mBAAqB7W,EAAAikB,iBAAiB+sC,GAC7C,MAEF,QAEE,OADAvwD,QAAO,IACA,EAGXswD,EAAOrpD,IAAI9H,EAAA6M,YAAYmK,eAM3Bo6C,EAAWD,EAAO1kD,KAAKyuC,aAAa79C,GAGtC,IAAI0K,EAAeopD,EAAOppD,aAS1B,OAPI+pD,GACFz0D,EAAOotC,UAAU1iC,EAAc2nD,GAAY,EAAMyB,EAAO1kD,KAAKyuC,aAAa79C,IAC1EK,KAAK6wD,kBAAkB1+C,KAAKxS,EAAOqrC,gBAAgB3gC,EAAcqpD,KAGjE/zD,EAAOotC,UAAU1iC,EAAc2nD,GAAaiC,EAAoBP,IAE3D,GAKT/D,EAAA1tD,UAAA8wD,uBAAA,SAAuBhnD,GACrB,IAAIC,EAAU7I,OAAOnD,KAAKqY,QAAQlS,eAAejF,IAAI6K,EAAY0F,wBAEjE,OADAtO,OAAO6I,EAAQtB,MAAQuxC,EAAAv2C,YAAYqT,MAC9B/Y,KAAKu0D,YAAkBvoD,GACfA,EADgC,MAI/C2jD,EAAA1tD,UAAAsyD,YAAA,SAAYvoD,WACV,GAAIA,EAAQ+D,GAAGzN,EAAA6M,YAAY2iD,UAAW,OAAO,EAC7C9lD,EAAQ5B,IAAI9H,EAAA6M,YAAY2iD,UAExB,IAAInyD,EAASK,KAAKL,OAClBK,KAAK8vD,YAAc9jD,EACnB,IAAIwoD,EAAkC,KAClCC,GAAqB,EAEzB,GAAIzoD,EAAQwD,YACV,IAAmB,IAAAmM,EAAA7O,EAAAd,EAAQwD,QAAQ4G,UAAQlJ,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAAxC,IAAIQ,EAAMN,EAAA5L,MACb,GAAIkM,EAAO9C,MAAQuxC,EAAAv2C,YAAYsT,UAA/B,CACA,IAAI07C,GAAc,EACd7Z,EAAiBrtC,EACjBmnD,EAAmB9Z,EAAI9uC,YAC3B8uC,EAAIzwC,IAAI9H,EAAA6M,YAAY2iD,UACpB,IAAI4B,OAAQ,EACRiB,EAAiBrzD,OACnBoyD,EAAW1zD,KAAKq0D,kBACFM,EAAiBrzD,MAC7BkB,EAAA6F,KAAKG,IAAG,KAIN9F,EAAAyf,gBAAgBuxC,IAAahxD,EAAA0f,aAAa+C,QACxCnZ,EAAQ+D,GAAGzN,EAAA6M,YAAY+I,QACzBw7C,EAAW/zD,EAAOmyC,qBAAqB4hB,GACnChxD,EAAAyf,gBAAgBuxC,IAAahxD,EAAA0f,aAAa+C,QAC5CnlB,KAAKsM,MACH/J,EAAAgK,eAAeqoD,0EACfD,EAAiBrzD,MAAMmL,OAEzBioD,GAAc,IAGhBA,GAAc,IAGQ,MAAjBF,EACTd,EAAW/zD,EAAOgoC,UAAU,IAExB8sB,GACFz0D,KAAKsM,MACH/J,EAAAgK,eAAesoD,kCACfF,EAAiBloD,OAGrBinD,EAAW/zD,EAAO+oC,aAAahmC,EAAAsgB,SAAS8xC,OACtCn1D,EAAOypC,gBAAgBorB,EAAcnqD,aAAY,GACjD1K,EAAOgoC,UAAU,IAEnB+rB,EAAW/zD,EAAOmyC,qBAAqB4hB,GACnChxD,EAAAyf,gBAAgBuxC,IAAahxD,EAAA0f,aAAa+C,QACxCnZ,EAAQ+D,GAAGzN,EAAA6M,YAAY+I,QACzBlY,KAAKsM,MACH/J,EAAAgK,eAAeqoD,0EACfD,EAAiBloD,OAGrBioD,GAAc,IAGdA,GACF/0D,EAAOotC,UAAU8N,EAAIxwC,aAAY,GAAkB,EAAM1K,EAAOgoC,UAAU,IAC1E3nC,KAAK6wD,kBAAkB1+C,KAAKxS,EAAOqrC,gBAAgB6P,EAAIxwC,aAAcqpD,IACrEe,GAAqB,IAErB90D,EAAOotC,UAAU8N,EAAIxwC,aAAY,GAAmB2B,EAAQ+D,GAAGzN,EAAA6M,YAAY+I,OAAQw7C,GACnFe,GAAqB,GAEvBD,EAA2B3Z,qGAI/B,OADA76C,KAAK8vD,YAAc,MACZ,GAMTH,EAAA1tD,UAAA+wD,2BAAA,SACEjnD,EACAiS,EACA/D,QAAA,IAAAA,MAAA,MAEA,IAAIjO,EAAU7I,OAAOnD,KAAKqY,QAAQlS,eAAejF,IAAI6K,EAAY0F,wBAEjE,OADAtO,OAAO6I,EAAQtB,MAAQuxC,EAAAv2C,YAAYsJ,oBAC5BhP,KAAK+0D,kCACS/oD,EACnBgS,EACA/D,EACA,KACoBjO,EAASD,YAAYnL,OAK7C+uD,EAAA1tD,UAAA8yD,kCAAA,SACE9yD,EACA+b,EACA/D,EACAU,EACAg4C,GAEA,IAAI/jD,EAAW5O,KAAKqH,SAAS2tD,iCAC3B/yD,EACA+b,EACA/D,EACA04C,GAEF,OAAK/jD,GACLA,EAAS+L,WAAaA,EACjB3a,KAAKi1D,gBAAgBrmD,GACnBA,EADqC,MAFtB,MAOxB+gD,EAAA1tD,UAAA+uD,mBAAA,SACEthD,EACAE,EACA2L,QAAA,IAAAA,MAAA,MAEA,IACI2rB,EADAuX,EAAgB/uC,EAAiBA,EAAetM,OAAS,EAEzDuW,EAAQ,EAQZ,GAPI4B,IACF2rB,EAAa,IAAIp9B,MAAM,EAAI20C,IAChB,GAAKljC,EAASgB,eACzB5C,EAAQ,GAERutB,EAAa,IAAIp9B,MAAM20C,GAErB/uC,EACF,IAAK,IAAIrP,EAAI,EAAGA,EAAIo+C,IAAiBp+C,IAAKsZ,EACxCutB,EAAWvtB,GAASjK,EAAerP,GAAGkc,eAG1C,IAAI24C,EAAatlD,EAAW2M,eACxB5c,EAASK,KAAKL,OACdguC,EAAUhuC,EAAO4nC,2BAA2B2tB,EAAYhuB,GAC5D,IAAKyG,EAAS,CACZ,IAAI/sC,EAAO4B,EAAAu7C,UAAUe,oBAAoBpvC,EAAgBE,EAAY2L,GACrEoyB,EAAUhuC,EAAOsnC,gBAAgBrmC,EAAMs0D,EAAYhuB,GAErD,OAAOyG,GAITgiB,EAAA1tD,UAAAgzD,gBAAA,SAAgBrmD,GACd,GAAIA,EAASmB,GAAGzN,EAAA6M,YAAY2iD,UAAW,OAAO,EAC9C3uD,SAASyL,EAASmB,GAAGzN,EAAA6M,YAAYE,UAAYT,EAASyC,aAAa4qC,EAAAt2C,eAAemL,WAClFlC,EAASxE,IAAI9H,EAAA6M,YAAY2iD,UAGzB,IAkBIt3C,EAlBAzO,EAAc6C,EAAS3M,UAAU8J,YACjCimB,EAAOjmB,EAAYimB,KACnBA,EACEpjB,EAASmB,GAAGzN,EAAA6M,YAAYE,UAC1BrP,KAAKsM,MACH/J,EAAAgK,eAAe4oD,yDACfppD,EAAYnL,KAAK6L,OAIhBmC,EAASmB,GAAGzN,EAAA6M,YAAYE,UAC3BrP,KAAKsM,MACH/J,EAAAgK,eAAe6oD,gFACfrpD,EAAYnL,KAAK6L,OAMvB,IAAIgD,EAAYb,EAASa,UACrBk+B,EAAU3tC,KAAKgxD,mBAAmBvhD,EAAUC,eAAgBD,EAAUG,WAAYH,EAAU8L,UAC5F5b,EAASK,KAAKL,OAClB,GAAIqyB,EAAM,CACR,IAAIqjC,EAAgBzmD,EAASmB,GAAGzN,EAAA6M,YAAY4E,aACxCnE,EAAahB,EAASa,UAAUG,WAGhCyjD,EAAmBrzD,KAAKuf,gBAC5Bvf,KAAKuf,gBAAkB3Q,EACvB,IAAIqN,EAAOrN,EAASqN,KAChBkO,OAAI,EACR,GAAI6H,EAAKtnB,MAAQjI,EAAAkI,SAASmtB,WACxB30B,QAAQyL,EAASM,MAAM5M,EAAA6M,YAAY4E,YAAczR,EAAA6M,YAAY2D,IAAMxQ,EAAA6M,YAAY4D,IAAMzQ,EAAA6M,YAAYG,OACjGnM,OAAOyL,EAASmB,GAAGzN,EAAA6M,YAAYwd,QAC/BxC,EAAOnqB,KAAKq0D,kBACYriC,EAAM7G,WAC5Bvb,EAAU,KAIZqM,EAAK7R,IAAG,GACH6R,EAAK+F,YAAYmI,EAAMva,IAAaqM,EAAK7R,IAAG,GACjD6R,EAAKc,eACA,CACL5Z,OAAO6uB,EAAKtnB,MAAQjI,EAAAkI,SAASyrB,OAC7B,IAAIk/B,EAAQt1D,KAAKu1D,kBAAmCvjC,EAAMznB,YAiB1D,GAhBIqE,EAASmB,GAAGzN,EAAA6M,YAAYG,QAC1B3P,EAAOotC,UAAU,WAAU,GAAkB,EAAMptC,EAAOgoC,UAAU,IACpE2tB,EAAME,QACJ71D,EAAOgsC,SACLhsC,EAAO4oC,YACL7lC,EAAAwjB,QAAQC,OACRxmB,EAAOypC,gBAAgB,WAAU,IAEnCzpC,EAAOurC,YAAY,MACjBvrC,EAAO6sC,WAAW,QAAS,KAAI,GAC/B7sC,EAAOqrC,gBAAgB,WAAYrrC,EAAOgoC,UAAU,SAK5D1rB,EAAKc,WACDs4C,EAAe,CACjB,IAAIpD,EAAiBjyD,KAAKoI,QAAQ6pD,eAIlC,GAHA9uD,OAAOyL,EAASmB,GAAGzN,EAAA6M,YAAYkM,YAG1BY,EAAKlM,GAAE,GAGV,GAAIkM,EAAKlM,GAAE,IACTulD,EAAMnjD,KAAKxS,EAAOqpC,eAAe,EAAGipB,QAG/B,CACL,IAAIvlD,EAASvJ,OAAOyL,EAASlC,QAC7BvJ,OAAOuJ,EAAOhC,MAAQuxC,EAAAv2C,YAAY0V,OAClCk6C,EAAMnjD,KAAKxS,EAAOupC,eAAe,EAC/BlpC,KAAKy1D,wBAA+B/oD,EAAQX,EAAYnL,cAMrDgP,GAAcpN,EAAA6F,KAAKc,MAAS8S,EAAKlM,GAAE,IAC5C/P,KAAKsM,MACH/J,EAAAgK,eAAempD,+DACf3pD,EAAY0D,UAAUG,WAAWnD,OAGrC0d,EAAQmrC,EAAMlyD,OAEM,GAAhBkyD,EAAMlyD,OACJkyD,EAAM,GACN31D,EAAOurC,YAAY,KAAMoqB,EAAO1lD,EAAW2M,gBAH7C5c,EAAOksC,YAgBb,GAXA7rC,KAAKuf,gBAAkB8zC,EAGvB74C,EAAM7a,EAAOytC,YACXx+B,EAASvE,aACTsjC,EACAnrC,EAAAm7C,mBAAmB/uC,EAASyL,kBAC5B8P,GAIEvb,EAASyC,aAAa4qC,EAAAt2C,eAAeyR,UAAW,CAClD,IAAI1G,EAAYvN,OAAOV,EAAAgR,cAAchR,EAAAY,cAAc+T,SAAUrL,EAAYwE,aACzEvQ,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfjE,EAAUjE,aAKdmC,EAASxE,IAAI9H,EAAA6M,YAAY+kD,eACzBC,EAAiBvlD,EAAU7C,GAG3ByO,EAAM7a,EAAO8uC,kBACX7/B,EAASvE,aACTolD,EACAC,EACA/hB,GAKJ,OADA/+B,EAASmO,SAASpd,EAAQ6a,IACnB,GAKTm1C,EAAA1tD,UAAAgxD,4BAAA,SAA4BlnD,GAG1B,IAFA,IAAIyD,EAAUzD,EAAYyD,QACtBjG,EAAgBvJ,KAAKoI,QAAQmB,cACxBlJ,EAAI,EAAGwH,EAAI2H,EAAQpM,OAAQ/C,EAAIwH,IAAKxH,EAAG,CAC9C,IAAImN,EAASgC,EAAQnP,GACrB,OAAQmN,EAAO9C,MACb,KAAKjI,EAAAkI,SAASC,kBAETrB,IAAiBiE,EAAOuC,GAAGzN,EAAA6M,YAAYnE,SACpBwC,EAAQqlD,WAE5B7yD,KAAK8yD,wBAA0CtlD,MAEjD,MAEF,KAAK/K,EAAAkI,SAASW,sBAET/B,IAAiBiE,EAAOuC,GAAGzN,EAAA6M,YAAYnE,SAChBwC,EAAQqlD,WAEhC7yD,KAAK21D,4BAAkDnoD,MAEzD,MAEF,KAAK/K,EAAAkI,SAASG,iBACRvB,GAAiBiE,EAAOuC,GAAGzN,EAAA6M,YAAYnE,UACzChL,KAAK+yD,uBAAwCvlD,GAE/C,MAEF,KAAK/K,EAAAkI,SAASO,qBAET3B,IAAiBiE,EAAOuC,GAAGzN,EAAA6M,YAAYnE,SACjBwC,EAAQqlD,WAE/B7yD,KAAKgzD,2BAAgDxlD,MAEvD,MAEF,KAAK/K,EAAAkI,SAASa,sBACRjC,GAAiBiE,EAAOuC,GAAGzN,EAAA6M,YAAYnE,UACzChL,KAAKizD,4BAAkDzlD,GAEzD,MAEF,KAAK/K,EAAAkI,SAASiB,SACZ,GAAIrC,GAAiBiE,EAAOuC,GAAGzN,EAAA6M,YAAYnE,QAAS,CAClD,IAAIkoD,EAAelzD,KAAKmzD,yBAA4C3lD,GAAQ,GACxE0lD,GAAclzD,KAAK6wD,kBAAkB1+C,KAAK+gD,GAEhD,MAEF,QAAS/vD,QAAO,MAKtBwsD,EAAA1tD,UAAA2zD,iBAAA,SAAiBl0D,WACf,GAAKA,EAAG8N,QAAR,CAEA,IAAIjG,EAAgBvJ,KAAKoI,QAAQmB,kBACjC,IAAoB,IAAAoS,EAAA7O,EAAApL,EAAG8N,QAAQ4G,UAAQlJ,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAApC,IAAIhB,EAAOkB,EAAA5L,MACd,OAAQ0K,EAAQtB,MACd,KAAKuxC,EAAAv2C,YAAYuI,iBAGX1E,IACiByC,EAAS+D,GAAGzN,EAAA6M,YAAYnE,SACpBgB,EAAS+D,GAAGzN,EAAA6M,YAAYC,UAE/CpP,KAAK61D,+BAA+C7pD,MAEtD,MAEF,KAAKiwC,EAAAv2C,YAAYqT,KACf/Y,KAAKu0D,YAAkBvoD,GACvB,MAEF,KAAKiwC,EAAAv2C,YAAYsJ,mBACf,IAEIzF,GAAqCyC,EAAS+D,GAAGzN,EAAA6M,YAAYnE,WACrCgB,EAAS+D,GAAGzN,EAAA6M,YAAYC,SAClD,CACA,GAAIpD,EAAQqF,aAAa4qC,EAAAt2C,eAAemL,SAAU,MAClD9Q,KAAK+0D,kCACgB/oD,KAEnB,KACA,KACoBA,EAASD,YAAYnL,MAG7C,MAEF,KAAKq7C,EAAAv2C,YAAY4L,OACftR,KAAKwzD,cAAsBxnD,GAC3B,MAEF,KAAKiwC,EAAAv2C,YAAYoT,UACf9Y,KAAK41D,iBAA4B5pD,yGASzC2jD,EAAA1tD,UAAAmxD,uBAAA,SAAuB3oD,GACrB,IAAIlE,EAAmBvG,KAAKqY,QAAQ9R,iBAChCiJ,EAAU/E,EAAU+E,QACxB,GAAKA,EACL,IAAK,IAAInP,EAAI,EAAGwH,EAAI2H,EAAQpM,OAAQ/C,EAAIwH,IAAKxH,EAAG,CAC9C,IAAImN,EAASgC,EAAQnP,GACjB2L,EAAUzF,EAAiBrF,IAC7BuJ,EAAUgC,MAAM3E,OAAO2O,aAAenU,EAAAuU,eAAiBrJ,EAAOtB,aAAaU,MAE7E,GAAKZ,EACL,OAAQA,EAAQtB,MACd,KAAKuxC,EAAAv2C,YAAYuI,gBACOjC,EAAS+D,GAAGzN,EAAA6M,YAAYC,UAC5CpP,KAAK61D,+BAA+C7pD,MAEtD,MAEF,KAAKiwC,EAAAv2C,YAAYqT,KACf/Y,KAAKu0D,YAAkBvoD,GACvB,MAEF,KAAKiwC,EAAAv2C,YAAYsJ,oBAEQhD,EAAS+D,GAAGzN,EAAA6M,YAAYC,UAC7C3E,EAAUgC,MAAM3E,OAAOwK,SAEvBtS,KAAK+0D,kCACgB/oD,KAEnB,KACA,KACoBA,EAASD,YAAYnL,MAG7C,MAEF,KAAKq7C,EAAAv2C,YAAY4L,OACftR,KAAKwzD,cAAsBxnD,GAC3B,MAEF,KAAKiwC,EAAAv2C,YAAYoT,UACf9Y,KAAK41D,iBAA4B5pD,MASzC2jD,EAAA1tD,UAAA6wD,wBAAA,SACE/mD,EACAiS,EACA/D,QAAA,IAAAA,MAAA,MAEA,IAAIjO,EAAU7I,OAAOnD,KAAKqY,QAAQlS,eAAejF,IAAI6K,EAAY0F,wBACjEtO,OAAO6I,EAAQtB,MAAQuxC,EAAAv2C,YAAYuI,iBACnCjO,KAAK61D,+BACa7pD,EAChBgS,EACA/D,EACAlO,IAIJ4jD,EAAA1tD,UAAA4zD,+BAAA,SACE5zD,EACA+b,EACA/D,EACA67C,QADA,IAAA77C,MAAA,WACA,IAAA67C,MAAA,MAEA,IAAIlnD,EAAW5O,KAAKqH,SAAS0uD,8BAC3B9zD,EACA+b,EACA/D,EACA67C,GAAyB7zD,EAAU8J,aAEhC6C,GACL5O,KAAKg2D,aAAapnD,IAGpB+gD,EAAA1tD,UAAA+zD,aAAA,SAAapnD,eACX,GAAIA,EAASmB,GAAGzN,EAAA6M,YAAY2iD,UAAW,OAAO,EAC9CljD,EAASxE,IAAI9H,EAAA6M,YAAY2iD,UAEzB,IAAImE,EAAgBrnD,EAAS3M,UAAUuN,QACvC,GAAIymD,MACF,IAAoB,IAAA/oD,EAAAJ,EAAAmpD,EAAc7/C,UAAQ7H,EAAArB,EAAAF,QAAAuB,EAAAtB,KAAAsB,EAAArB,EAAAF,OAAE,CAC1C,QADOhB,EAAOuC,EAAAjN,OACEoJ,MACd,KAAKuxC,EAAAv2C,YAAY4L,OACftR,KAAKwzD,cAAsBxnD,GAC3B,MAEF,KAAKiwC,EAAAv2C,YAAYsJ,mBAEQhD,EAAS+D,GAAGzN,EAAA6M,YAAYC,UAE7CpP,KAAK+0D,kCACgB/oD,KACf,KAAM,KACUA,EAASD,YAAYnL,MAG7C,MAEF,KAAKq7C,EAAAv2C,YAAY4P,UACXzU,EAAoBmL,EAASuJ,kBAE/BvV,KAAK+0D,kCACHl0D,KACI,KAAM,KACVA,EAAOkL,YAAYnL,OAGnBmxD,EAAoB/lD,EAASwJ,kBAE/BxV,KAAK+0D,kCACHhD,KACI,KAAM,KACVA,EAAOhmD,YAAYnL,yGAQ/B,IAAIs1D,EAAetnD,EAASuP,oBACxB+3C,GAAcl2D,KAAKi1D,gBAAgBiB,GACvC,IAAIviD,EAAkB/E,EAASY,QAC/B,GAAImE,MACF,IAAoB,IAAAo5C,EAAAjgD,EAAA6G,EAAgByC,UAAQo7C,EAAAzE,EAAA//C,QAAAwkD,EAAAvkD,KAAAukD,EAAAzE,EAAA//C,OAAE,CAAzC,IAAIhB,EACP,QADOA,EAAOwlD,EAAAlwD,OACEoJ,MACd,KAAKuxC,EAAAv2C,YAAYsJ,mBAEQhD,EAAS+D,GAAGzN,EAAA6M,YAAYC,UAE7CpP,KAAK+0D,kCACgB/oD,KAEnB4C,EAASqL,wBACT,KACoBjO,EAASD,YAAYnL,MAG7C,MAEF,KAAKq7C,EAAAv2C,YAAYmY,MACf7R,EAAQ5B,IAAI9H,EAAA6M,YAAY2iD,UACxB,MAEF,KAAK7V,EAAAv2C,YAAY4P,SACf,IAAIzU,EAQAkxD,GARAlxD,EAAoBmL,EAASuJ,kBAE/BvV,KAAK+0D,kCACHl0D,KACI+N,EAASqL,wBAAyB,KACtCpZ,EAAOkL,YAAYnL,OAGnBmxD,EAAoB/lD,EAASwJ,kBAE/BxV,KAAK+0D,kCACHhD,KACInjD,EAASqL,wBAAyB,KACtC83C,EAAOhmD,YAAYnL,yGAQ/B,OAAO,GAGT+uD,EAAA1tD,UAAA0zD,4BAAA,SACE5pD,EACAiS,EACA/D,EACA67C,QADA,IAAA77C,MAAA,WACA,IAAA67C,MAAA,MAGA91D,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACf5I,EAAYU,QAOhBkjD,EAAA1tD,UAAAk0D,iBAAA,SAAiBnwB,EAAoBowB,QAAA,IAAAA,MAAA,GACnC,IAAIt4C,EAAemzC,UAAUjxD,KAAK8d,aAAcs4C,GAC5ClwB,EAAUxjC,EAAAqjC,cAAcpkC,OAAOqkC,EAAQloB,GAG3C,OAFA9d,KAAKgwD,eAAe79C,KAAK+zB,GACzBlmC,KAAK8d,aAAe0qC,QAAQ1qC,EAAczU,QAAQ28B,EAAO5iC,OAAQ,IAC1D8iC,GAMTypB,EAAA1tD,UAAAo0D,yBAAA,SAAyB5lB,GAEvB,GADAttC,OAAOstC,EAAK1gC,GAAGzN,EAAA6M,YAAY2iD,WACvBrhB,EAAKh2B,oBAAsB,EAC7B,OAAOg2B,EAAKh2B,mBAEd,IAAIy1C,EAAgBlwD,KAAKkwD,cACrBv2C,EAAQu2C,EAAc9sD,OAO1B,OANKqtC,EAAK1gC,GAAGzN,EAAA6M,YAAYmnD,aAAe7lB,EAAKhhC,UAAUyuC,mBAAqBzN,EAAKhhC,UAAUC,eAAetM,SAExGqtC,EAAOzwC,KAAK4xD,iBAAiBnhB,IAE/Byf,EAAc/9C,KAAKs+B,EAAKpmC,cACxBomC,EAAKh2B,mBAAqBd,EACnBA,GAKTg2C,EAAA1tD,UAAAqxD,iBAAA,SAAiB7oD,GACf,IACI0f,EADAxqB,EAASK,KAAKL,OAElB,OAAQ8K,EAAUC,MAChB,KAAKjI,EAAAkI,SAASyrB,MACZjM,EAAOnqB,KAAKu2D,sBAAsC9rD,GAClD,MAEF,KAAKhI,EAAAkI,SAAS4sB,MACZpN,EAAOnqB,KAAKw2D,sBAAsC/rD,GAClD,MAEF,KAAKhI,EAAAkI,SAAS6sB,SACZrN,EAAOnqB,KAAKy2D,yBAA4ChsD,GACxD,MAEF,KAAKhI,EAAAkI,SAAS8sB,GACZtN,EAAOnqB,KAAK02D,mBAAgCjsD,GAC5C,MAEF,KAAKhI,EAAAkI,SAAS+sB,MACZvN,EAAOnqB,KAAK22D,sBAAsClsD,GAClD,MAEF,KAAKhI,EAAAkI,SAASmtB,WACZ3N,EAAOnqB,KAAK42D,2BAAgDnsD,GAC5D,MAEF,KAAKhI,EAAAkI,SAASqtB,IACZ7N,EAAOnqB,KAAK62D,oBAAkCpsD,GAC9C,MAEF,KAAKhI,EAAAkI,SAASstB,GACZ9N,EAAOnqB,KAAK82D,mBAAgCrsD,GAC5C,MAEF,KAAKhI,EAAAkI,SAASwtB,OACZhO,EAAOnqB,KAAK+2D,uBAAwCtsD,GACpD,MAEF,KAAKhI,EAAAkI,SAAS0tB,OACZlO,EAAOnqB,KAAKg3D,uBAAwCvsD,GACpD,MAEF,KAAKhI,EAAAkI,SAAS2tB,MACZnO,EAAOnqB,KAAKi3D,sBAAsCxsD,GAClD,MAEF,KAAKhI,EAAAkI,SAAS4tB,IACZpO,EAAOnqB,KAAKk3D,oBAAkCzsD,GAC9C,MAEF,KAAKhI,EAAAkI,SAASiB,UACZue,EAAOnqB,KAAKmzD,yBAA4C1oD,MAC7C0f,EAAOxqB,EAAOksC,aACzB,MAEF,KAAKppC,EAAAkI,SAAS8tB,KACZtO,EAAOnqB,KAAKm3D,qBAAoC1sD,GAChD,MAEF,KAAKhI,EAAAkI,SAAS+tB,MACZvO,EAAOnqB,KAAKo3D,sBAAsC3sD,GAClD,MAEF,KAAKhI,EAAAkI,SAASe,gBAGZ,GAAI1L,KAAKuf,iBAAmBvf,KAAK4wD,sBAC/B,OAAOjxD,EAAOksC,YAIlB,QACE1oC,QAAO,GACPgnB,EAAOxqB,EAAOktC,oBAIlB,OADI7sC,KAAKoI,QAAQ4U,WAAWhd,KAAKq3D,iBAAiBltC,EAAM1f,EAAUgC,OAC3D0d,GAGTwlC,EAAA1tD,UAAAszD,kBAAA,SAAkBhrD,GAChB,IAAI+sD,EAAgB/sD,EAAWnH,OAC3BkyD,EAAQ,IAAIxrD,MAAqBwtD,GACrChC,EAAMlyD,OAAS,EAEf,IADA,IAAI6Y,EAAOjc,KAAKuf,gBAAgBtD,KACvB5b,EAAI,EAAGA,EAAIi3D,IAAiBj3D,EAAG,CACtC,IAAI8pB,EAAOnqB,KAAKszD,iBAAiB/oD,EAAWlK,IAC5C,OAAQqC,EAAAyf,gBAAgBgI,IACtB,KAAKznB,EAAA0f,aAAa8E,MAChB,IAAKxkB,EAAAykB,aAAagD,GAAO,CACvB,IAAK,IAAI3f,EAAI,EAAG3C,EAAInF,EAAA0kB,mBAAmB+C,GAAO3f,EAAI3C,IAAK2C,EAAG8qD,EAAMnjD,KAAKzP,EAAA4kB,cAAc6C,EAAM3f,IACzF,MAIJ,QAAS8qD,EAAMnjD,KAAKgY,GACpB,KAAKznB,EAAA0f,aAAam1C,KAEpB,GAAIt7C,EAAK/M,MAAK,IAA6B,CACrCxM,EAAA+4C,yBAAyBtxB,IAAOmrC,EAAMnjD,KAAKnS,KAAKL,OAAOktC,qBAC3D,OAGJ,OAAOyoB,GAGT3F,EAAA1tD,UAAAs0D,sBAAA,SAAsB9rD,GACpB,IAAIF,EAAaE,EAAUF,WACvBiV,EAAaxf,KAAKuf,gBAAgBtD,KAClCA,EAAOuD,EAAWO,OACtB/f,KAAKuf,gBAAgBtD,KAAOA,EAE5B,IAAIq5C,EAAQt1D,KAAKu1D,kBAAkBhrD,GAC/B4f,EAAuB,GAAhBmrC,EAAMlyD,OACbpD,KAAKL,OAAOksC,YACI,GAAhBypB,EAAMlyD,OACJkyD,EAAM,GACNt1D,KAAKL,OAAOurC,YAAY,KAAMoqB,EAAM5yD,EAAA8jB,kBAAkB8uC,EAAMA,EAAMlyD,OAAS,KAIjF,OAFApD,KAAKuf,gBAAgBtD,KAAOA,EAAKiE,OACjCV,EAAW6B,QAAQpF,GACZkO,GAGTwlC,EAAA1tD,UAAAu0D,sBAAA,SAAsB/rD,GACpB,IAAI9K,EAASK,KAAKL,OAClB,GAAI8K,EAAU2kB,MAKZ,OAJApvB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACflK,EAAU2kB,MAAM3iB,OAEX9M,EAAOktC,oBAEhB,IAAI5wB,EAAOjc,KAAKuf,gBAAgBtD,KAC5ByD,EAAazD,EAAKyD,WACtB,OAAkB,MAAdA,GACF1f,KAAKsM,MACH/J,EAAAgK,eAAeirD,qFACf/sD,EAAUgC,OAEL9M,EAAOktC,sBAEhB5wB,EAAK7R,IAAG,GACDzK,EAAO0rC,YAAY3rB,KAG5BiwC,EAAA1tD,UAAAw0D,yBAAA,SAAyBhsD,GACvB,IAAI9K,EAASK,KAAKL,OACdyvB,EAAQ3kB,EAAU2kB,MACtB,GAAIA,EAKF,OAJApvB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfya,EAAM3iB,OAED9M,EAAOktC,oBAGhB,IAAI5wB,EAAOjc,KAAKuf,gBAAgBtD,KAC5BwD,EAAgBxD,EAAKwD,cACzB,OAAqB,MAAjBA,GACFzf,KAAKsM,MACH/J,EAAAgK,eAAekrD,8EACfhtD,EAAUgC,OAEL9M,EAAOktC,sBAEhB5wB,EAAK7R,IAAG,IACDzK,EAAO0rC,YAAY5rB,KAG5BkwC,EAAA1tD,UAAAy0D,mBAAA,SAAmBjsD,GACjB,IAAI8U,EAAkBvf,KAAKuf,gBACvB5f,EAASK,KAAKL,OAEdyvB,EAAQ7P,EAAgB3C,oBACxB4C,EAAaD,EAAgBtD,KAC7BA,EAAOuD,EAAWO,OACtBR,EAAgBtD,KAAOA,EACvB,IAAIyD,EAAa,SAAW0P,EAC5BnT,EAAKyD,WAAaA,EAClB,IAAID,EAAgB,YAAc2P,EAClCnT,EAAKwD,cAAgBA,EAErB,IAAIuS,EAAOhyB,KAAKszD,iBAAiB7oD,EAAUA,WACvCitD,EAAW13D,KAAK23D,cAClB33D,KAAKq0D,kBAAkB5pD,EAAUwjB,UAAWzrB,EAAA6F,KAAKG,IAAG,KACpDxI,KAAK+vD,aAKPxwC,EAAgBtD,KAAOA,EAAKiE,OAC5BX,EAAgBzC,oBAChB,IAAI86C,EAAa37C,EAAK/M,MAAK,IAC3B+M,EAAK6D,MACH,KAKFN,EAAW6B,QAAQpF,GAEnB,IAAI47C,GACFl4D,EAAO8rC,WAAWhsB,EAChBm4C,EACI5lC,EACAryB,EAAOurC,YAAY,MACjBlZ,EACAryB,EAAO0rC,YAAY5rB,EAAei4C,IACnC,KAIT,OADIE,GAAYC,EAAM1lD,KAAKxS,EAAOktC,qBAC3BltC,EAAOurC,YAAYxrB,EAAYm4C,IAGxClI,EAAA1tD,UAAA00D,sBAAA,SAAsBlsD,GACpB,OAAOzK,KAAKL,OAAOksC,aAGrB8jB,EAAA1tD,UAAA20D,2BAAA,SAA2BnsD,GACzB,IAAIwX,EAAOjiB,KAAKq0D,kBAAkB5pD,EAAU0gB,WAAY3oB,EAAA6F,KAAKc,KAAI,KAKjE,OAJInJ,KAAK+vD,aAAevtD,EAAA6F,KAAKc,OAC3B8Y,EAAOjiB,KAAKL,OAAO4rC,WAAWtpB,GAC9BjiB,KAAK+vD,YAAcvtD,EAAA6F,KAAKc,MAEnB8Y,GAGT0tC,EAAA1tD,UAAA40D,oBAAA,SAAoBpsD,GAGlB,IAAI8U,EAAkBvf,KAAKuf,gBACvB6P,EAAQ7P,EAAgB3C,oBACxB4C,EAAaD,EAAgBtD,KAC7BA,EAAOuD,EAAWO,OACtBR,EAAgBtD,KAAOA,EACvB,IAAIyD,EAAazD,EAAKyD,WAAa,SAAW0P,EAC9CnT,EAAKyD,WAAaA,EAClB,IAAID,EAAgB,YAAc2P,EAClCnT,EAAKwD,cAAgBA,EACrB,IAAIq4C,EAAc,UAAY1oC,EAG1BzvB,EAASK,KAAKL,OACd+zD,EAAWjpD,EAAUgP,YACrBzZ,KAAKszD,iBAA4B7oD,EAAUgP,aAC3C,EACAi+C,EAA0B,EAC1BK,GAAa,EACjB,GAAIttD,EAAUwjB,UAAW,CACvBypC,EAAW13D,KAAK23D,cACd33D,KAAK+zD,4BAAwCtpD,EAAUwjB,UAAWzrB,EAAA6F,KAAKW,KAAI,GAC3EhJ,KAAK+vD,aAGP,IAAIiI,EAAUr4D,EAAOmyC,qBAAqB4lB,GACtCh1D,EAAAyf,gBAAgB61C,IAAYt1D,EAAA0f,aAAa+C,QAC3ChiB,OAAiC,GAA1BT,EAAA8jB,kBAAkBwxC,IACQ,GAA7Bt1D,EAAA0iB,iBAAiB4yC,KAAeD,GAAa,IAKnDL,EAAW13D,KAAK23D,cACd33D,KAAK+zD,4BAAwCtpD,EAAUwjB,UAAWzrB,EAAA6F,KAAKW,KAAI,GAC3EhJ,KAAK+vD,kBAIP2H,EAAW/3D,EAAOgoC,UAAU,GAC5BowB,GAAa,EAEf,IAAIE,EAAWxtD,EAAUonB,YACrB7xB,KAAKq0D,kBAA8B5pD,EAAUonB,YAAarvB,EAAA6F,KAAKc,KAAI,KACnE,EACA+uD,EAAgBztD,EAAUA,UAC1B0tD,EAAWD,EAAcxtD,MAAQjI,EAAAkI,SAASyrB,OAA8D,GAApC8hC,EAAe3tD,WAAWnH,OAC9FpD,KAAKszD,iBAAkC4E,EAAe3tD,WAAW,IACjEvK,KAAKszD,iBAAiB4E,GAG1B34C,EAAgBtD,KAAOA,EAAKiE,OAC5BX,EAAgBzC,oBAChB,IAAIs7C,EAAen8C,EAAK/M,MAAM,KAC9B+M,EAAK6D,MACH,KAKEi4C,EAAYv4C,EAAW6B,QAAQpF,GAC9BuD,EAAW+B,mBAAmBtF,GAEnC,IAAIo8C,EAAa,IAAIvuD,MACjB4pD,GAAU2E,EAAWlmD,KAAKuhD,GAE9B,IAAI4E,EAAc,IAAIxuD,MAuBtB,OAtBIsuD,EACFE,EAAYnmD,KACVxS,EAAOurC,YAAYzrB,GACjB9f,EAAO0rC,YAAY3rB,EAAY/f,EAAO4oC,YAAY7lC,EAAAwjB,QAAQC,OAAQuxC,IAClES,GACD,KAGHG,EAAYnmD,KACVxS,EAAO0rC,YAAY3rB,EAAY/f,EAAO4oC,YAAY7lC,EAAAwjB,QAAQC,OAAQuxC,KAEpEY,EAAYnmD,KAAKgmD,IAEfF,GAAUK,EAAYnmD,KAAK8lD,GAC/BK,EAAYnmD,KACVxS,EAAO0rC,YAAYysB,IAGrBO,EAAWlmD,KACTxS,EAAO8rC,WAAWqsB,EAAan4D,EAAOurC,YAAY,KAAMotB,EAAW,KAG9D34D,EAAOurC,YAAYxrB,EAAY24C,IAGxC1I,EAAA1tD,UAAA60D,mBAAA,SAAmBrsD,GACjB,IAAI9K,EAASK,KAAKL,OACd4f,EAAkBvf,KAAKuf,gBACvBwR,EAAStmB,EAAUsmB,OACnBC,EAAUvmB,EAAUumB,QAGpB0mC,EAAW13D,KAAK23D,cAClB33D,KAAK+zD,4BAA4BtpD,EAAUwjB,UAAWzrB,EAAA6F,KAAKW,KAAI,GAC/DhJ,KAAK+vD,aAGP,IACG/vD,KAAKoI,QAAQmB,eACdvJ,KAAKuf,gBAAgBrQ,MAAM5M,EAAA6M,YAAYC,QAAU9M,EAAA6M,YAAYopD,iBAC7D,CAEA,IAAIC,EAAkB74D,EAAOmyC,qBAAqB4lB,GAClD,GACEh1D,EAAAyf,gBAAgBq2C,IAAoB91D,EAAA0f,aAAa+C,OACf,GAAlCziB,EAAA8jB,kBAAkBgyC,GAElB,OAAO91D,EAAA0iB,iBAAiBozC,GACpBx4D,KAAKszD,iBAAiBviC,GACtBC,EACEhxB,KAAKszD,iBAAiBtiC,GACtBrxB,EAAOksC,YAIb6rB,EAAW13D,KAAK23D,cACd33D,KAAK+zD,4BAA4BtpD,EAAUwjB,UAAWzrB,EAAA6F,KAAKW,KAAI,GAC/DhJ,KAAK+vD,aAMX,IAAIvwC,EAAaD,EAAgBtD,KAC7Bw8C,EAAaj5C,EAAWO,OAC5BR,EAAgBtD,KAAOw8C,EACvB,IAAIC,EAAa14D,KAAKszD,iBAAiBviC,GACvCxR,EAAgBtD,KAAOw8C,EAAWv4C,OAElC,IAAIy4C,EAA6B,EACjC,GAAI3nC,EAAS,CACX,IAAI4nC,EAAcp5C,EAAWO,OAC7BR,EAAgBtD,KAAO28C,EACvBD,EAAc34D,KAAKszD,iBAAiBtiC,GACpCzR,EAAgBtD,KAAO28C,EAAY14C,OACnCV,EAAWgC,cAAci3C,EAAYG,QAErCp5C,EAAW+B,mBAAmBk3C,GAEhC,OAAO94D,EAAOgsC,SAAS+rB,EAAUgB,EAAYC,IAG/ChJ,EAAA1tD,UAAA80D,uBAAA,SAAuBtsD,GACrB,IAAI9K,EAASK,KAAKL,OACd4f,EAAkBvf,KAAKuf,gBACvB0C,EAAsB,EACtBhG,EAAOsD,EAAgBtD,KAK3B,GAFAA,EAAK7R,IAAG,GAEJK,EAAUnJ,MAAO,CACnB,IAAIsO,EAAaqM,EAAKrM,WACtB,GAAIA,GAAcpN,EAAA6F,KAAKc,KAOrB,OANAnJ,KAAK+zD,4BAA4BtpD,EAAUnJ,MAAOsO,EAAU,GAC5D5P,KAAKsM,MACH/J,EAAAgK,eAAeynD,mCACfvpD,EAAUnJ,MAAMmL,MAAOzM,KAAK+vD,YAAY9+C,WAAYrB,EAAWqB,YAEjEjR,KAAK+vD,YAAcvtD,EAAA6F,KAAKc,KACjBxJ,EAAOktC,oBAEhB5qB,EAAOjiB,KAAKq0D,kBACV5pD,EAAUnJ,MACVsO,EAAU,EAEV2P,EAAgBxP,GAAGzN,EAAA6M,YAAYiD,eAC5B,EACA,GAIA6J,EAAK+F,YAAYC,EAAMrS,IAAaqM,EAAK7R,IAAG,GAInD,OAAI3H,EAAA0zB,gBAAgB1rB,GAAmBwX,GAActiB,EAAOksC,YAGrD5vB,EAAKlM,GAAE,MACVpQ,EAAO0rC,YAAYloC,OAAO8Y,EAAK0D,aAAc,EAAGsC,GAChDtiB,EAAOosC,aAAa9pB,IAG1B0tC,EAAA1tD,UAAA+0D,uBAAA,SAAuBvsD,GACrB,IAAI9K,EAASK,KAAKL,OACd4f,EAAkBvf,KAAKuf,gBAEvBkT,EAAQhoB,EAAUgoB,MAClBomC,EAAWpmC,EAAMrvB,OACrB,IAAKy1D,EACH,OAAO74D,KAAKq0D,kBAAkB5pD,EAAUwjB,UAAWzrB,EAAA6F,KAAKc,KAAI,KAI9D,IAAI2vD,EAAUv5C,EAAgB3C,oBAC1B4C,EAAaD,EAAgBtD,KAG7B88C,EAAYx5C,EAAgBnD,aAAa5Z,EAAA6F,KAAKQ,KAAK,GACnDmwD,EAAiBD,EAAUp/C,MAG3Bs/C,EAAS,IAAInvD,MAAqB,EAAI+uD,GAC1CI,EAAO,GAAKt5D,EAAOmrC,eACjBkuB,EACAh5D,KAAKq0D,kBAAkB5pD,EAAUwjB,UAAWzrB,EAAA6F,KAAKQ,IAAG,MAMtD,IAFA,IAAIqwD,EAAa,EACbC,GAAgB,EACX94D,EAAI,EAAGA,EAAIw4D,IAAYx4D,EAAG,CACjC,IACI+uB,EADQqD,EAAMpyB,GACA+uB,MACdA,EACF6pC,EAAOC,KAAgBv5D,EAAO0rC,YAAY,OAAShrC,EAAE4Q,SAAS,IAAM,IAAM6nD,EACxEn5D,EAAO+oC,aAAahmC,EAAAsgB,SAASC,MAC3BtjB,EAAOqpC,eAAegwB,EAAc,GACpCh5D,KAAKq0D,kBAAkBjlC,EAAO5sB,EAAA6F,KAAKQ,IAAG,OAI1CswD,EAAe94D,EAInBkf,EAAgB7C,cAAcq8C,GAG9BE,EAAOC,GAAcv5D,EAAO0rC,aAAa8tB,GAAgB,EACnD,OAASA,EAAaloD,SAAS,IAC/B,SACA,IAAM6nD,GAGZ,IAAIM,EAAez5D,EAAOurC,YAAY,SAAW4tB,EAASG,EAAM,GAC5DI,GAAgB,EAChBC,GAAuB,EACvBC,GAAe,EACfC,GAAkB,EACtB,IAASn5D,EAAI,EAAGA,EAAIw4D,IAAYx4D,EAAG,CACjC,IACIkK,EADQkoB,EAAMpyB,GACKkK,WACnB+sD,EAAgB/sD,EAAWnH,OAG3B6Y,EAAOuD,EAAWO,OACtBR,EAAgBtD,KAAOA,EACvB,IAAIyD,EAAa,SAAWo5C,EAC5B78C,EAAKyD,WAAaA,EAElB,IAAI+5C,EAASp5D,GAAKw4D,EAAW,EACzBa,EAAYD,EAAS/5C,EAAa,QAAUrf,EAAI,GAAG4Q,SAAS,IAAM,IAAM6nD,EACxExD,EAAQ,IAAIxrD,MAAqB,EAAIwtD,GACzChC,EAAM,GAAK8D,EAGX,IAFA,IAAIO,EAAQ,EACR/B,GAAa,EACRptD,EAAI,EAAGA,EAAI8sD,IAAiB9sD,EAAG,CACtC,IAAI2f,EAAOnqB,KAAKszD,iBAAiB/oD,EAAWC,IAC5C,GAAI9H,EAAAyf,gBAAgBgI,IAASznB,EAAA0f,aAAam1C,MACxCjC,EAAMqE,KAAWxvC,EACblO,EAAK/M,MAAK,KAA6B,CACzC0oD,GAAa,EACb,OAINtC,EAAMlyD,OAASu2D,GACX/B,GAAc6B,KACXx9C,EAAKlM,GAAE,KAAqBspD,GAAgB,GAC5Cp9C,EAAKlM,GAAE,KAA6BupD,GAAuB,GAC3Dr9C,EAAKlM,GAAE,KAAoBwpD,GAAe,GAC1Ct9C,EAAKlM,GAAE,MAAuBypD,GAAkB,IAIvDv9C,EAAK6D,MACH,KAGFP,EAAgBtD,KAAOA,EAAKiE,OAC5Bk5C,EAAez5D,EAAOurC,YAAYwuB,EAAWpE,EAAK,GAWpD,OATA/1C,EAAgBzC,oBAGZq8C,GAAgB,IACdE,GAAe75C,EAAWpV,IAAG,GAC7BkvD,GAAsB95C,EAAWpV,IAAG,GACpCmvD,GAAc/5C,EAAWpV,IAAG,GAC5BovD,GAAiBh6C,EAAWpV,IAAG,KAE9BgvD,GAGTzJ,EAAA1tD,UAAAg1D,sBAAA,SAAsBxsD,GACpB,IAAIwR,EAAOjc,KAAKuf,gBAAgBtD,KAShC,OANAA,EAAK7R,IAAG,GAGR6R,EAAK7R,IAAG,GAGD0kD,EAAA8K,aAAa55D,KAAM,KAAMyK,IAGlCklD,EAAA1tD,UAAAi1D,oBAAA,SAAoBzsD,GAQlB,OAJAzK,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACflK,EAAUgC,OAELzM,KAAKL,OAAOktC,qBAOrB8iB,EAAA1tD,UAAAkxD,yBAAA,SAAyB1oD,EAA8BovD,QAAA,IAAAA,OAAA,GACrD,IAAIxhD,EAAUrY,KAAKqY,QACfkH,EAAkBvf,KAAKuf,gBACvBlI,EAAe5M,EAAU4M,aACzByiD,EAAkBziD,EAAajU,OAGnC,GAAIy2D,GACFt6C,GAAmBvf,KAAK4wD,uBACxBnmD,EAAUiC,QAAUjC,EAAUiC,OAAOhC,MAAQjI,EAAAkI,SAAS4G,OACrD,CAMD,IAAK,IAAIlR,EAAI,EAAGA,EAAIy5D,IAAmBz5D,EACrCL,KAAKuzD,yBAAyBl8C,EAAahX,IAE7C,OAAO,EAIT,IAAI05D,EAAe,IAAIjwD,MACnBmS,EAAOjc,KAAKuf,gBAAgBtD,KAC5B5U,EAAWrH,KAAKqH,SACpB,IAAShH,EAAI,EAAGA,EAAIy5D,IAAmBz5D,EAAG,CACxC,IAAI0L,EAAcsL,EAAahX,GAC3BO,EAAOmL,EAAYnL,KAAKgM,KACxBmC,EAAoB,KACpB2kD,EAA0B,EAC9B,GAAI3nD,EAAYgD,KAAM,CAKpB,KAJAA,EAAO1H,EAASusD,YACd7nD,EAAYgD,KACZkN,EAAKhC,0BAEI,SACPlO,EAAY0N,cACdi6C,EAAW1zD,KAAKq0D,kBACdtoD,EAAY0N,YACZ1K,EAAI,UAKH,KAAIhD,EAAY0N,YAchB,CACLzZ,KAAKsM,MACH/J,EAAAgK,eAAesnD,cACf9nD,EAAYnL,KAAK6L,MAAMqnD,OAEzB,SAbA,GALAJ,EAAW1zD,KAAK+zD,4BACdhoD,EAAY0N,YACZjX,EAAA6F,KAAKc,KAAI,GAGPnJ,KAAK+vD,aAAevtD,EAAA6F,KAAKc,KAAM,CACjCnJ,KAAKsM,MACH/J,EAAAgK,eAAeynD,mCACfjoD,EAAYU,MAAOzM,KAAK+vD,YAAY9+C,WAAY,UAElD,SAEFlC,EAAO/O,KAAK+vD,YAQd,IAAIiK,GAAY,EAChB,GAAIjuD,EAAYgE,GAAGzN,EAAA6M,YAAY+I,OAC7B,GAAIw7C,EAEF,GADAA,EAAW1zD,KAAKL,OAAOmyC,qBAAqB4hB,GACxChxD,EAAAyf,gBAAgBuxC,IAAahxD,EAAA0f,aAAa+C,MAAO,CACnD,IAAI7J,EAAQ,IAAI2gC,EAAAviC,MAAMrB,EAASzX,GAAO,EAAGmO,GACzC,OAAQrM,EAAA8jB,kBAAkBktC,IACxB,OACEp4C,EAAQA,EAAMpL,yBACZ7G,QACE3G,EAAA0iB,iBAAiBsuC,GACjB,IAGJ,MAEF,OACEp4C,EAAQA,EAAMpL,yBACZ7G,QACE3G,EAAA+jB,oBAAoBitC,GACpBhxD,EAAAozC,qBAAqB4d,KAGzB,MAEF,OACEp4C,EAAQA,EAAMlL,uBAA4B1N,EAAAgkB,iBAAiBgtC,IAC3D,MAEF,OACEp4C,EAAQA,EAAMlL,uBAAuB1N,EAAAikB,iBAAiB+sC,IACtD,MAEF,QAEE,OADAvwD,QAAO,GACAnD,KAAKL,OAAOktC,oBAIvB,IAAIvtB,EAAeC,EAAgBtD,KAAKqD,aACxC,GAAKA,GACA,GAAIA,EAAa5Q,IAAI9N,GAKxB,OAJAZ,KAAKsM,MACH/J,EAAAgK,eAAesC,uBACf9C,EAAYnL,KAAK6L,MAAO7L,GAEnBZ,KAAKL,OAAOktC,yBANFttB,EAAgBtD,KAAKqD,aAAeA,EAAe,IAAIzZ,IAQ1EyZ,EAAalV,IAAIxJ,EAAM0a,GACvB0+C,GAAY,OAEZh6D,KAAKs7B,QACH/4B,EAAAgK,eAAe+nD,4DACfvoD,EAAYU,YAIhBzM,KAAKsM,MACH/J,EAAAgK,eAAe0tD,wCACfluD,EAAYU,OAIlB,IAAKutD,EAAW,CACV1+C,OAAK,EAKPA,EAHAvP,EAAYmD,MAAM5M,EAAA6M,YAAYmxC,IAAMh+C,EAAA6M,YAAY+I,QAChD+D,EAAKlM,GAAE,MAECkM,EAAKoE,eAAetR,EAAMnO,GAAM,EAAOmL,GAEvCwT,EAAgBpD,SAASpN,EAAMnO,EAAMmL,GAE3C2nD,GACFqG,EAAa5nD,KAAKnS,KAAKk6D,2BAA2BnuD,EAAYnL,KAAM8yD,IAChEp4C,EAAMvM,KAAKgB,GAAG,KAChBkM,EAAKQ,gBAAgBnB,EAAM3B,OAAQsC,EAAK+F,YAAY0xC,EAAU3kD,KAEvDuM,EAAMvM,KAAKgB,GAAG,KACvBkM,EAAKQ,gBAAgBnB,EAAM3B,OAAO,IAIxC,OAAOogD,EAAa32D,OACO,GAAvB22D,EAAa32D,OACX22D,EAAa,GACb/5D,KAAKL,OAAOurC,YAAY,KAAM6uB,EAAY,GAC5C,GAGNpK,EAAA1tD,UAAAk1D,qBAAA,SAAqB1sD,GACnB,OAAOzK,KAAKq0D,kBAAkB5pD,EAAU0gB,WAAY3oB,EAAA6F,KAAKc,KAAI,MAG/DwmD,EAAA1tD,UAAAm1D,sBAAA,SAAsB3sD,GACpB,IAAI9K,EAASK,KAAKL,OAGd+3D,EAAW13D,KAAK23D,cAClB33D,KAAK+zD,4BAA4BtpD,EAAUwjB,UAAWzrB,EAAA6F,KAAKW,KAAI,GAC/DhJ,KAAK+vD,aAGP,IACG/vD,KAAKoI,QAAQmB,eACdvJ,KAAKuf,gBAAgBrQ,MAAM5M,EAAA6M,YAAYC,QAAU9M,EAAA6M,YAAYopD,iBAC7D,CAEA,IAAIC,EAAkB74D,EAAOmyC,qBAAqB4lB,GAClD,GACEh1D,EAAAyf,gBAAgBq2C,IAAoB91D,EAAA0f,aAAa+C,OACf,GAAlCziB,EAAA8jB,kBAAkBgyC,IAElB,IAAK91D,EAAA0iB,iBAAiBozC,GAAkB,OAAO74D,EAAOksC,iBAItD6rB,EAAW13D,KAAK23D,cACd33D,KAAK+zD,4BAA4BtpD,EAAUwjB,UAAWzrB,EAAA6F,KAAKW,KAAI,GAC/DhJ,KAAK+vD,aAMX,IAAIxwC,EAAkBvf,KAAKuf,gBACvB6P,EAAQ7P,EAAgB3C,oBACxB4C,EAAaD,EAAgBtD,KAC7BA,EAAOuD,EAAWO,OACtBR,EAAgBtD,KAAOA,EACvB,IAAIyD,EAAa,SAAW0P,EAC5BnT,EAAKyD,WAAaA,EAClB,IAAID,EAAgB,YAAc2P,EAClCnT,EAAKwD,cAAgBA,EAErB,IAAIuS,EAAOhyB,KAAKszD,iBAAiB7oD,EAAUA,WAEvCmtD,EAAa37C,EAAK/M,MAAK,IAc3B,OAXAqQ,EAAgBtD,KAAOA,EAAKiE,OAC5BX,EAAgBzC,oBAChBb,EAAK6D,MACH,KAMGN,EAAW+B,mBAAmBtF,GAE5Btc,EAAOurC,YAAYxrB,GACxB/f,EAAO8rC,WAAWhsB,EAChB9f,EAAOgsC,SAAS+rB,EACdE,EACI5lC,EACAryB,EAAOurC,YAAY,MACjBlZ,EACAryB,EAAO0rC,YAAY5rB,IACpB,QAabkwC,EAAA1tD,UAAAk4D,sBAAA,SACEnuD,EACAouD,EACAC,GAEAl3D,OAAO6I,EAAQ+D,GAAGzN,EAAA6M,YAAYmK,UAC9B,IAAIvK,EAAO/C,EAAQ+C,KACnB,QACGsrD,GACDtrD,EAAKgB,GAAE,IACPqqD,EAAerqD,GAAE,IACjBhB,EAAK2W,KAAO00C,EAAe10C,MACtB1lB,KAAK+vD,YAAcqK,GAAgB1vD,MACnC1K,KAAK+vD,YAAchhD,GAAMrE,MAE9B,OACA,OACE,IAAI+a,EAAQ1W,EAAK8tC,yBAAyBr6C,EAAA6F,KAAKG,KAC/C,OAAOxI,KAAKL,OAAOgoC,UACQ,GAAzB37B,EAAQoN,kBACJ22B,QAAQ/jC,EAAQqN,uBAAyBoM,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAI60C,EAAOtuD,EAAQ+C,KAAKwW,wBAAwB/iB,EAAA6F,KAAKG,KACrD,OAAOxI,KAAKL,OAAOgoC,UACQ,GAAzB37B,EAAQoN,kBACJ22B,QAAQ/jC,EAAQqN,sBAAwBihD,EACxC,GAGR,OACA,OACE,OAAOt6D,KAAKL,OAAOgoC,UACQ,GAAzB37B,EAAQoN,kBACJ22B,QAAQ/jC,EAAQqN,sBAChB,GAGR,OACA,OACE,IAAKrN,EAAQqM,QAAQjQ,QAAQkB,SAC3B,OAAOtJ,KAAKL,OAAOgoC,UACQ,GAAzB37B,EAAQoN,kBACJ22B,QAAQ/jC,EAAQqN,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzBrN,EAAQoN,kBACXpZ,KAAKL,OAAOooC,UACVgI,QAAQ/jC,EAAQqN,sBAChB22B,SAAShkC,EAAQqN,uBAEnBrZ,KAAKL,OAAOooC,UAAU,GAE5B,QAEE,IAAM/7B,EAAQqF,aAAa4qC,EAAAt2C,eAAemL,UAAYspD,GAAkB53D,EAAA6F,KAAKY,IAC3E,OAAOjJ,KAAKL,OAAO0oC,UAAgCr8B,EAASuN,oBAG9DvZ,KAAK+vD,YAAcvtD,EAAA6F,KAAKY,IAE1B,QACE,OAAOjJ,KAAKL,OAAOwoC,UAAgCn8B,EAASuN,oBAE9D,QAEE,OADApW,QAAO,GACAnD,KAAKL,OAAOktC,sBAKzB8iB,EAAA1tD,UAAAoyD,kBAAA,SACElpC,EACAivC,EACAG,EACAC,GAIA,IAAIv4C,EAFJjiB,KAAK+vD,YAAcqK,EAGnB,IACA,OAAQjvC,EAAWzgB,MACjB,KAAKjI,EAAAkI,SAASyqB,UACZnT,EAAOjiB,KAAKy6D,2BAAgDtvC,EAAYivC,GACxE,MAEF,KAAK33D,EAAAkI,SAAS0qB,OACZpT,EAAOjiB,KAAK06D,wBAA0CvvC,EAAYivC,GAClE,MAEF,KAAK33D,EAAAkI,SAAS+d,KACZzG,EAAOjiB,KAAK26D,sBAAsCxvC,EAAYivC,GAC9D,MAEF,KAAK33D,EAAAkI,SAAS2qB,MACZrT,EAAOjiB,KAAK46D,uBAAwCzvC,EAAYivC,GAChE,MAEF,KAAK33D,EAAAkI,SAASge,cACZ1G,EAAOjiB,KAAK66D,+BAAwD1vC,EAAYivC,GAChF,MAEF,KAAK33D,EAAAkI,SAASuP,SACZ+H,EAAOjiB,KAAK86D,0BAA8C3vC,EAAYivC,GACtE,MAEF,KAAK33D,EAAAkI,SAAS8d,WACd,KAAKhmB,EAAAkI,SAAS4d,MACd,KAAK9lB,EAAAkI,SAAS0d,KACd,KAAK5lB,EAAAkI,SAASorB,KACd,KAAKtzB,EAAAkI,SAASmrB,MACd,KAAKrzB,EAAAkI,SAAS2d,KACZrG,EAAOjiB,KAAK+6D,4BACY5vC,EACtBivC,EACc,GAAdG,GAEF,MAOF,KAAK93D,EAAAkI,SAAS6qB,WACZvT,EAAOjiB,KAAKg7D,4BAAkD7vC,EAAYivC,GAC1E,MAEF,KAAK33D,EAAAkI,SAAS4J,QACZ0N,EAAOjiB,KAAKi7D,yBAA4C9vC,EAAYivC,GACpE,MAEF,KAAK33D,EAAAkI,SAAS+qB,IACZzT,EAAOjiB,KAAKk7D,qBAAoC/vC,EAAYivC,GAC5D,MAEF,KAAK33D,EAAAkI,SAASke,cACZ5G,EAAOjiB,KAAKm7D,+BAAwDhwC,EAAYivC,GAChF,MAEF,KAAK33D,EAAAkI,SAASie,eACZ3G,EAAOjiB,KAAKo7D,gCACgBjwC,EAC1BivC,EACc,GAAdG,GAEF,MAEF,KAAK93D,EAAAkI,SAASkrB,QACZ5T,EAAOjiB,KAAKq7D,yBAA4ClwC,EAAYivC,GACpE,MAEF,KAAK33D,EAAAkI,SAASsrB,aACZhU,EAAOjiB,KAAKs7D,8BAAsDnwC,EAAYivC,GAC9E,MAEF,KAAK33D,EAAAkI,SAASurB,YACZjU,EAAOjiB,KAAKu7D,6BAAoDpwC,EAAYivC,GAC5E,MAEF,QACEp6D,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEbwV,EAAOjiB,KAAKL,OAAOktC,qBAGrB,MAAO2uB,GAEP,MADAtgC,QAAQC,IAAI,8CAA8C4zB,EAAA/E,QAAQ6B,SAAS1gC,EAAW1e,OAAM,KACtF+uD,EAGR,IAAIzL,EAAc/vD,KAAK+vD,YASvB,OARkB,GAAdwK,GAAyCxK,GAAeqK,GAC1Dn4C,EAAOjiB,KAAKy7D,kBAAkBx5C,EAAM8tC,EAAaqK,EAAgBG,EAAgBC,EAAUrvC,GAC3FnrB,KAAK+vD,YAAcqK,GACF,GAARI,IACTv4C,EAAOjiB,KAAK07D,uBAAuBz5C,EAAM8tC,IAGvC/vD,KAAKoI,QAAQ4U,WAAWhd,KAAKq3D,iBAAiBp1C,EAAMkJ,EAAW1e,OAC5DwV,GAGT0tC,EAAA1tD,UAAA8xD,4BAAA,SACE5oC,EACAivC,EACAI,GAEA,OAAOx6D,KAAKq0D,kBACVlpC,EACAivC,GAAkB53D,EAAA6F,KAAKc,KACnB3G,EAAA6F,KAAKG,IACL4xD,EAAc,EAElBI,IAIJ7K,EAAA1tD,UAAA6vC,qBAAA,SACE3mB,EACAivC,EACAG,EACAC,GAEA,OAAOx6D,KAAKL,OAAOmyC,qBACjB9xC,KAAKq0D,kBAAkBlpC,EAAYivC,EAAgBG,EAAgBC,KAIvE7K,EAAA1tD,UAAAw5D,kBAAA,SACEx5C,EACA8E,EACAiB,EACAuyC,EACAC,EACA7H,GAEAxvD,OAAqB,GAAdo3D,GACP,IAAI56D,EAASK,KAAKL,OAGlB,OAAiB,IAAbonB,EAASrc,MACXvH,OAAkB,IAAX6kB,EAAOtd,MACd1K,KAAKsM,MACH/J,EAAAgK,eAAeynD,mCACfrB,EAAWlmD,MAAOsa,EAAS9V,WAAY+W,EAAO/W,YAEzCtR,EAAOktC,qBAID,IAAX7kB,EAAOtd,KAA8B/K,EAAO4rC,WAAWtpB,IAEtD8E,EAAStI,eAAeuJ,IACT,GAAduyC,GACFv6D,KAAKsM,MACH/J,EAAAgK,eAAeovD,sDACfhJ,EAAWlmD,MAAOsa,EAAS9V,WAAY+W,EAAO/W,YAKhD8V,EAAShX,GAAE,GAGTiY,EAAOjY,GAAE,GACM,IAAbgX,EAASrc,KAGI,IAAXsd,EAAOtd,OACTuX,EAAOtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ01C,WAAY35C,IAM5B,IAAX+F,EAAOtd,OAChBuX,EAAOtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ21C,UAAW55C,IAMtC+F,EAAOjY,GAAE,GAGD,IAAbgX,EAASrc,KACPsd,GAAUxlB,EAAA6F,KAAKW,MACjBiZ,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASO,MAAOtB,EAAMtiB,EAAOwoC,UAAU,IAClEqyB,EAAQ,GAGNv4C,EAFO+F,EAAOjY,GAAE,GACdiY,EAAOjY,GAAE,IACJpQ,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ41C,cAAe75C,GAE1CtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ61C,cAAe95C,GAG/C+F,EAAOjY,GAAE,IACJpQ,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ81C,cAAe/5C,GAE1CtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ+1C,cAAeh6C,GAMjD+F,GAAUxlB,EAAA6F,KAAKW,MACjBiZ,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASQ,MAAOvB,EAAMtiB,EAAO0oC,UAAU,IAClEmyB,EAAQ,GAGNv4C,EAFO+F,EAAOjY,GAAE,GACdiY,EAAOjY,GAAE,IACJpQ,EAAO4oC,YAAY7lC,EAAAwjB,QAAQg2C,cAAej6C,GAE1CtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQi2C,cAAel6C,GAG/C+F,EAAOjY,GAAE,IACJpQ,EAAO4oC,YAAY7lC,EAAAwjB,QAAQk2C,cAAen6C,GAE1CtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQm2C,cAAep6C,IAOvD9e,OAAmB,GAAZ6kB,EAAO1P,MAAyB,sBACvC2J,EAAOtiB,EAAO4rC,WAAWtpB,IAIlB8E,EAAShX,GAAE,IAAuBiY,EAAOjY,GAAE,GAKhDkS,EAFW,IAAX+F,EAAOtd,KACLqc,EAAShX,GAAE,IACNpQ,EAAO4oC,YACZxhB,EAAShX,GAAE,GACPrN,EAAAwjB,QAAQo2C,gBACR55D,EAAAwjB,QAAQq2C,gBACZt6C,GAGKtiB,EAAO4oC,YACZxhB,EAAShX,GAAE,GACPrN,EAAAwjB,QAAQs2C,gBACR95D,EAAAwjB,QAAQu2C,gBACZx6C,GAMA8E,EAAShX,GAAE,IACNpQ,EAAO4oC,YACZxhB,EAAShX,GAAE,GACPrN,EAAAwjB,QAAQw2C,gBACRh6D,EAAAwjB,QAAQy2C,gBACZ16C,GAGKtiB,EAAO4oC,YACZxhB,EAAShX,GAAE,GACPrN,EAAAwjB,QAAQ02C,gBACRl6D,EAAAwjB,QAAQ22C,gBACZ56C,GAQF8E,EAAShX,GAAE,IAGTiY,GAAUxlB,EAAA6F,KAAKW,MACjBiZ,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASM,MAAOrB,EAAMtiB,EAAOooC,UAAU,IAClEyyB,EAAQ,GACExyC,EAAOjY,GAAE,MACnBkS,EAAOtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ42C,QAAS76C,IAIpC+F,EAAOjY,GAAE,KAClBkS,EAAOtiB,EAAO4oC,YACZxhB,EAAShX,GAAE,GAAqBrN,EAAAwjB,QAAQ62C,UAAYr6D,EAAAwjB,QAAQ82C,UAC5Dh9D,KAAK07D,uBAAuBz5C,EAAM8E,IAEpCyzC,EAAQ,GAKJzzC,EAAShX,GAAE,KAETgX,EAASrB,KAAOsC,EAAOtC,OACzBzD,EAAOjiB,KAAK07D,uBAAuBz5C,EAAM8E,GACzCyzC,EAAQ,GAMhBx6D,KAAK+vD,YAAc/nC,EACJ,GAARwyC,EACHx6D,KAAK07D,uBAAuBz5C,EAAM+F,GAClC/F,IAGN0tC,EAAA1tD,UAAAw4D,2BAAA,SAA2BtvC,EAAiCivC,GAC1D,IAAIpyC,EAAShoB,KAAKqH,SAASusD,YACzBzoC,EAAWnD,OACXhoB,KAAKuf,gBAAgBtD,KAAKhC,yBAE5B,OAAK+N,EACEhoB,KAAKq0D,kBAAkBlpC,EAAWA,WAAYnD,EAAM,KADvChoB,KAAKL,OAAOktC,qBASlC8iB,EAAA1tD,UAAAy4D,wBAAA,SACEvvC,EACAivC,GAEA,IAII6C,EACAC,EACAC,EACAC,EACAC,EAEAp7C,EAVAtiB,EAASK,KAAKL,OACd8hB,EAAO0J,EAAW1J,KAClBC,EAAQyJ,EAAWzJ,MASnB47C,GAAW,EAEXhyC,EAAWH,EAAWG,SAC1B,OAAQA,GACN,KAAKrD,EAAAC,MAAMm5B,SAKT,GAJA4b,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAauC,IAC5C,CACZqd,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAKrB,GAFAswB,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAEhB,OAxBEowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAUI27C,EAAW3yD,MACjB,OACA,OACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASS,MAAOw5C,EAAUE,GACrD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASW,MAAOs5C,EAAUE,GACrD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASW,MACTjhB,EAAAsgB,SAASS,MACbw5C,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASU,MAAOu5C,EAAUE,GACrD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASY,MACTlhB,EAAAsgB,SAASU,MACbu5C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASY,MAAOq5C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASa,MAAOo5C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASc,MAAOm5C,EAAUE,GACrD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB7sC,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACxB,MAEF,KAAKif,EAAAC,MAAMo5B,YAKT,GAJA2b,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAamC,IAC5C,CACZyd,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAKrB,GAFAswB,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAEhB,OAxBEowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAUI27C,EAAW3yD,MACjB,OACA,OACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASqB,MAAO44C,EAAUE,GACrD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASuB,MACT7hB,EAAAsgB,SAASqB,MACb44C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASuB,MAAO04C,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASsB,MAAO24C,EAAUE,GACrD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASwB,MACT9hB,EAAAsgB,SAASsB,MACb24C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASwB,MAAOy4C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASyB,MAAOw4C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS0B,MAAOu4C,EAAUE,GACrD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB7sC,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACxB,MAEF,KAAKif,EAAAC,MAAMq5B,gBAKT,GAJA0b,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAawC,IAC5C,CACZod,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAKrB,GAFAswB,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,KAAMywD,EAASjsD,WAAYmsD,EAAUnsD,YAEzDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAEhB,OAxBEowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAUI27C,EAAW3yD,MACjB,OACA,OACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASe,MAAOk5C,EAAUE,GACrD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASiB,MACTvhB,EAAAsgB,SAASe,MACbk5C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASiB,MAAOg5C,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASgB,MAAOi5C,EAAUE,GACrD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASkB,MACTxhB,EAAAsgB,SAASgB,MACbi5C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASkB,MAAO+4C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASmB,MAAO84C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASoB,MAAO64C,EAAUE,GACrD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB7sC,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACxB,MAEF,KAAKif,EAAAC,MAAMs5B,mBAKT,GAJAyb,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAaoC,IAC5C,CACZwd,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAKrB,GAFAswB,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,KAAMywD,EAASjsD,WAAYmsD,EAAUnsD,YAEzDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAEhB,OAxBEowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAUI27C,EAAW3yD,MACjB,OACA,OACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS2B,MAAOs4C,EAAUE,GACrD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS6B,MACTniB,EAAAsgB,SAAS2B,MACbs4C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS6B,MAAOo4C,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS4B,MAAOq4C,EAAUE,GACrD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS8B,MACTpiB,EAAAsgB,SAAS4B,MACbq4C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS8B,MAAOm4C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS+B,MAAOk4C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASgC,MAAOi4C,EAAUE,GACrD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB7sC,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACxB,MAGF,KAAKif,EAAAC,MAAMy5B,qBACX,KAAK15B,EAAAC,MAAMu5B,cAUT,GAJAwb,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZzkC,GAAYrD,EAAAC,MAAMu5B,eAAiBzhD,KAAK+vD,YAAYhgD,GAAE,KAExD,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAaiC,IAC5C,CACZ2d,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAQN,GAFAgyC,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAOwb,EAAAk5B,sBAAsBh2B,EAAWG,UAAW4xC,EAASjsD,WAAYmsD,EAAUnsD,YAE/FjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAEhB,OAxBEowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAUI27C,EAAW3yD,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASC,MAAOg6C,EAAUE,GACrD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASE,MACTxgB,EAAAsgB,SAASC,MACbg6C,EACAE,GAEF,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASE,MAAO+5C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASG,MAAO85C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASI,MAAO65C,EAAUE,GACrD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB7sC,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACxB,MAEF,KAAKif,EAAAC,MAAM05B,0BACX,KAAK35B,EAAAC,MAAMw5B,mBAKT,GAJAub,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZzkC,GAAYrD,EAAAC,MAAMw5B,oBAAsB1hD,KAAK+vD,YAAYhgD,GAAE,KAE7D,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAakC,IAC5C,CACZ0d,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAQN,GAFAgyC,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAOwb,EAAAk5B,sBAAsBh2B,EAAWG,UAAW4xC,EAASjsD,WAAYmsD,EAAUnsD,YAE/FjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAEhB,OAxBEowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAUI27C,EAAW3yD,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASK,MAAO45C,EAAUE,GACrD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASM,MACT5gB,EAAAsgB,SAASK,MACb45C,EACAE,GAEF,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASM,MAAO25C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASO,MAAO05C,EAAUE,GACrD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASQ,MAAOy5C,EAAUE,GACrD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB7sC,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACxB,MAEF,KAAKif,EAAAC,MAAM26B,OACT,OAAO7iD,KAAKy9D,kBAAkBh8C,EAAMC,EAAO04C,GAE7C,KAAKnyC,EAAAC,MAAM46B,YAAawa,GAAW,EACnC,KAAKr1C,EAAAC,MAAMljB,KAKT,GAJAi4D,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAawB,KAC5C,CACZoe,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAGrB,GAAIywB,EACFH,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,SAC7C,CAGL,GAFAC,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAtBdowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAWN,OAAQ1hB,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS8xC,OAAQmI,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS06C,OACTh7D,EAAAsgB,SAAS8xC,OACbmI,EACAE,GAEF,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS06C,OAAQT,EAAUE,GACtD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS26C,OAAQV,EAAUE,GACtD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS46C,OAAQX,EAAUE,GACtD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAM66B,aAAcua,GAAW,EACpC,KAAKr1C,EAAAC,MAAMhjB,MAKT,GAJA+3D,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAayB,KAC5C,CACZme,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAGrB,GAAIywB,EACFH,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,gBACZ,CAGL,GAFAoN,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAtBdowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAWN,OAAQ1hB,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS66C,OAAQZ,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS86C,OACTp7D,EAAAsgB,SAAS66C,OACbZ,EACAE,GAEF,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS86C,OAAQb,EAAUE,GACtD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS+6C,OAAQd,EAAUE,GACtD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASg7C,OAAQf,EAAUE,GACtD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAM86B,gBAAiBsa,GAAW,EACvC,KAAKr1C,EAAAC,MAAM45B,SAKT,GAJAmb,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa0B,KAC5C,CACZke,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAGrB,GAAIywB,EACFL,EAAWj9D,KAAK07D,uBAAuBuB,EAAUC,GACjDC,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,SAC7C,CAGL,GAFAC,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAtBdowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAWN,OAAQ1hB,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASiC,OAAQg4C,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASi7C,OACTv7D,EAAAsgB,SAASiC,OACbg4C,EACAE,GAEF,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASi7C,OAAQhB,EAAUE,GACtD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASk7C,OAAQjB,EAAUE,GACtD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASm7C,OAAQlB,EAAUE,GACtD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAM+6B,yBAA0Bqa,GAAW,EAChD,KAAKr1C,EAAAC,MAAM25B,kBAKT,GAJAob,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa2B,KAC5C,CACZie,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAGrB,IAAIj+B,OAAQ,EAGZ,GAAyB,IAArB5O,KAAK+vD,YAAYrlD,MAGnB,GAFAyyD,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOlf,EAAA6F,KAAKY,IAAG,KAClDm0D,EAAYp9D,KAAK+vD,cACXnhD,EAAW5O,KAAKwwD,gBAAiB,CAErC,KADIh/C,EAAYxR,KAAKqY,QAAQlS,eAAejF,IAAI,UAChC,CACdlB,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfyd,EAAW1e,MAAO,SAEpBwV,EAAOtiB,EAAOktC,oBACd,MAGF,KADI5qC,EAAYuP,EAAUhC,QAAUgC,EAAUhC,QAAQtO,IAAI,OAAS,MACnD,CACdlB,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfyd,EAAW1e,MAAO,aAEpBwV,EAAOtiB,EAAOktC,oBACd,MAEF1pC,OAAOlB,EAAUyI,MAAQuxC,EAAAv2C,YAAYsJ,oBACrChP,KAAKwwD,eAAiB5hD,EAAW5O,KAAKqH,SAASkI,gBAAmCtN,EAAW,YAsB/F,GAhBAg7D,EAAWj9D,KAAKy7D,kBACdwB,EACAj9D,KAAK+vD,YACLvtD,EAAA6F,KAAKa,IAAG,IAGRuY,GAEFy7C,EAAWl9D,KAAK+vD,YAChBoN,EAAYn9D,KAAKq0D,kBACf3yC,EACAlf,EAAA6F,KAAKa,IAAG,KAIVk0D,EAAYp9D,KAAK+vD,cACXnhD,EAAW5O,KAAKywD,gBAAiB,CAErC,KADIj/C,EAAYxR,KAAKqY,QAAQlS,eAAejF,IAAI,SAChC,CACdlB,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfyd,EAAW1e,MAAO,QAEpBwV,EAAOtiB,EAAOktC,oBACd,MAGF,KADI5qC,EAAYuP,EAAUhC,QAAUgC,EAAUhC,QAAQtO,IAAI,OAAS,MACnD,CACdlB,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfyd,EAAW1e,MAAO,YAEpBwV,EAAOtiB,EAAOktC,oBACd,MAEF1pC,OAAOlB,EAAUyI,MAAQuxC,EAAAv2C,YAAYsJ,oBACrChP,KAAKywD,eAAiB7hD,EAAW5O,KAAKqH,SAASkI,gBAAmCtN,EAAW,MAM/FggB,EAHIrT,GAAY5O,KAAKi1D,gBAAgBrmD,GAG9B5O,KAAKo+D,eAAexvD,GAAYquD,EAAUE,IAF1Cx9D,EAAOktC,oBAIhB,MAEF,KAAK5kB,EAAAC,MAAMg7B,aAAcoa,GAAW,EACpC,KAAKr1C,EAAAC,MAAM65B,MAKT,GAJAkb,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa4B,KAC5C,CACZge,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAGrB,GAAIywB,EACFL,EAAWj9D,KAAK07D,uBAAuBuB,EAAUC,GACjDC,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,gBACZ,CAGL,GAFAoN,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAtBdowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAWN,OAAQ1hB,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASq7C,OAAQpB,EAAUE,GACtD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASs7C,OACT57D,EAAAsgB,SAASq7C,OACbpB,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASs7C,OAAQrB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS6C,OAAQo3C,EAAUE,GACtD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASu7C,OACT77D,EAAAsgB,SAAS6C,OACbo3C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASu7C,OAAQtB,EAAUE,GACtD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASw7C,OAAQvB,EAAUE,GACtD,MAEF,QACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASy7C,OAAQxB,EAAUE,GACtD,MAEF,QACEh6D,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMi7B,eAAgBma,GAAW,EACtC,KAAKr1C,EAAAC,MAAM85B,QAKT,GAJAib,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa6B,KAC5C,CACZ+d,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAGrB,GAAIywB,EACFL,EAAWj9D,KAAK07D,uBAAuBuB,EAAUC,GACjDC,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,gBACZ,CAGL,GAFAoN,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAtBdowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAWN,OAAQ1hB,KAAK+vD,YAAYrlD,MACvB,OACA,OAIA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS8C,OAAQm3C,EAAUE,GACtD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS07C,OACTh8D,EAAAsgB,SAAS8C,OACbm3C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS07C,OAAQzB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS+C,OAAQk3C,EAAUE,GACtD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS27C,OACTj8D,EAAAsgB,SAAS+C,OACbk3C,EACAE,GAEF,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS27C,OAAQ1B,EAAUE,GACtD,MAEF,QAEE,KADIvuD,EAAW5O,KAAKswD,gBACL,CAEb,KADI9+C,EAAYxR,KAAKqY,QAAQlS,eAAejF,IAAI,UAChC,CACdlB,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfyd,EAAW1e,MAAO,SAEpBwV,EAAOtiB,EAAOktC,oBACd,MAGF,KADI5qC,EAAYuP,EAAUhC,QAAUgC,EAAUhC,QAAQtO,IAAI,OAAS,MACnD,CACdlB,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfyd,EAAW1e,MAAO,aAEpBwV,EAAOtiB,EAAOktC,oBACd,MAEF1pC,OAAOlB,EAAUyI,MAAQuxC,EAAAv2C,YAAYsJ,oBACrChP,KAAKswD,eAAiB1hD,EAAW5O,KAAKqH,SAASkI,gBAAmCtN,EAAW,MAK7FggB,EAHIrT,GAAY5O,KAAKi1D,gBAAgBrmD,GAG9B5O,KAAKo+D,eAAexvD,GAAYquD,EAAUE,IAF1Cx9D,EAAOktC,oBAIhB,MAEF,QAEE,KADIj+B,EAAW5O,KAAKuwD,gBACL,CACb,IAAI/+C,EASAvP,EARJ,KADIuP,EAAYxR,KAAKqY,QAAQlS,eAAejF,IAAI,SAChC,CACdlB,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfyd,EAAW1e,MAAO,QAEpBwV,EAAOtiB,EAAOktC,oBACd,MAGF,KADI5qC,EAAYuP,EAAUhC,QAAUgC,EAAUhC,QAAQtO,IAAI,OAAS,MACnD,CACdlB,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfyd,EAAW1e,MAAO,YAEpBwV,EAAOtiB,EAAOktC,oBACd,MAEF1pC,OAAOlB,EAAUyI,MAAQuxC,EAAAv2C,YAAYsJ,oBACrChP,KAAKuwD,eAAiB3hD,EAAW5O,KAAKqH,SAASkI,gBAAmCtN,EAAW,MAK7FggB,EAHIrT,GAAY5O,KAAKi1D,gBAAgBrmD,GAG9B5O,KAAKo+D,eAAexvD,GAAYquD,EAAUE,IAF1Cx9D,EAAOktC,oBAIhB,MAEF,QACE1pC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMk7B,yBAA0Bka,GAAW,EAChD,KAAKr1C,EAAAC,MAAMi6B,kBAKT,GAJA8a,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAewE,QAAO,GACxE1B,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAayC,aAC5C,CACZmd,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAKrB,OAFAswB,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,YACT/vD,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASwC,OAAQy3C,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS67C,OAAQ5B,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS67C,OACTn8D,EAAAsgB,SAASwC,OACby3C,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn9D,KAAKsM,MACH/J,EAAAgK,eAAeuyD,2CACf3zC,EAAW1e,MAAOwb,EAAAk5B,sBAAsBh2B,EAAWG,UAAWtrB,KAAK+vD,YAAY9+C,YAE1EtR,EAAOktC,oBAEhB,QACE1pC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMm7B,+BAAgCia,GAAW,EACtD,KAAKr1C,EAAAC,MAAMk6B,wBAKT,GAJA6a,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAewE,QAAO,GACxE1B,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAaqC,aAC5C,CACZud,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAMrB,OAHAowB,EAAWj9D,KAAK07D,uBAAuBuB,EAAUC,GACjDC,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,YACT/vD,KAAK+vD,YAAYrlD,MACvB,OACA,OAIA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS2C,OAAQs3C,EAAUE,GACtD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS+7C,OAAQ9B,EAAUE,GACtD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS+7C,OACTr8D,EAAAsgB,SAAS2C,OACbs3C,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS4C,OAAQq3C,EAAUE,GACtD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASg8C,OAAQ/B,EAAUE,GACtD,MAEF,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASg8C,OACTt8D,EAAAsgB,SAAS4C,OACbq3C,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn9D,KAAKsM,MACH/J,EAAAgK,eAAeuyD,2CACf3zC,EAAW1e,MAAOwb,EAAAk5B,sBAAsBh2B,EAAWG,UAAWtrB,KAAK+vD,YAAY9+C,YAE1EtR,EAAOktC,oBAEhB,QACE1pC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMo7B,2CAA4Cga,GAAW,EAClE,KAAKr1C,EAAAC,MAAMm6B,oCAKT,GAJA4a,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAewE,QAAO,GACxE1B,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAasC,eAC5C,CACZsd,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAMrB,OAHAowB,EAAWj9D,KAAK07D,uBAAuBuB,EAAUC,GACjDC,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,YACT/vD,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,QACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS4C,OAAQq3C,EAAUE,GAExD,OACA,OACA,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS4C,OAAQq3C,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASg8C,OAAQ/B,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASg8C,OACTt8D,EAAAsgB,SAAS4C,OACbq3C,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn9D,KAAKsM,MACH/J,EAAAgK,eAAeuyD,2CACf3zC,EAAW1e,MAAOwb,EAAAk5B,sBAAsBh2B,EAAWG,UAAWtrB,KAAK+vD,YAAY9+C,YAE1EtR,EAAOktC,oBAEhB,QACE1pC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMq7B,iBAAkB+Z,GAAW,EACxC,KAAKr1C,EAAAC,MAAMo6B,UAKT,GAJA2a,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAewE,QAAO,GACxE1B,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa8B,aAC5C,CACZ8d,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAGrB,GAAIywB,EACFH,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,gBACZ,CAGL,GAFAoN,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAtBdowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAWN,OAAQ1hB,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASsC,OAAQ23C,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASi8C,OAAQhC,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASi8C,OACTv8D,EAAAsgB,SAASsC,OACb23C,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn9D,KAAKsM,MACH/J,EAAAgK,eAAeuyD,2CACf3zC,EAAW1e,MAAOwb,EAAAk5B,sBAAsBh2B,EAAWG,UAAWtrB,KAAK+vD,YAAY9+C,YAE1EtR,EAAOktC,oBAEhB,QACE1pC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMs7B,WAAY8Z,GAAW,EAClC,KAAKr1C,EAAAC,MAAMq6B,IAKT,GAJA0a,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAewE,QAAO,GACxE1B,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa+B,YAC5C,CACZ6d,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAGrB,GAAIywB,EACFH,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,gBACZ,CAGL,GAFAoN,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAtBdowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAWN,OAAQ1hB,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,QACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASk8C,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASk8C,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASm8C,MAAOlC,EAAUE,GACrD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASm8C,MACTz8D,EAAAsgB,SAASk8C,MACbjC,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn9D,KAAKsM,MACH/J,EAAAgK,eAAeuyD,2CACf3zC,EAAW1e,MAAOwb,EAAAk5B,sBAAsBh2B,EAAWG,UAAWtrB,KAAK+vD,YAAY9+C,YAE1EtR,EAAOktC,oBAEhB,QACE1pC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMu7B,aAAc6Z,GAAW,EACpC,KAAKr1C,EAAAC,MAAMs6B,MAKT,GAJAya,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAewE,QAAO,GACxE1B,EAAWl9D,KAAK+vD,YAGZ/vD,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAC5C,IAAIusC,EAEEv9B,EADN,GADIu9B,EAAiB4gB,EAAS5gB,eAG5B,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAagC,aAC5C,CACZ4d,EAAOjiB,KAAKu9D,sBAAsBx+C,EAAU0C,EAAMw7C,EAAUv7C,EAAOyJ,GACnE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAGrB,GAAIywB,EACFH,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,gBACZ,CAGL,GAFAoN,EAAYn9D,KAAK+zD,4BAA4BryC,EAAOw7C,EAAQ,GAC5DE,EAAYp9D,KAAK+vD,cACbsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiB6f,EAAUE,GAAW,IAuB1D,OALAp9D,KAAKsM,MACH/J,EAAAgK,eAAeixD,8CACfryC,EAAW1e,MAAO,IAAKywD,EAASjsD,WAAYmsD,EAAUnsD,YAExDjR,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,oBAtBdowB,EAAWj9D,KAAKy7D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB57C,GAEF07C,EAAYn9D,KAAKy7D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtB37C,GAWN,OAAQ1hB,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,QACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASo8C,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASo8C,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASq8C,OAAQpC,EAAUE,GACtD,MAEF,OACA,OACEl7C,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASq8C,OACT38D,EAAAsgB,SAASo8C,OACbnC,EACAE,GAEF,MAEF,QACA,QAKE,OAJAn9D,KAAKsM,MACH/J,EAAAgK,eAAeuyD,2CACf3zC,EAAW1e,MAAOwb,EAAAk5B,sBAAsBh2B,EAAWG,UAAWtrB,KAAK+vD,YAAY9+C,YAE1EtR,EAAOktC,oBAEhB,QACE1pC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAKF,KAAK5kB,EAAAC,MAAMy6B,oBAOT,GANAsa,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAChBoN,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,YAGb9tC,EAAOtiB,EAAOk0C,gBAAgBopB,GAAU,EAAM,GAChDj9D,KAAK23D,cAAcsF,EAAUj9D,KAAK+vD,aAClC9tC,EAAOtiB,EAAOgsC,SACZ3rC,KAAK23D,cAAcsF,EAAUj9D,KAAK+vD,aAClCoN,EACAl7C,OAIG,CACL,IAAIhG,EAAOjc,KAAKuf,gBAAgBtD,KAC5B88C,EAAY/4D,KAAKuf,gBAAgB5C,oBACnC3c,KAAK+vD,aACJ9zC,EAAK+F,YAAYi7C,EAAUj9D,KAAK+vD,cAEnC9tC,EAAOtiB,EAAOgsC,SACZ3rC,KAAK23D,cACHh4D,EAAOupC,eAAe6vB,EAAUp/C,MAAOsjD,GACvCj9D,KAAK+vD,aAEPoN,EACAx9D,EAAOqpC,eACL7lC,OAAO41D,GAAWp/C,MAClB3Z,KAAK+vD,YAAYxzC,iBAIvB,MAEF,KAAK0L,EAAAC,MAAM06B,QAOT,GANAqa,EAAWj9D,KAAK+zD,4BAA4BtyC,EAAM24C,EAAc,GAChE8C,EAAWl9D,KAAK+vD,YAChBoN,EAAYn9D,KAAKq0D,kBAAkB3yC,EAAOw7C,EAAQ,KAClDE,EAAYp9D,KAAK+vD,YAGb9tC,EAAOjiB,KAAKL,OAAOk0C,gBAAgBopB,GAAU,EAAM,GACrDh7C,EAAOjiB,KAAKL,OAAOgsC,SACjB3rC,KAAK23D,cAAcsF,EAAUj9D,KAAK+vD,aAClC9tC,EACAk7C,OAIG,CACDlhD,EAAOjc,KAAKuf,gBAAgBtD,KAC5B88C,EAAY/4D,KAAKuf,gBAAgB5C,oBACnC3c,KAAK+vD,aACJ9zC,EAAK+F,YAAYi7C,EAAUj9D,KAAK+vD,cAEnC9tC,EAAOtiB,EAAOgsC,SACZ3rC,KAAK23D,cACHh4D,EAAOupC,eAAe6vB,EAAUp/C,MAAOsjD,GACvCj9D,KAAK+vD,aAEPpwD,EAAOqpC,eACL7lC,OAAO41D,GAAWp/C,MAClB3Z,KAAK+vD,YAAYxzC,gBAEnB4gD,GAGJ,MAEF,QACEh6D,QAAO,GACP8e,EAAOjiB,KAAKL,OAAOktC,oBAGvB,OAAOywB,EACHt9D,KAAKk6D,2BAA2Bz4C,EAAMQ,EAAMm4C,GAAkB53D,EAAA6F,KAAKc,MACnE8Y,GAGN0tC,EAAA1tD,UAAAq9D,qBAAA,SACEC,EACAj+D,EACAk+D,EACA7M,GAEA,IAAI8M,EACAC,EAAyB,EAO7B,OANIH,EAAiBxvD,GAAGzN,EAAA6M,YAAYkM,WAClCqkD,EAAUF,EACVC,MAEAA,GAAwBn+D,GAEnBtB,KAAK2/D,kBACVJ,EACAE,EACA9M,EACA+M,EACAH,EAAiBluD,aAAa4qC,EAAAt2C,eAAe4N,UAIjDo8C,EAAA1tD,UAAAs7D,sBAAA,SACEgC,EACA99C,EACAw7C,EACAv7C,EACAixC,GAEA,IAAI8M,EACAC,EAAyB,EAC7B,GAAIH,EAAiBxvD,GAAGzN,EAAA6M,YAAYkM,UAAW,CAC7C,IAAI3O,EAASvJ,OAAOo8D,EAAiB7yD,QACrCvJ,OAAOuJ,EAAOhC,MAAQuxC,EAAAv2C,YAAY0V,OAClCskD,EAAUzC,EACVwC,GAAwB/9C,QAExB+9C,GAAwBh+C,EAAMC,GAShC,OAPU1hB,KAAK2/D,kBACbJ,EACAE,EACA9M,EACA+M,EACAH,EAAiBluD,aAAa4qC,EAAAt2C,eAAe4N,UAKjDo8C,EAAA1tD,UAAAw7D,kBAAA,SAAkBtyC,EAAwBy0C,EAA6BxF,GACrE,IAOItd,EANAz1C,EADUrH,KAAKqY,QACIhR,SACnBkY,EAAkBvf,KAAKuf,gBACvBb,EAASrX,EAASw4D,kBAAkB10C,EAAY5L,GACpD,IAAKb,EAAQ,OAAO1e,KAAKL,OAAOktC,oBAIhC,OAAQnuB,EAAOhU,MACb,KAAKuxC,EAAAv2C,YAAY4L,OACf,IAAKtR,KAAKwzD,cAAsB90C,GAC9B,OAAO1e,KAAKL,OAAOktC,oBAErB1pC,OAAgBub,EAAQ3P,MAAQvM,EAAA6F,KAAKc,MAGvC,KAAK8yC,EAAAv2C,YAAYkU,MACjB,KAAKqiC,EAAAv2C,YAAYmY,MACfi/B,EAAmCp+B,EAAQ3P,KAC3C,MAEF,KAAKktC,EAAAv2C,YAAY4P,SACf,IAAIE,EAA6BkJ,EAAQlJ,gBACzC,GAAIA,EAAiB,CACnB,IAAI5G,EAAW5O,KAAKqH,SAASkI,gBAAgBiG,EAAiB,MAC9D,IAAK5G,EAAU,OAAO5O,KAAKL,OAAOktC,oBAClC1pC,OAAmD,GAA5CyL,EAASa,UAAUC,eAAetM,QACzC05C,EAAaluC,EAASa,UAAUC,eAAe,GAC/C,MAMF,OAJA1P,KAAKsM,MACH/J,EAAAgK,eAAeuzD,oEACf30C,EAAW1e,MAAkBiS,EAAQrU,cAEhCrK,KAAKL,OAAOktC,oBAErB,KAAKoP,EAAAv2C,YAAY0V,MACf,GAAI/T,EAAS04D,yBAA0B,CACrC,IAAIC,EAAczgD,EAAgBtD,KAAKlM,GAAE,MACrCkwD,EAAqBvhD,EAAQE,eAAeq9B,EAAA55C,aAAaqB,YAAas8D,GAC1E,IAAKC,EAaH,OAZyBvhD,EAAQE,eAAeq9B,EAAA55C,aAAaoB,YAAau8D,GAOxEhgE,KAAKsM,MACH/J,EAAAgK,eAAe2zD,+CACf/0C,EAAW1e,MAAeiS,EAAQrU,cAPpCrK,KAAKsM,MACH/J,EAAAgK,eAAe4zD,qCACfh1C,EAAW1e,MAAeiS,EAAQrU,cAQ/BrK,KAAKL,OAAOktC,oBAErB1pC,OAAqD,GAA9C88D,EAAWxwD,UAAUC,eAAetM,QAC3C05C,EAAamjB,EAAWxwD,UAAUC,eAAe,GACjD,MAIJ,QAKE,OAJA1P,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,oBAKvB1pC,OAAO25C,GAAct6C,EAAA6F,KAAKc,MAC1B,IAAIq2D,EAAYx/D,KAAKq0D,kBAAkBuL,EAAiB9iB,EAAU,KAClE,OAAO98C,KAAKk6D,2BACV/uC,EACAq0C,EACApF,GAAkB53D,EAAA6F,KAAKc,OAI3BwmD,EAAA1tD,UAAAi4D,2BAAA,SACE/uC,EACAi1C,EACAC,QAAA,IAAAA,OAAA,GAEA,IAAI1gE,EAASK,KAAKL,OACd+e,EAAS1e,KAAKqH,SAASw4D,kBAAkB10C,EAAYnrB,KAAKuf,iBAC9D,IAAKb,EAAQ,OAAO/e,EAAOktC,oBAE3B,OAAQnuB,EAAOhU,MACb,KAAKuxC,EAAAv2C,YAAYkU,MACf,IAAI7K,EAAe2P,EAAQ3P,KAG3B,GAFA5L,OAAO4L,GAAQvM,EAAA6F,KAAKc,MACpBnJ,KAAK+vD,YAAcsQ,EAAMtxD,EAAOvM,EAAA6F,KAAKc,KACzBuV,EAAQ3O,GAAGzN,EAAA6M,YAAY+I,OAKjC,OAJAlY,KAAKsM,MACH/J,EAAAgK,eAAeuzD,oEACf30C,EAAW1e,MAAOiS,EAAOrU,cAEpB1K,EAAOktC,oBAEhB,IAAI5wB,EAAOjc,KAAKuf,gBAAgBtD,KAIhC,OAHIlN,EAAKgB,GAAG,KACVkM,EAAKQ,gBAAwBiC,EAAQ/E,OAAQsC,EAAK+F,YAAYo+C,EAAsBrxD,IAE/EsxD,EACH1gE,EAAOupC,eAAuBxqB,EAAQ/E,MAAOymD,GAC7CzgE,EAAOmrC,eAAuBpsB,EAAQ/E,MAAOymD,GAEnD,KAAKnkB,EAAAv2C,YAAY4L,OACf,IAAKtR,KAAKwzD,cAAsB90C,GAAS,OAAO/e,EAAOktC,oBACnD99B,EAAgB2P,EAAQ3P,KAG5B,GAFA5L,OAAO4L,GAAQvM,EAAA6F,KAAKc,MACpBnJ,KAAK+vD,YAAcsQ,EAAMtxD,EAAOvM,EAAA6F,KAAKc,KACzBuV,EAAQ3O,GAAGzN,EAAA6M,YAAY+I,OAMjC,OALAlY,KAAKsM,MACH/J,EAAAgK,eAAeuzD,oEACf30C,EAAW1e,MACXiS,EAAOrU,cAEF1K,EAAOktC,oBAGhB,GADAuzB,EAAuBpgE,KAAK07D,uBAAuB0E,EAAsBrxD,GACrEsxD,EAAK,CACP,IAAIrO,EAAajjD,EAAKwN,eAClBlS,EAAeqU,EAAOrU,aAC1B,OAAO1K,EAAOurC,YAAY,MACxBvrC,EAAOqrC,gBAAgB3gC,EAAc+1D,GACrCzgE,EAAOypC,gBAAgB/+B,EAAc2nD,IACpCA,GAEH,OAAOryD,EAAOqrC,gBAAgBtsB,EAAOrU,aAAc+1D,GAGvD,KAAKnkB,EAAAv2C,YAAYmY,MACf,IAAM9R,EAAsB2S,EAAQ3S,YACpC,GACU2S,EAAQ3O,GAAGzN,EAAA6M,YAAYqE,YAE7BxT,KAAKuf,gBAAgBxP,GAAGzN,EAAA6M,YAAY4E,cACrB,MAAfhI,GAC2B,MAA3BA,EAAY0N,YAOd,OAJAzZ,KAAKsM,MACH/J,EAAAgK,eAAeuzD,oEACf30C,EAAW1e,MAAeiS,EAAQrU,cAE7B1K,EAAOktC,oBAEhB,IAAIyzB,EAAiBn9D,OAAOnD,KAAKqH,SAASk5D,uBACtCC,EAAWxgE,KAAK+zD,4BAClBuM,EACAtgE,KAAKoI,QAAQW,UAAS,GAGpBgG,EAAe2P,EAAQ3P,KAC3B/O,KAAK+vD,YAAcsQ,EAAMtxD,EAAOvM,EAAA6F,KAAKc,KACjC6oD,EAAajjD,EAAKwN,eAKtB,GAJa,IAATxN,EAAKrE,OAEP01D,EAAuBpgE,KAAK07D,uBAAuB0E,EAAsBrxD,IAEvEsxD,EAAK,CAEHpkD,GADAsD,EAAkBvf,KAAKuf,iBACAtD,KAD3B,IAMI+8C,EAJYz5C,EAAgB5C,oBAC9B5N,GACCkN,EAAK+F,YAAYo+C,EAAsBrxD,IAEX4K,MAG/B,OAAOha,EAAOurC,YAAY,MACxBvrC,EAAOmrC,eAAekuB,EAAgBoH,GACtCzgE,EAAOgqC,YACL56B,EAAKc,SACL2wD,EACA7gE,EAAOqpC,eAAegwB,EAAgBhH,GACtCA,EACQtzC,EAAQZ,cAElBne,EAAOqpC,eAAegwB,EAAgBhH,IACrCA,GAGH,OAAOryD,EAAOgqC,YACZ56B,EAAKc,SACL2wD,EACAJ,EACApO,EACQtzC,EAAQZ,cAItB,KAAKm+B,EAAAv2C,YAAY4P,SACf,IAAIE,EAA6BkJ,EAAQlJ,gBACzC,GAAIA,EAAiB,CACnB,IAAIirD,EAAiBzgE,KAAKqH,SAASkI,gBAAgBiG,EAAiB,MACpE,IAAKirD,EAAgB,OAAO9gE,EAAOktC,oBAGnC,IAAKwzB,EAAK,CACR,GAAII,EAAe1wD,GAAGzN,EAAA6M,YAAYkM,UAAW,CACvCilD,EAAiBn9D,OAAOnD,KAAKqH,SAASk5D,uBACtCC,EAAWxgE,KAAK+zD,4BAClBuM,EACAtgE,KAAKoI,QAAQW,UAAS,GAGxB,OAAO/I,KAAKo+D,eAAeqC,GAAkBD,EAAUJ,IAEvD,OAAOpgE,KAAKo+D,eAAeqC,GAAkBL,IAKjD,IAAI7qD,EAA6BmJ,EAAQnJ,gBACzCpS,OAA0B,MAAnBoS,GACP,IAAImrD,EAAiB1gE,KAAKqH,SAASkI,gBAAmCgG,EAAiB,MACvF,IAAKmrD,EAAgB,OAAO/gE,EAAOktC,oBACnC,IACI8zB,GADA/wD,EAAa8wD,EAAejxD,UAAUG,YACR2M,eAClC,GAAIkkD,EAAe1wD,GAAGzN,EAAA6M,YAAYkM,UAAW,CACvCilD,EAAiBn9D,OAAOnD,KAAKqH,SAASk5D,uBACtCC,EAAWxgE,KAAK+zD,4BAClBuM,EACAtgE,KAAKoI,QAAQW,UAAS,GAIpBiwD,EADYh5D,KAAKuf,gBAAgB5C,oBAAoB/M,GAAY,GACtC+J,MAC/B,OAAOha,EAAOurC,YAAY,MACxBlrC,KAAKo+D,eAAeqC,GAClB9gE,EAAOupC,eAAe8vB,EAAgBwH,GACtCJ,IAEFpgE,KAAKo+D,eAAesC,GAClB/gE,EAAOqpC,eAAegwB,EAAgB2H,MAEvCA,GAGH,OAAOhhE,EAAOurC,YAAY,MACxBlrC,KAAKo+D,eAAeqC,GAAkBL,IACtCpgE,KAAKo+D,eAAesC,IACnBC,GAQP,OALE3gE,KAAKsM,MACH/J,EAAAgK,eAAeuzD,oEACf30C,EAAW1e,MAAOiS,EAAOrU,cAGtB1K,EAAOktC,oBAEhB,KAAKoP,EAAAv2C,YAAY0V,MACf,IAAIgR,EAAoBpsB,KAAKqH,SAAS04D,yBACtC,GAAI3zC,EAAmB,CACrB,IAAI4zC,EAAchgE,KAAKuf,gBAAgBtD,KAAKlM,GAAE,MAC1C6wD,EAAqBliD,EAAQE,eAAeq9B,EAAA55C,aAAaoB,YAAau8D,GAC1E,IAAKY,EAKH,OAJA5gE,KAAKsM,MACH/J,EAAAgK,eAAe4zD,qCACfh1C,EAAW1e,MAAOiS,EAAOrU,cAEpB1K,EAAOktC,oBAEhB,IAAIozB,EAAqBvhD,EAAQE,eAAeq9B,EAAA55C,aAAaqB,YAAas8D,GAC1E,IAAKC,EAMH,OALAjgE,KAAKsM,MACH/J,EAAAgK,eAAe2zD,+CACf/0C,EAAW1e,MAAOiS,EAAOrU,cAE3BrK,KAAK+vD,YAAcsQ,EAAMO,EAAWnxD,UAAUG,WAAapN,EAAA6F,KAAKc,KACzDxJ,EAAOktC,oBAEhB,IAAIiQ,EAAqBp+B,EAAQ3P,KAO7B8xD,GANAP,EAAiBn9D,OAAOnD,KAAKqH,SAASk5D,uBACtCC,EAAWxgE,KAAK+zD,4BAClBuM,EACAtgE,KAAKoI,QAAQW,UAAS,GAGN/I,KAAKq0D,kBACrBjoC,EACA5pB,EAAA6F,KAAKG,IAAG,MAIV,GAAI63D,EAAK,CACP,IAAI9gD,EACAuhD,GADAvhD,EAAkBvf,KAAKuf,iBACWnD,aAAa0gC,GAAY,GAC3DikB,EAAmBxhD,EAAgB5C,oBAAoB3c,KAAK+vD,aAAa,GACzEngD,EAAagxD,EAAWnxD,UAAUG,WAEtC,OADA5P,KAAKuf,gBAAgB7C,cAAcokD,GAC5BnhE,EAAOurC,YAAY,MACxBlrC,KAAKo+D,eAAe6B,GAClBtgE,EAAOupC,eAAe43B,EAAgBnnD,MAAO6mD,GAC7C7gE,EAAOupC,eAAe63B,EAAiBpnD,MAAOknD,GAC9CT,IAEFpgE,KAAKo+D,eAAewC,GAClBjhE,EAAOqpC,eAAe83B,EAAgBnnD,MAAOmnD,EAAgB/xD,KAAKwN,gBAClE5c,EAAOqpC,eAAe+3B,EAAiBpnD,MAAOonD,EAAiBhyD,KAAKwN,mBAErE3M,EAAW2M,gBAEd,OAAOvc,KAAKo+D,eAAe6B,GACzBO,EACAK,EACAT,KAWV,OAJApgE,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,qBAGhB8iB,EAAA1tD,UAAA04D,sBAAA,SAAsBxvC,EAA4BivC,GAChD,IAKI3qD,EACAuxD,EANArhE,EAASK,KAAKL,OACd4f,EAAkBvf,KAAKuf,gBACvBb,EAAS1e,KAAKqH,SAASw4D,kBAAkB10C,EAAWA,WAAY5L,GACpE,IAAKb,EAAQ,OAAO/e,EAAOktC,oBAI3B,OAAQnuB,EAAOhU,MAGb,KAAKuxC,EAAAv2C,YAAYsJ,mBACf,IAAI/M,EAA+Byc,EAC/BV,EAAgBmN,EAAWnN,cAG/B,GAAI/b,EAAUoP,aAAa4qC,EAAAt2C,eAAemL,SACxC,OAAO9Q,KAAKihE,6BAA6Bh/D,EAAWkpB,EAAYivC,GAGlE,IAAIxrD,EAA4B,KAGhC,GAAIoP,EAAe,CACjB,IAAK/b,EAAU8N,GAAGzN,EAAA6M,YAAYC,SAK5B,OAJApP,KAAKsM,MACH/J,EAAAgK,eAAe20D,sBACf/1C,EAAWA,WAAW1e,MAAOxK,EAAUoI,cAElC1K,EAAOktC,oBAEhBj+B,EAAW5O,KAAKqH,SAAS2tD,iCACvB/yD,EACA+b,EACAhe,KAAKuf,gBAAgBtD,KAAKhC,wBAC1BkR,OAIG,IAAIlpB,EAAU8N,GAAGzN,EAAA6M,YAAYC,SAAU,CAI5C,IAHA,IAAI+xD,EAAgB,IAAIt7D,IACpBmS,EAAiB7U,OAAOlB,EAAU8J,YAAYiM,gBAC9CopD,EAAoBppD,EAAe5U,OAC9B/C,EAAI,EAAGA,EAAI+gE,IAAqB/gE,EACvC8gE,EAAc/2D,IAAI4N,EAAe3X,GAAGO,KAAKgM,KAAM,MAGjD,IAAI8C,EAAiBzN,EAAU8J,YAAY0D,UAAUoa,WACjDw3C,EAAoB3xD,EAAetM,OACnCq8D,EAAsBt0C,EAAW9W,UACjCitD,EAAe7B,EAAoBr8D,OACnCm+D,EAAgB,IAAIz3D,MAAqBw3D,GAC7C,IAASjhE,EAAI,EAAGA,EAAIghE,IAAqBhhE,EAAG,CAC1C,IAAI4sD,EAAWv9C,EAAerP,GAAG0O,KAC7BnO,EAAOqsD,EAASviD,MAAQjI,EAAAkI,SAASqpB,KAAkBi5B,EAAUrsD,KAAKgM,KAAO,KACzE40D,EAAqBnhE,EAAIihE,EACzB7B,EAAoBp/D,GACpB4B,EAAU8J,YAAY0D,UAAUoa,WAAWxpB,GAAGoZ,YAClD,IAAK+nD,EAKH,OAJAxhE,KAAKsM,MACH/J,EAAAgK,eAAe0I,+BACfkW,EAAW1e,MAAO40D,EAAkBpwD,SAAS,IAAKqwD,EAAarwD,SAAS,KAEnEtR,EAAOktC,oBAEhB,GAAa,OAATjsC,GAAiBugE,EAAczyD,IAAI9N,GAAO,CAE5C,GADI6gE,EAAeN,EAAcjgE,IAAIN,GACnB,CAChB2gE,EAAclhE,GAAKL,KAAK+zD,4BAA4ByN,EAAoBC,EAAY,GACpF,IAAIpE,OAAU,EACd,KAAMA,EAAa76D,EAAA6F,KAAKg1C,iBAAiBokB,EAAczhE,KAAK+vD,aAAa,OACjEsN,EAAa76D,EAAA6F,KAAKg1C,iBAAiBokB,EAAczhE,KAAK+vD,aAAa,IAKvE,OAJA/vD,KAAKsM,MACH/J,EAAAgK,eAAeynD,mCACftkD,EAAerP,GAAG0O,KAAKtC,MAAOzM,KAAK+vD,YAAY9+C,WAAYwwD,EAAaxwD,YAEnEtR,EAAOktC,oBAGlB40B,EAAepE,OAEfkE,EAAclhE,GAAKL,KAAK+zD,4BAA4ByN,EAAoBh/D,EAAA6F,KAAKG,IAAG,GAChFi5D,EAAezhE,KAAK+vD,YAGtBoR,EAAc/2D,IAAIxJ,EAAM6gE,OACnB,CACL,IAAIC,EAAe1hE,KAAKqH,SAASusD,YAC/BlkD,EAAerP,GAAG0O,KAClB/O,KAAKuf,gBAAgBtD,KAAKhC,yBAE5B,IAAKynD,EAAc,OAAO/hE,EAAOktC,oBACjC00B,EAAclhE,GAAKL,KAAKq0D,kBACtBmN,EACAE,EAAY,MAMlB,IAAIC,EAAwB,IAAI73D,MAAYs3D,GAC5C,IAAS/gE,EAAI,EAAGA,EAAI+gE,IAAqB/gE,EAAG,CAC1C,IAAIohE,EAAet+D,OAAOg+D,EAAcjgE,IAAI8W,EAAe3X,GAAGO,KAAKgM,OACnE+0D,EAAsBthE,GAAKohE,EAO7B,OALA7yD,EAAW5O,KAAKqH,SAASkI,gBACvBtN,EACA0/D,EACA3hE,KAAKuf,gBAAgBtD,KAAKhC,0BAGrBja,KAAKo+D,eAAexvD,EAAU2yD,GADfvhE,KAAKL,OAAOktC,oBAQlCj+B,EAAW5O,KAAKqH,SAASkI,gBACvBtN,EACA,KACAjC,KAAKuf,gBAAgBtD,KAAKhC,yBAG9B,IAAKrL,EAAU,OAAO5O,KAAKL,OAAOktC,oBAGlC,IAAI2zB,EAA0B,EAS9B,OARI5xD,EAASmB,GAAGzN,EAAA6M,YAAYkM,YAC1BmlD,EAAWxgE,KAAK+zD,4BACd5wD,OAAOnD,KAAKqH,SAASk5D,uBACrBvgE,KAAKoI,QAAQW,UAAS,IAKnB/I,KAAK2/D,kBACV/wD,EACAuc,EAAW9W,UACX8W,EACAq1C,EACA5xD,EAASyC,aAAa4qC,EAAAt2C,eAAe4N,SAKzC,KAAK0oC,EAAAv2C,YAAYkU,MACf,GAAInK,EAAoBiP,EAAQ3P,KAAKY,mBAAoB,CAErDqxD,EADUtiD,EAAQ3O,GAAGzN,EAAA6M,YAAYmK,SACtB3Z,EAAOgoC,UAAUoI,QAAgBrxB,EAAQrF,uBAEzC1Z,EAAOqpC,eAAuBtqB,EAAQ/E,MAAK,GAExD,MAMA,OAJA3Z,KAAKsM,MACH/J,EAAAgK,eAAeq1D,uGACfz2C,EAAW1e,MAAeiS,EAAQ3P,KAAKkC,YAElCtR,EAAOktC,oBAGlB,KAAKoP,EAAAv2C,YAAY4L,OACf,GAAI7B,EAAqBiP,EAAQ3P,KAAKY,mBAAoB,CACxDqxD,EAAWrhE,EAAOypC,gBAAyB1qB,EAAQrU,aAAuBqU,EAAQ3P,KAAKwN,gBACvF,MAMA,OAJAvc,KAAKsM,MACH/J,EAAAgK,eAAeq1D,uGACfz2C,EAAW1e,MAAgBiS,EAAQ3P,KAAKkC,YAEnCtR,EAAOktC,oBAGlB,KAAKoP,EAAAv2C,YAAYmY,MAEf,GAAIpO,GADAV,EAAe2P,EAAQ3P,MACNY,mBAAoB,CACvC,IAAI2wD,EAAiBn9D,OAAOnD,KAAKqH,SAASk5D,uBACtCC,EAAWxgE,KAAK+zD,4BAClBuM,EACAtgE,KAAKoI,QAAQW,UAAS,GAGxBi4D,EAAWrhE,EAAO2pC,WAChB,GACA,EACAk3B,EAAQ,EAEA9hD,EAAQZ,cAElB,MAMA,OAJA9d,KAAKsM,MACH/J,EAAAgK,eAAeq1D,uGACfz2C,EAAW1e,MAAOsC,EAAKkC,YAElBtR,EAAOktC,oBAGlB,KAAKoP,EAAAv2C,YAAY8X,gBACf/N,EAA6BiP,EAAQjP,UACrCuxD,EAAWhhE,KAAKq0D,kBACdlpC,EAAWA,WACMzM,EAAQ3P,KAAI,KAI/B,MAGF,KAAKktC,EAAAv2C,YAAY4P,SAEf,IAAIvG,EAEJ,GAHAiyD,EAAWhhE,KAAK6hE,cAAwBnjD,EAAQyM,EAAWA,cAE3D1b,GADIV,EAAO/O,KAAK+vD,aACCpgD,oBAMf,OAJA3P,KAAKsM,MACH/J,EAAAgK,eAAeq1D,uGACfz2C,EAAW1e,MAAOsC,EAAKkC,YAElBtR,EAAOktC,oBAEhB,MAIF,QAKE,OAJA7sC,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,oBAGlB,OAAO7sC,KAAK8hE,oBACVryD,EACAuxD,EACA71C,EAAW9W,UACX8W,IAIIwkC,EAAA1tD,UAAAg/D,6BAAR,SACEh/D,EACAkpB,EACAivC,GAEA,IAAIp8C,EAA+B,KAI/B+jD,EAAoB52C,EAAWnN,cAC/BmN,EAAWnN,gBACR/b,EAAU8N,GAAGzN,EAAA6M,YAAYC,UAC5BpP,KAAKsM,MACH/J,EAAAgK,eAAe20D,sBACf/1C,EAAW1e,MAAOxK,EAAUoI,cAGhC2T,EAAgBhe,KAAKqH,SAAS26D,qBAC5B7+D,OAAOlB,EAAU8J,YAAYiM,gBAC7B+pD,EACA/hE,KAAKuf,gBAAgBtD,KAAKhC,wBAC1BkR,IAKJ,IAAIlJ,EAAO6sC,EAAAmT,YACTjiE,KACAiC,EACA+b,EACAmN,EAAW9W,UACX+lD,EACAjvC,GAEF,OAAKlJ,IACHjiB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,sBASvB8iB,EAAA1tD,UAAAigE,mBAAA,SACEzyD,EACA6xD,EACAa,EACAxP,GAKA,GAAIwP,IAAwB,MADb1yD,EAAU8L,UAMvB,OAJAvb,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,QAEN,EAIT,IAAI0xC,EAAU1uC,EAAU0uC,QACxB,GAAIA,EAKF,OAJAn+C,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,QAEN,EAGT,IAAI21D,EAAU3yD,EAAUyuC,mBACpB1O,EAAU//B,EAAUC,eAAetM,OAGvC,OAAIk+D,EAAec,GACjBpiE,KAAKsM,MACH81D,EAAU5yB,EACNjtC,EAAAgK,eAAe81D,wCACf9/D,EAAAgK,eAAe0I,+BACnB09C,EAAWlmD,MAAO21D,EAAQnxD,WAAYqwD,EAAarwD,aAE9C,KAILqwD,EAAe9xB,IAAY2O,KAC7Bn+C,KAAKsM,MACH/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO+iC,EAAQv+B,WAAYqwD,EAAarwD,aAE9C,IAOX0+C,EAAA1tD,UAAA09D,kBAAA,SACE/wD,EACA6wD,EACA9M,EACA+M,EACA4C,QADA,IAAA5C,MAAA,QACA,IAAA4C,OAAA,GAEA,IAAIhB,EAAe7B,EAAoBr8D,OACnCqM,EAAYb,EAASa,UAEzB,IAAKzP,KAAKkiE,mBACRzyD,EACA6xD,EACW,GAAX5B,EACA/M,GAEA,OAAO3yD,KAAKL,OAAOktC,oBAIrB,GAAIy1B,EAAQ,CAEV,GADAn/D,QAAQyL,EAASmB,GAAGzN,EAAA6M,YAAYmnD,cAC5Bt2D,KAAK6vD,uBAAuB0S,SAAS3zD,GAKlC,CACL5O,KAAK6vD,uBAAuB19C,KAAKvD,GACjC,IAAIqT,EAAOjiB,KAAKwiE,2BAA2B5zD,EAAU6wD,EAAqB9M,EAAY+M,GAEtF,OADA1/D,KAAK6vD,uBAAuBrzC,MACrByF,EARPjiB,KAAKs7B,QACH/4B,EAAAgK,eAAek2D,yCACf9P,EAAWlmD,MAAOmC,EAASvE,cAWjC,IAAIq4D,EAAuBhD,EAAU4B,EAAe,EAAIA,EACpDz4B,EAAW,IAAI/+B,MAAqB44D,GACpC/oD,EAAQ,EACR+lD,IACF72B,EAAS,GAAK62B,EACd/lD,EAAQ,GAGV,IADA,IAAIjK,EAAiBD,EAAUC,eACtBrP,EAAI,EAAGA,EAAIihE,IAAgBjhE,IAAKsZ,EACvCkvB,EAASlvB,GAAS3Z,KAAKq0D,kBACrBoL,EAAoBp/D,GACpBqP,EAAerP,GAAE,KAMrB,OADA8C,OAAOwW,GAAS+oD,GACT1iE,KAAKo+D,eAAexvD,EAAUi6B,IAI/B8mB,EAAA1tD,UAAAugE,2BAAR,SACE5zD,EACA6wD,EACA9M,EACA+M,gBAAA,IAAAA,MAAA,GAEA,IAAI4B,EAAe7B,EAAoBr8D,OACnCqM,EAAYb,EAASa,UACrB8P,EAAkBvf,KAAKuf,gBACvB5f,EAASK,KAAKL,OACdoM,EAAc6C,EAAS3M,UAAU8J,YAGjC42D,EAAepjD,EAAgBtD,KAC/B0D,EAAc/Q,EAASvE,aAAe,aAAeuE,EAASkM,gBAAgB7J,SAAS,IACvFrB,EAAahB,EAASa,UAAUG,WAChCqM,EAAOggC,EAAA//B,KAAKva,OAAO4d,GACvBtD,EAAK7R,IAAG,MACR6R,EAAK0D,YAAcA,EACnB1D,EAAKrM,WAAaA,EAClBqM,EAAKhC,wBAA0BrL,EAASqL,wBAIxC,IAAI+X,KACJ,GAAI0tC,EAAS,CACX,IAAIhzD,EAASvJ,OAAOyL,EAASlC,QAE7B,GADAvJ,OAAOuJ,EAAOhC,MAAQuxC,EAAAv2C,YAAY0V,OAC9B1Y,EAAAyf,gBAAgBu9C,IAAYh9D,EAAA0f,aAAaC,SAC3CpG,EAAKsE,oBACH7d,EAAA4f,iBAAiBo9C,GACThzD,EAAQqC,KAChB,YAEG,CACL,IAAI6zD,EAAY3mD,EAAKoE,eAAuB3T,EAAQqC,KAAM,QAAQ,GAClEijB,EAAK7f,KACHxS,EAAOmrC,eAAe83B,EAAUjpD,MAAO+lD,KAK7C,IADA,IAAIhwD,EAAiBD,EAAUC,eACtBrP,EAAI,EAAGA,EAAIihE,IAAgBjhE,EAAG,CACrC,IAAIwiE,EAAY7iE,KAAKq0D,kBACnBoL,EAAoBp/D,GACpBqP,EAAerP,GAAE,KAInB,GAAIqC,EAAAyf,gBAAgB0gD,IAAcngE,EAAA0f,aAAaC,SAC7CpG,EAAKsE,oBACH7d,EAAA4f,iBAAiBugD,GACjBnzD,EAAerP,GACfoP,EAAUuM,iBAAiB3b,QAGxB,CACL,IAAIyiE,EAAgB7mD,EAAKoE,eACvB3Q,EAAerP,GACfoP,EAAUuM,iBAAiB3b,IAC1B4b,EAAK+F,YAAY6gD,EAAWnzD,EAAerP,KAE9C2xB,EAAK7f,KACHxS,EAAOmrC,eAAeg4B,EAAcnpD,MAAOkpD,KAMjDtjD,EAAgBtD,KAAOA,EACvB,IAAIwiC,EAAgBhvC,EAAUC,eAAetM,OAC7C,IAAS/C,EAAIihE,EAAcjhE,EAAIo+C,IAAiBp+C,EAAG,CACjD,IAAIqzD,EAAW1zD,KAAKq0D,kBAClBlxD,OAAO4I,EAAY0D,UAAUoa,WAAWxpB,GAAGoZ,aAC3C/J,EAAerP,GAAE,KAIfyiE,EAAgB7mD,EAAKoE,eACvB3Q,EAAerP,GACfoP,EAAUuM,iBAAiB3b,IAC1B4b,EAAK+F,YAAY0xC,EAAUhkD,EAAerP,KAE7C2xB,EAAK7f,KACHxS,EAAOmrC,eAAeg4B,EAAcnpD,MAAO+5C,IAK/C,IAAIwE,EAAgB/0D,OAAO4I,EAAYimB,MACvC,GAAIkmC,EAAcxtD,MAAQjI,EAAAkI,SAASyrB,MAEjC,IADA,IAAI7rB,EAA8B2tD,EAAe3tD,WACjC1C,GAAPxH,EAAI,EAAOkK,EAAWnH,QAAQ/C,EAAIwH,IAAKxH,EAAG,CACjD,IAAI8pB,EAAOnqB,KAAKszD,iBAAiB/oD,EAAWlK,IAC5C,GAAIqC,EAAAyf,gBAAgBgI,IAASznB,EAAA0f,aAAam1C,MACxCvlC,EAAK7f,KAAKgY,GACNlO,EAAK/M,MAAK,KAA6B,WAI/C8iB,EAAK7f,KAAKnS,KAAKszD,iBAAiB4E,IAIlC,IAAI54C,EAAerD,EAAKqD,aACxB,GAAIA,EAAc,KAChB,IAAwB,IAAA3D,EAAA7O,EAAAwS,EAAalJ,UAAQlJ,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAA1C,IAAImT,EAAWjT,EAAA5L,MACd6e,EAAYpQ,GAAGzN,EAAA6M,YAAYiR,SAC7Bb,EAAgB7C,cAAcyD,qGAGlClE,EAAKqD,aAAe,KAOtB,OALArD,EAAKc,WACL/c,KAAKuf,gBAAgBtD,KAAO0mD,EAC5B3iE,KAAK+vD,YAAcngD,EAGfA,GAAcpN,EAAA6F,KAAKc,MAAS8S,EAAK/M,MAAK,IAOnC+M,EAAKlM,GAAE,GACVpQ,EAAOurC,YAAYvrB,EAAaqS,EAAMpiB,EAAW2M,gBACjDyV,EAAK5uB,OAAS,EACZzD,EAAOurC,YAAY,KAAMlZ,EAAMpiB,EAAW2M,gBAC1CyV,EAAK5uB,OACH4uB,EAAK,GACLryB,EAAOksC,aAZb7rC,KAAKsM,MACH/J,EAAAgK,eAAempD,+DACf3pD,EAAY0D,UAAUG,WAAWnD,OAE5B9M,EAAOktC,sBAYlB8iB,EAAA1tD,UAAA2vD,iBAAA,SAAiBmR,GAQf,IAAIroD,EAAaqoD,EAASroD,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIsoD,EAAoBD,EAAStzD,UAC7BwzD,EAAeF,EAAS14D,aACxB64D,EAAyBF,EAAkBtzD,eAC3CyzD,EAAgCJ,EAAS9gE,UAAU8J,YAAY0D,UAAUoa,WACzEu5C,EAAmBJ,EAAkBpzD,WACrCyzD,EAAiBL,EAAkBznD,SACnC+nD,EAAaP,EAAShzD,GAAGzN,EAAA6M,YAAYkM,UAGrCkoD,EAAeP,EAAkB9kB,mBACjCslB,EAAcD,EACdE,EAAeP,EAAuB9/D,OACtCsgE,EAAcD,EACdH,MACAE,IACAE,GAEJ,IAAIC,EAAcxgE,OAAOugE,EAAcF,GAEnCI,EAAoB,IAAI95D,MAAqB05D,GAC7CK,EAAe,EAGflkE,EAASK,KAAKL,OACd2jE,IACFM,EAAkB,GAAKjkE,EAAOqpC,eAAe,EAAGhpC,KAAKoI,QAAQ6pD,gBAC7D4R,EAAe,GAIjB,IAAK,IAAIxjE,EAAI,EAAGA,EAAIkjE,IAAgBljE,IAAKwjE,EACvCD,EAAkBC,GAAgBlkE,EAAOqpC,eAAe66B,EAAcX,EAAuB7iE,GAAGkc,gBAElGpZ,OAAO0gE,GAAgBL,GAGvB,IAAIM,EAAsB,IAAIthE,EAAAu7C,UAAUmlB,EAAwBE,EAAkBC,GAC9EU,EAAiBd,EAAe,cACpCa,EAAoB5lB,mBAAqBulB,GACzC/oD,EAAa,IAAIuhC,EAAAjiC,SACf+oD,EAAS9gE,UACT8hE,EACAD,EACAf,EAASr2D,OACTq2D,EAAS9oD,0BAEA7P,IAAI24D,EAASzqD,MAAQhW,EAAA6M,YAAYmnD,WAAah0D,EAAA6M,YAAY2iD,UACrEiR,EAASroD,WAAaA,EAItB,IAAI24C,EAAmBrzD,KAAKuf,gBAC5Bvf,KAAKuf,gBAAkB7E,EAGvB,IAAI2xB,EAAWs3B,EAAc,EACzBr2C,EAAQ,IAAIxjB,MAAcuiC,GAC1B23B,EAAM,KAAOL,EAAY1yD,SAAS,IACtC,IAAS5Q,EAAI,EAAGA,EAAIgsC,IAAYhsC,EAAG,CACjC,IAAI+uB,EAAQ/uB,EAAE4Q,SAAS,IAAM+yD,EAC7B12C,EAAMjtB,GAAK+uB,EAEb,IAAI4C,EAAOryB,EAAOurC,YAAY5d,EAAM,IAClC3tB,EAAOurC,YAAY,cACjBvrC,EAAOwsC,aAAa7e,EAAO,aAEzBi2C,EACI5jE,EAAO+oC,aACLhmC,EAAAsgB,SAAS66C,OACTl+D,EAAOypC,gBAAgB,QAAO,GAC9BzpC,EAAOgoC,UAAU47B,IAEnB5jE,EAAOypC,gBAAgB,QAAO,MAGtCzpC,EAAOktC,sBAET,IAASxsC,EAAI,EAAGA,EAAIsjE,IAAetjE,IAAKwjE,EAAc,CACpD,IAAI90D,EAAOm0D,EAAuBK,EAAeljE,GAC7C0L,EAAco3D,EAA8BI,EAAeljE,GAC3DoZ,EAAc1N,EAAY0N,YAC1Bi6C,OAAQ,EACRj6C,EACFi6C,EAAW/zD,EAAOmrC,eAAe+4B,EAC/B7jE,KAAKq0D,kBACH56C,EACA1K,EAAI,OAMR/O,KAAKsM,MACH/J,EAAAgK,eAAe03D,4CACfl4D,EAAYU,OAEdinD,EAAW/zD,EAAOktC,qBAEpB7a,EAAOryB,EAAOurC,YAAY5d,EAAMjtB,EAAI,IAClC2xB,EACA0hC,IAEFkQ,EAAkBC,GAAgBlkE,EAAOqpC,eAAe66B,EAAc90D,EAAKwN,gBAE7Evc,KAAKuf,gBAAkB8zC,EACvBlwD,OAAO0gE,GAAgBH,GAEvB,IAAI3S,EAAUpxD,EAAOytC,YACnB22B,EACA/jE,KAAKgxD,mBACH8S,EAAoBp0D,eACpBo0D,EAAoBl0D,WACpBk0D,EAAoBvoD,UAEtB/Y,EAAAm7C,mBAAmBjjC,EAAWL,kBAC9B1a,EAAOurC,YAAY,MACjBlZ,EACAryB,EAAO6sC,WACLy2B,EACAW,EACAR,EAAiB7mD,iBAElB6mD,EAAiB7mD,iBAGtB,OADA7B,EAAWqC,SAASpd,EAAQoxD,GACrBr2C,GAIDi1C,EAAA1tD,UAAAiiE,cAAR,WAEE,IAAKlkE,KAAKmwD,QAAS,CACjB,IAAIxwD,EAASK,KAAKL,OAClBK,KAAKmwD,QAAUxwD,EAAOotC,UAHL,QAIH,GAEZ,EACAptC,EAAOgoC,UAAU,IAGrB,MAVmB,SAcbgoB,EAAA1tD,UAAA4vD,cAAR,WAEE,IAAK7xD,KAAKowD,QAAS,CACjB,IAAIzwD,EAASK,KAAKL,OAClBK,KAAKowD,QAAUzwD,EAAOytC,YAHL,WAIfptC,KAAKgxD,oBAAqBxuD,EAAA6F,KAAKQ,KAAOrG,EAAA6F,KAAKc,MAC3C,KACAxJ,EAAOqrC,gBAAgBhrC,KAAKkkE,gBAC1BvkE,EAAOqpC,eAAe,EAAC,KAG3BrpC,EAAOkuC,kBAVU,WAUsB,YAEzC,MAZmB,YAgBrB8hB,EAAA1tD,UAAAm8D,eAAA,SACExvD,EACAi6B,QAAA,IAAAA,MAAA,MAEA,IAAIs7B,EAAct7B,EAAWA,EAASzlC,OAAS,EAC3Ck+D,EAAe6C,EAEfX,EADe50D,EAASa,UAAUyuC,mBAElCulB,EAAe70D,EAASa,UAAUC,eAAetM,OACjDsgE,EAAcD,EACd70D,EAASmB,GAAGzN,EAAA6M,YAAYkM,cACxBmoD,IACAE,IACApC,GAEJn+D,OAAOghE,GAAeX,GAEtB,IAAI7jE,EAASK,KAAKL,OAClB,IAAKK,KAAKi1D,gBAAgBrmD,GAAW,OAAOjP,EAAOktC,oBACnD,IAAIj9B,EAAahB,EAASa,UAAUG,WAChCw0D,EAAex1D,EAASmB,GAAGzN,EAAA6M,YAAY+kD,eAG3C,GAAIiQ,EAAcT,EAAa,CACxB76B,KACHA,EAAW,IAAI/+B,MAAM45D,IACZtgE,OAAS,GAKpB,IAHA,IAAIsM,EAAiBd,EAASa,UAAUC,eACpC20D,EAAiBz1D,EAAS3M,UAAU8J,YAAY0D,UAAUoa,WAC1Dy6C,GAA0B,EACrBjkE,EAAIihE,EAAcjhE,EAAIojE,IAAgBpjE,EAAG,CAChD,IAAIoZ,EAAc4qD,EAAehkE,GAAGoZ,YACpC,GAAsB,OAAhBA,IAAwBhX,EAAA2lB,oBAAoB3O,EAAY/O,MAAQ,CACpE45D,GAA0B,EAC1B,OAGJ,GAAIA,EACF,IAASjkE,EAAIihE,EAAcjhE,EAAIojE,IAAgBpjE,EAC7CwoC,EAAS12B,KACPnS,KAAKq0D,kBACSgQ,EAAehkE,GAAGoZ,YAC9B/J,EAAerP,GAAE,UAMlB,CACL,IAASA,EAAIihE,EAAcjhE,EAAIojE,IAAgBpjE,EAC7CwoC,EAAS12B,KAAKzC,EAAerP,GAAGm9C,aAAa79C,IAE/C,IAAKykE,EAAc,CACjB,IAAIrB,EAAWn0D,EAEf,GADAA,EAAW5O,KAAK4xD,iBAAiBhjD,IAC5B5O,KAAKi1D,gBAAgBrmD,GAAW,OAAOjP,EAAOktC,oBACnDj+B,EAASqN,KAAK3D,MAAQyqD,EAAS9mD,KAAK3D,MACpCtY,KAAKqY,QAAQjS,gBAAgBgE,IAAIwE,EAASvE,aAAcuE,GACxD,IAAI+xD,EAAmB/wD,EAAW2M,eAElC,OADAvc,KAAK+vD,YAAcngD,EACZjQ,EAAOurC,YAAY,MACxBvrC,EAAOqrC,gBAAgBhrC,KAAKkkE,gBAAiBvkE,EAAOgoC,UAAU25B,IAC9D3hE,EAAO6sC,WAAW59B,EAASvE,aAAcw+B,EAAU83B,IAClDA,KAOT,OADA3gE,KAAK+vD,YAAcngD,EACZjQ,EAAO6sC,WAAW59B,EAASvE,aAAcw+B,EAAUj5B,EAAW2M,iBAIvEozC,EAAA1tD,UAAA6/D,oBAAA,SACEryD,EACAuxD,EACAvB,EACA9M,EACA+M,QAAA,IAAAA,MAAA,GAEA,IAAI4B,EAAe7B,EAAoBr8D,OAEvC,IAAKpD,KAAKkiE,mBACRzyD,EACA6xD,EACW,GAAX5B,EACA/M,GAEA,OAAO3yD,KAAKL,OAAOktC,oBAGrB,IAAI61B,EAAuBhD,EAAU4B,EAAe,EAAIA,EACpDz4B,EAAW,IAAI/+B,MAAqB44D,GACpC/oD,EAAQ,EACR+lD,IACF72B,EAAS,GAAK62B,EACd/lD,EAAQ,GAGV,IADA,IAAIjK,EAAiBD,EAAUC,eACtBrP,EAAI,EAAGA,EAAIihE,IAAgBjhE,IAAKsZ,EACvCkvB,EAASlvB,GAAS3Z,KAAKq0D,kBACrBoL,EAAoBp/D,GACpBqP,EAAerP,GAAE,KAMrB,OADA8C,OAAOwW,GAAS+oD,GACT1iE,KAAKukE,iBAAiB90D,EAAWuxD,EAAUn4B,IAIpD8mB,EAAA1tD,UAAAsiE,iBAAA,SACE90D,EACAuxD,EACAn4B,QAAA,IAAAA,MAAA,MAEA,IAAIs7B,EAAct7B,EAAWA,EAASzlC,OAAS,EAC3Ck+D,EAAe6C,EAEfX,EADe/zD,EAAUyuC,mBAEzBulB,EAAeh0D,EAAUC,eAAetM,OACxCsgE,EAAcD,EACdh0D,EAAU8L,aACVioD,IACAE,IACApC,GAEJn+D,OAAOghE,GAAeX,GAEtBxjE,KAAKgxD,mBAAmBvhD,EAAUC,eAAgBD,EAAUG,WAAYH,EAAU8L,UAClF,IAAI5b,EAASK,KAAKL,OAGlB,GAAIwkE,EAAcT,EAAa,CACxB76B,KACHA,EAAW,IAAI/+B,MAAM45D,IACZtgE,OAAS,GAGpB,IADA,IAAIsM,EAAiBD,EAAUC,eACtBrP,EAAIihE,EAAcjhE,EAAIojE,IAAgBpjE,EAC7CwoC,EAAS12B,KAAKzC,EAAerP,GAAGm9C,aAAa79C,IAIjD,IAAIiQ,EAAaH,EAAUG,WAE3B,OADA5P,KAAK+vD,YAAcngD,EACZjQ,EAAOurC,YAAY,MACxBvrC,EAAOqrC,gBAAgBhrC,KAAKkkE,gBAC1BvkE,EAAOgoC,UAAU25B,IAEnB3hE,EAAO+sC,mBAAmBs0B,EAAUn4B,EAAUp5B,EAAUgO,sBACvD7N,EAAW2M,iBAGhBozC,EAAA1tD,UAAA24D,uBAAA,SAAuBzvC,EAA6BivC,GAIlD,IAHA,IAAItuC,EAAcX,EAAWW,YACzB04C,EAAiB14C,EAAY1oB,OAC7BqhE,EAAQ,IAAI36D,MAAqB06D,KAC5BnkE,EAAI,EAAGA,EAAImkE,IAAkBnkE,EACpCokE,EAAMpkE,GAAKL,KAAKq0D,kBACdvoC,EAAYzrB,GACZmC,EAAA6F,KAAKc,UAWT,OANAs7D,EAAMD,GAAkBxkE,KAAKq0D,kBAC3BvoC,EAAY04C,GACZpK,OAIKp6D,KAAKL,OAAOurC,YAAY,KAAMu5B,EAAOzkE,KAAK+vD,YAAYxzC,iBAG/DozC,EAAA1tD,UAAA44D,+BAAA,SAA+B1vC,EAAqCivC,GAClE,IAAI17C,EAAS1e,KAAKqH,SAASq9D,qBAAqBv5C,EAAYnrB,KAAKuf,iBACjE,IAAKb,EAAQ,OAAO1e,KAAKL,OAAOktC,oBAChC,OAAQnuB,EAAOhU,MACb,KAAKuxC,EAAAv2C,YAAY0V,MACf,IAAI4kD,EAAchgE,KAAKuf,gBAAgBtD,KAAKlM,GAAE,MAC1C6wD,EAAqBliD,EAAQE,eAAeq9B,EAAA55C,aAAaoB,YAAau8D,GAC1E,IAAKY,EAKH,OAJA5gE,KAAKsM,MACH/J,EAAAgK,eAAe4zD,qCACfh1C,EAAWA,WAAW1e,MAAeiS,EAAQrU,cAExCrK,KAAKL,OAAOktC,oBAErB,IAAI6yB,EAAU1/D,KAAKq0D,kBACjBlpC,EAAWA,WACHzM,EAAQ3P,KAAI,KAItB,OAAO/O,KAAK2/D,kBAAkBiB,GAC5Bz1C,EAAWiB,mBACVjB,EAAYu0C,GAOnB,OAJA1/D,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,qBAGrB8iB,EAAA1tD,UAAA64D,0BAAA,SAA0B3vC,EAAgCivC,GACxD,IAAIruD,EAAcof,EAAWpf,YACzBnL,EAAOmL,EAAYnL,KACnB8Q,GAAc9Q,EAAKgM,KAAKxJ,OACxBxC,EAAKgM,KACL,aAAe,IAAM5M,KAAKkwD,cAAc9sD,OAAO6N,SAAS,IACxDsO,EAAkBvf,KAAKuf,gBACvBtd,EAAY,IAAIg6C,EAAAjoC,kBAClBhU,KAAKqY,QACL3G,EACA6N,EAAgBlV,aAAe/H,EAAAu2B,gBAAkBnnB,EACjD3F,EACA,KACAkwC,EAAAt2C,eAAesK,MAEbgM,EAAOsD,EAAgBtD,KACvBrN,EAAW5O,KAAK+0D,kCAClB9yD,KAEAga,EAAKhC,wBACLgC,EACAlQ,GAEF,IAAK6C,EAAU,OAAO5O,KAAKL,OAAOktC,oBAClC7sC,KAAK+vD,YAAcnhD,EAASa,UAAUV,KAGtC,IAAI4K,EAAQ3Z,KAAKq2D,yBAAyBznD,GAC1C,OAAO+K,EAAQ,EACX3Z,KAAKL,OAAOktC,oBACZ7sC,KAAKL,OAAOgoC,UAAUhuB,IAG5Bg2C,EAAA1tD,UAAA0iE,qBAAA,WAEE,OADa3kE,KAAKL,OACJksC,aAQhB8jB,EAAA1tD,UAAA84D,4BAAA,SACE5vC,EACAivC,EACAwK,GAEA,IAAIjlE,EAASK,KAAKL,OACd4f,EAAkBvf,KAAKuf,gBAG3B,OAAQ4L,EAAWzgB,MACjB,KAAKjI,EAAAkI,SAAS0d,KACZ,IAAIjgB,EAAUpI,KAAKoI,QAInB,OAHKgyD,EAAe9d,iBAClBt8C,KAAK+vD,YAAc3nD,EAAQW,WAEtBX,EAAQkB,SACX3J,EAAOooC,UAAU,GACjBpoC,EAAOgoC,UAAU,GAEvB,KAAKllC,EAAAkI,SAAS2d,KAEZ,OADAtoB,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACjBrJ,EAAOgoC,UAAU,GAE1B,KAAKllC,EAAAkI,SAAS4d,MAEZ,OADAvoB,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACjBrJ,EAAOgoC,UAAU,GAE1B,KAAKllC,EAAAkI,SAASorB,KAEZ,IADI9Z,EAAOsD,EAAgBtD,MAClBlM,GAAE,MAET,GADI80D,EAAa5oD,EAAKwE,eAAe,QAGnC,OADAzgB,KAAK+vD,YAAc8U,EAAW91D,KACvBpP,EAAOqpC,eAAe67B,EAAWlrD,MAAOkrD,EAAW91D,KAAKwN,gBAGnE,GAAIgD,EAAgBxP,GAAGzN,EAAA6M,YAAYkM,UAAW,CAC5C,IAAI3O,EAASvJ,OAAOoc,EAAgB7S,QACpCvJ,OAAOuJ,EAAOhC,MAAQuxC,EAAAv2C,YAAY0V,OAClC,IAAIG,EAAmB7O,EAAQqC,KAC/B,OAAIwQ,EAAgBxP,GAAGzN,EAAA6M,YAAY4E,eAC5BkI,EAAKlM,GAAE,KACVkM,EAAK7R,IAAG,IAERpK,KAAK+vD,YAAcx0C,EACZ5b,EAAOupC,eAAe,EAC3BlpC,KAAKy1D,wBAA+B/oD,EAAQye,MAIlDnrB,KAAK+vD,YAAcx0C,EACZ5b,EAAOqpC,eAAe,EAAGztB,EAASgB,iBAO3C,OALAvc,KAAKsM,MACH/J,EAAAgK,eAAeu4D,+CACf35C,EAAW1e,OAEbzM,KAAK+vD,YAAc/vD,KAAKoI,QAAQW,UACzBpJ,EAAOktC,oBAEhB,KAAKpqC,EAAAkI,SAASmrB,MACZ,IAAI7Z,EAEE4oD,EADN,IADI5oD,EAAOsD,EAAgBtD,MAClBlM,GAAE,MAET,GADI80D,EAAa5oD,EAAKwE,eAAe,QAInC,GADIxC,EADkB9a,OAAO0hE,EAAW91D,KAAKutC,gBAClBr+B,KAGzB,OADAje,KAAK+vD,YAAc9xC,EAAKlP,KACjBpP,EAAOqpC,eAAe67B,EAAWlrD,MAAOsE,EAAKlP,KAAKwN,gBAI/D,GAAIgD,EAAgBxP,GAAGzN,EAAA6M,YAAYkM,UAAW,CAC5C,IAEI4C,EAFAvR,EAASvJ,OAAOoc,EAAgB7S,QAGpC,GAFAvJ,OAAOuJ,EAAOhC,MAAQuxC,EAAAv2C,YAAY0V,OAC9B6C,EAAevR,EAAQuR,KACjB,CACR,IAAI8mD,EAAY9mD,EAAKlP,KAErB,OADA/O,KAAK+vD,YAAcgV,EACZplE,EAAOqpC,eAAe,EAAG+7B,EAAUxoD,iBAQ9C,OALAvc,KAAKsM,MACH/J,EAAAgK,eAAey4D,iDACf75C,EAAW1e,OAEbzM,KAAK+vD,YAAc/vD,KAAKoI,QAAQW,UACzBpJ,EAAOktC,oBAKlB,IAAInuB,EAAS1e,KAAKqH,SAAS2G,kBACzBmd,EACAnrB,KAAK8vD,aAAevwC,GAEtB,IAAKb,EAAQ,OAAO/e,EAAOktC,oBAE3B,OAAQnuB,EAAOhU,MACb,KAAKuxC,EAAAv2C,YAAYkU,MACf,IAAIqrD,EAAoBvmD,EAAQ3P,KAEhC,GADA5L,OAAO8hE,GAAaziE,EAAA6F,KAAKc,MACbuV,EAAQ3O,GAAGzN,EAAA6M,YAAYmK,SACjC,OAAOtZ,KAAKm6D,sBAA6Bz7C,EAAQ07C,EAAgBwK,GAEnE,IAAIzpD,EAAqBuD,EAAQ/E,MAGjC,OAFAxW,OAAOgY,GAAc,GACrBnb,KAAK+vD,YAAckV,EACZjlE,KAAKL,OAAOqpC,eAAe7tB,EAAY8pD,EAAU1oD,gBAE1D,KAAK0/B,EAAAv2C,YAAY4L,OACf,IAAKtR,KAAKwzD,cAAsB90C,GAC9B,OAAO1e,KAAKL,OAAOktC,oBAErB,IAAIuC,EAAsB1wB,EAAQ3P,KAElC,OADA5L,OAAOisC,GAAc5sC,EAAA6F,KAAKc,MACbuV,EAAQ3O,GAAGzN,EAAA6M,YAAYmK,SAC3BtZ,KAAKm6D,sBAA8Bz7C,EAAQ07C,EAAgBwK,IAEpE5kE,KAAK+vD,YAAc3gB,EACZpvC,KAAKL,OAAOypC,gBAAyB1qB,EAAQrU,aAAc+kC,EAAW7yB,iBAE/E,KAAK0/B,EAAAv2C,YAAYsT,UACf,OAAK0F,EAAO3O,GAAGzN,EAAA6M,YAAY2iD,WAQ3B9xD,KAAK+vD,YAAcvtD,EAAA6F,KAAKG,IACRkW,EAAQ3O,GAAGzN,EAAA6M,YAAYmK,SAC9BtZ,KAAKL,OAAOgoC,UAAsBjpB,EAAQzF,eAE5CjZ,KAAKL,OAAOypC,gBAA4B1qB,EAAQrU,aAAY,KAXjErK,KAAKsM,MACH/J,EAAAgK,eAAe24D,+HACf/5C,EAAW1e,OAEbzM,KAAK+vD,YAAcvtD,EAAA6F,KAAKG,IACjBxI,KAAKL,OAAOktC,qBAQvB,KAAKoP,EAAAv2C,YAAYsJ,mBACf,IAAIJ,EAAW5O,KAAKqH,SAASkI,gBACRmP,EACnB,KACAa,EAAgBtD,KAAKhC,yBAEvB,IAAMrL,IAAY5O,KAAKi1D,gBAAgBrmD,GAAY,OAAOjP,EAAOktC,oBACjE,IAAIlzB,EAAQ3Z,KAAKq2D,yBAAyBznD,GAE1C,OADA5O,KAAK+vD,YAAcnhD,EAASa,UAAUV,KAC/B/O,KAAKL,OAAOgoC,UAAUhuB,GAOjC,OAJA3Z,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAENzM,KAAKL,OAAOktC,qBAGrB8iB,EAAA1tD,UAAA+4D,4BAAA,SACE7vC,EACAivC,GAEA,IAAIz6D,EAASK,KAAKL,OAIdsiB,EAAOjiB,KAAK+zD,4BAA4B5oC,EAAWA,WAAYnrB,KAAKoI,QAAQW,UAAS,GACrFgG,EAAO/O,KAAK+vD,YACZljC,EAAS7sB,KAAKqH,SAASusD,YAAYzoC,EAAW0B,QAElD,OADA7sB,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACnB6jB,EACE9d,EAAKgB,GAAE,OAAyB8c,EAAO9c,GAAE,KAC5ChB,EAAKwtC,gBAAgB99B,eAAeoO,GAClCltB,EAAO+oC,aACL35B,EAAKgB,GAAE,IACHrN,EAAAsgB,SAASM,MACT5gB,EAAAsgB,SAASK,MACbpB,EACAlT,EAAKyuC,aAAa79C,IAEpBA,EAAOgoC,UAAU,GACnBhoC,EAAOgoC,UAAU54B,EAAK0P,eAAeoO,GAAQ,GAAQ,EAAI,GAXzCltB,EAAOktC,qBAc7B8iB,EAAA1tD,UAAAg5D,yBAAA,SACE9vC,EACAivC,EACA+K,QAAA,IAAAA,OAAA,GAEA,IAAIxlE,EAASK,KAAKL,OAElB,OAAQwrB,EAAW3W,aACjB,KAAK/R,EAAAgS,YAAYygB,MACf/xB,QAAQgiE,GACR,IAAIpoB,EAAYqd,EAAe9d,eAC/B,OACES,GACAA,EAAU96C,WAAajC,KAAKqY,QAAQ3R,eAE7B1G,KAAKolE,oBACVjiE,OAAO45C,EAAU/+B,eAAe,GACPmN,EAAYL,oBACrC,EACAK,IAGJnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,qBAEhB,KAAKpqC,EAAAgS,YAAY8gB,MACf,IAAI8vC,EAAsCl6C,EAAY7pB,MAItD,OAHI6jE,IACFE,GAAcA,GAEZjL,GAAkB53D,EAAA6F,KAAKY,IAClBtJ,EAAOwoC,UAAek9B,IAE/BrlE,KAAK+vD,YAAcvtD,EAAA6F,KAAKa,IACjBvJ,EAAO0oC,UAAUg9B,IAE1B,KAAK5iE,EAAAgS,YAAYghB,QACf,IAAI6vC,EAAsCn6C,EAAY7pB,MAOtD,OANI6jE,IACFG,EAAWC,QACTl8D,QAAQ,GACRi8D,IAGIlL,EAAe1vD,MAIrB,OACE,GAAI86D,UAAUF,GAAW,OAAO3lE,EAAOgoC,UAAUoI,QAAQu1B,IACzD,MAEF,OACE,GAAIG,UAAUH,GAAW,OAAO3lE,EAAOgoC,UAAUoI,QAAQu1B,IACzD,MAEF,OACE,GAAII,WAAWJ,GAAW,OAAO3lE,EAAOgoC,UAAUoI,QAAQu1B,IAC1D,MAEF,OACE,GAAIK,WAAWL,GAAW,OAAO3lE,EAAOgoC,UAAUoI,QAAQu1B,IAC1D,MAEF,OACE,GAAIM,WAAWN,GAAW,OAAO3lE,EAAOgoC,UAAUoI,QAAQu1B,IAC1D,MAEF,OACE,GAAIO,WAAWP,GAAW,OAAO3lE,EAAOgoC,UAAUoI,QAAQu1B,IAC1D,MAEF,QACE,GAAIQ,YAAYR,GAAW,OAAO3lE,EAAOgoC,UAAUoI,QAAQu1B,IAC3D,MAEF,OACE,IAAKtlE,KAAKoI,QAAQkB,SAAU,CAC1B,GAAIs8D,WAAWN,GAAW,OAAO3lE,EAAOgoC,UAAUoI,QAAQu1B,IAC1D,MAEF,OAAO3lE,EAAOooC,UAAUgI,QAAQu1B,GAAWt1B,SAASs1B,IAEtD,OACE,IAAKtlE,KAAKoI,QAAQkB,SAAU,CAC1B,GAAIu8D,WAAWP,GAAW,OAAO3lE,EAAOgoC,UAAUoI,QAAQu1B,IAC1D,MAEF,OAAO3lE,EAAOooC,UAAUgI,QAAQu1B,GAAWt1B,SAASs1B,IAEtD,OACA,OACE,OAAO3lE,EAAOooC,UAAUgI,QAAQu1B,GAAWt1B,SAASs1B,IAEtD,QACE,GAAIS,WAAWT,GAAW,OAAO3lE,EAAOwoC,UAAU69B,WAAWV,IAC7D,MAEF,QACE,GAAIW,WAAWX,GAAW,OAAO3lE,EAAO0oC,UAAU69B,WAAWZ,IAC7D,MAEF,QACE,MAEF,QAEE,OADAniE,QAAO,GACAxD,EAAOktC,oBAMlB,OAAI+4B,WAAWN,IACbtlE,KAAK+vD,YAAcvtD,EAAA6F,KAAKG,IACjB7I,EAAOgoC,UAAUoI,QAAQu1B,KACvBO,WAAWP,IACpBtlE,KAAK+vD,YAAcvtD,EAAA6F,KAAKQ,IACjBlJ,EAAOgoC,UAAUoI,QAAQu1B,MAEhCtlE,KAAK+vD,YAAcvtD,EAAA6F,KAAKI,IACjB9I,EAAOooC,UAAUgI,QAAQu1B,GAAWt1B,SAASs1B,KAGxD,KAAK7iE,EAAAgS,YAAYC,OAEf,OADAvR,QAAQgiE,GACDnlE,KAAKmmE,qBAA8Ch7C,GAE5D,KAAK1oB,EAAAgS,YAAYkhB,OAEf,OADAxyB,QAAQgiE,GACDnlE,KAAKomE,qBAA8Cj7C,EAAYivC,GAS1E,OALAp6D,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEbzM,KAAK+vD,YAAcqK,EACZz6D,EAAOktC,qBAIhB8iB,EAAA1tD,UAAAokE,mBAAA,SAAmBC,GACjB,IAKIC,EALAluD,EAAUrY,KAAKqY,QACftR,EAAQsR,EAAQtR,MAChBI,EAAekR,EAAQlR,aAEvBR,EAAiBxD,OAAOkV,EAAQ1R,gBAIhC8oC,EAAWzvC,KAAKiwD,eACpB,GAAIxgB,EAAS/gC,IAAI43D,GACfC,EAA+B92B,EAASvuC,IAAIolE,OAGvC,CACL,IAAIljE,EAASkjE,EAAYljE,OACrBojE,EAAc7/D,EAAeuX,oBAAsB,GAAK,EACxDuoD,EAAYD,EAAsB,EAATpjE,EAEzBsjE,OAAG,EACH/vC,OAAG,EAEH5vB,GACF2/D,EAAM,IAAIvzB,WAAWhsC,EAAes/D,GACpC9vC,EAAMxvB,EACNghB,EAAAw+C,SAAS7X,EAAA8X,aAAa5mE,KAAM2G,GAAiB+/D,EAAKruD,EAAQjR,gBAE1Ds/D,EAAM,IAAIvzB,WAAWszB,GACrB9vC,EAAM,GAERxO,EAAAw+C,SAASvjE,EAAQsjE,EAAK/vC,EAAMhwB,EAAeqY,SAAS,WACpD2X,GAAO6vC,EACP,IAAK,IAAInmE,EAAI,EAAGA,EAAI+C,IAAU/C,EAC5B8nB,EAAA0+C,SAASP,EAAY9iE,WAAWnD,GAAIqmE,EAAK/vC,GAAOt2B,GAAK,IAEvDkmE,EAAgBvmE,KAAKm2D,iBAAiBuQ,GACtCj3B,EAASrlC,IAAIk8D,EAAaC,GAE5B,IAAIO,EAAeP,EAActgC,OAIjC,OAHIl/B,IAAO+/D,EAAete,QAAQse,EAAcz9D,QAAQlC,KAExDnH,KAAK+vD,YAAcppD,EAAeoI,KAC9B/O,KAAKoI,QAAQkB,SACRtJ,KAAKL,OAAOooC,UAAUgI,QAAQ+2B,GAAe92B,SAAS82B,KAE7D3jE,OAAO0iE,WAAWiB,IACX9mE,KAAKL,OAAOgoC,UAAUoI,QAAQ+2B,MAIzCnX,EAAA1tD,UAAAkkE,qBAAA,SAAqBh7C,GACnB,OAAOnrB,KAAKqmE,mBAAmBl7C,EAAW7pB,QAI5CquD,EAAA1tD,UAAA8kE,kBAAA,SAAkBC,EAAmB5wD,GACnC,IASIswD,EACA/vC,EAVAte,EAAUrY,KAAKqY,QACftR,EAAQsR,EAAQtR,MAChBI,EAAekR,EAAQlR,aAEvB/D,EAASgT,EAAOhT,OAChByM,EAAWm3D,EAAYn3D,SACvBo3D,EAAa7jE,EAASyM,EACtBq3D,EAAgBlnE,KAAKoI,QAAQW,UAAU8G,SAMvCs3D,EAAiBhkE,OAAOkV,EAAQ5R,qBAChC2gE,EAAoBD,EAAejpD,oBAAsB,GAAK,EAC9DmpD,EAAkB,GAAM,GAAKC,IAAIF,EAAmBH,EAAa,GACjElgE,GACF2/D,EAAM,IAAIvzB,WAAWhsC,EAAekgE,GACpC1wC,EAAMxvB,EACNghB,EAAAw+C,SAAS7X,EAAA8X,aAAa5mE,KAAMmnE,GAAiBT,EAAKruD,EAAQjR,gBAE1Ds/D,EAAM,IAAIvzB,WAAWk0B,GACrB1wC,EAAM,GAERxO,EAAAw+C,SAASM,EAAYP,EAAK/vC,EAAMwwC,EAAenoD,SAAS,eACxD2X,GAAOywC,EACP,IAAIpV,EAAagV,EAAYzqD,eAC7B,OAAQy1C,GACN,OACE,OAAQniD,GACN,KAAK,EACH,IAAK,IAAIxP,EAAI,EAAGA,EAAI+C,IAAU/C,EAAG,CAC/B,IAAIiB,EAAQ8U,EAAO/V,GACnB8C,OAAOT,EAAA8jB,kBAAkBllB,IAAU0wD,GACnC7uD,OAAOT,EAAAyf,gBAAgB7gB,IAAUoB,EAAA0f,aAAa+C,OAC9CgD,EAAAo/C,QAAQ7kE,EAAA0iB,iBAAiB9jB,GAAQolE,EAAK/vC,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAASt2B,EAAI,EAAGA,EAAI+C,IAAU/C,EAAG,CAC3BiB,EAAQ8U,EAAO/V,GACnB8C,OAAOT,EAAA8jB,kBAAkBllB,IAAU0wD,GACnC7uD,OAAOT,EAAAyf,gBAAgB7gB,IAAUoB,EAAA0f,aAAa+C,OAC9CgD,EAAA0+C,SAASnkE,EAAA0iB,iBAAiB9jB,GAAQolE,EAAK/vC,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAASt2B,EAAI,EAAGA,EAAI+C,IAAU/C,EAAG,CAC3BiB,EAAQ8U,EAAO/V,GACnB8C,OAAOT,EAAA8jB,kBAAkBllB,IAAU0wD,GACnC7uD,OAAOT,EAAAyf,gBAAgB7gB,IAAUoB,EAAA0f,aAAa+C,OAC9CgD,EAAAw+C,SAASjkE,EAAA0iB,iBAAiB9jB,GAAQolE,EAAK/vC,GACvCA,GAAO,EAET,MAEF,QAASxzB,QAAO,GAElB,MAEF,OACE,IAAS9C,EAAI,EAAGA,EAAI+C,IAAU/C,EAAG,CAC3BiB,EAAQ8U,EAAO/V,GACnB8C,OAAOT,EAAA8jB,kBAAkBllB,IAAU0wD,GACnC7uD,OAAOT,EAAAyf,gBAAgB7gB,IAAUoB,EAAA0f,aAAa+C,OAC9CgD,EAAAq/C,SAASn+D,QAAQ3G,EAAA+jB,oBAAoBnlB,GAAQoB,EAAAozC,qBAAqBx0C,IAASolE,EAAK/vC,GAChFA,GAAO,EAET,MAEF,OACE,IAASt2B,EAAI,EAAGA,EAAI+C,IAAU/C,EAAG,CAC3BiB,EAAQ8U,EAAO/V,GACnB8C,OAAOT,EAAA8jB,kBAAkBllB,IAAU0wD,GACnC7uD,OAAOT,EAAAyf,gBAAgB7gB,IAAUoB,EAAA0f,aAAa+C,OAC9CgD,EAAAs/C,SAAS/kE,EAAAgkB,iBAAiBplB,GAAQolE,EAAK/vC,GACvCA,GAAO,EAET,MAEF,OACE,IAASt2B,EAAI,EAAGA,EAAI+C,IAAU/C,EAAG,CAC3BiB,EAAQ8U,EAAO/V,GACnB8C,OAAOT,EAAA8jB,kBAAkBllB,IAAU0wD,GACnC7uD,OAAOT,EAAAyf,gBAAgB7gB,IAAUoB,EAAA0f,aAAa+C,OAC9CgD,EAAAu/C,SAAShlE,EAAAikB,iBAAiBrlB,GAAQolE,EAAK/vC,GACvCA,GAAO,EAET,MAEF,QAASxzB,QAAO,GAElB,IACIwkE,EADgB3nE,KAAKm2D,iBAAiBuQ,GACTzgC,OAC7Bl/B,IAAO4gE,EAAenf,QAAQmf,EAAct+D,QAAQlC,KAGxD,IAAIT,EAAiBvD,OAAOkV,EAAQ3R,gBAChCkhE,EAAgBzkE,OAAOnD,KAAKqH,SAASsH,aAAajI,GAAkBsgE,KACpEa,EAAmBD,EAAc1pD,oBAAsB,GAAK,EAC5DnX,GACF2/D,EAAM,IAAIvzB,WAAWhsC,EAAe0gE,GACpClxC,EAAMxvB,EACNghB,EAAAw+C,SAAS7X,EAAA8X,aAAa5mE,KAAM4nE,GAAgBlB,EAAKruD,EAAQjR,gBAEzDs/D,EAAM,IAAIvzB,WAAW00B,GACrBlxC,EAAM,GAER,IACImxC,EADe9nE,KAAKm2D,iBAAiBuQ,GACVzgC,OAG/B,OAFIl/B,IAAO+gE,EAActf,QAAQsf,EAAaz+D,QAAQlC,KACtDnH,KAAK+vD,YAAc6X,EAAc74D,KACZ,GAAjBm4D,GACF/+C,EAAAq/C,SAASG,EAAcjB,EAAK/vC,EAAMixC,EAAc5oD,SAAS,YACzDmJ,EAAAw+C,SAASvjE,EAAQsjE,EAAK/vC,EAAMixC,EAAc5oD,SAAS,YAC5Chf,KAAKL,OAAOooC,UAAUgI,QAAQ+3B,GAAc93B,SAAS83B,MAE5D3kE,OAAO0iE,WAAW8B,IAClBx/C,EAAAw+C,SAAS52B,QAAQ43B,GAAejB,EAAK/vC,EAAMixC,EAAc5oD,SAAS,YAClEmJ,EAAAw+C,SAASvjE,EAAQsjE,EAAK/vC,EAAMixC,EAAc5oD,SAAS,YACnD7b,OAAO0iE,WAAWiC,IACX9nE,KAAKL,OAAOgoC,UAAUoI,QAAQ+3B,MAIzCnY,EAAA1tD,UAAAmjE,oBAAA,SACE4B,EACAl7C,EACAi8C,EACApV,GAUA,IARA,IAAIhzD,EAASK,KAAKL,OAGdyD,EAAS0oB,EAAY1oB,OACrB4kE,EAAiB,IAAIl+D,MAAqB1G,GAC1C6kE,EAAiB,IAAIn+D,MAAqB1G,GAC1C8kE,EAAoBlB,EAAYzqD,eAChC4rD,GAAW,EACN9nE,EAAI,EAAGA,EAAI+C,IAAU/C,EAAG,CAC/B,IAAI4hB,EAAO6J,EAAYzrB,GACnBL,KAAKq0D,kBAA8BvoC,EAAYzrB,GAAI2mE,EAAW,KAC9DA,EAAYxpB,aAAa79C,GAC7BqoE,EAAe3nE,GAAK4hB,EAChBkmD,IACFlmD,EAAOtiB,EAAOmyC,qBAAqBk2B,EAAe3nE,IAC9CqC,EAAAyf,gBAAgBF,IAASvf,EAAA0f,aAAa+C,OACxChiB,OAAOT,EAAA8jB,kBAAkBvE,IAASimD,GAClCD,EAAe5nE,GAAK4hB,IAEhB8lD,GACF/nE,KAAKs7B,QACH/4B,EAAAgK,eAAe+nD,4DACf3B,EAAWlmD,OAGf07D,GAAW,IAMjB,GAAIA,EAAU,OAAOnoE,KAAK+mE,kBAAkBC,EAAaiB,GAGzD,IAAIvhE,EAAiBvD,OAAOnD,KAAKqY,QAAQ3R,gBACzC,IAAKA,GAAkBA,EAAegE,MAAQuxC,EAAAv2C,YAAYuI,gBAAiB,OAAOtO,EAAOktC,oBACzF,IAAI+6B,EAAgB5nE,KAAKqH,SAASsH,aAA6BjI,GAAkBsgE,IACjF,IAAKY,EAAe,OAAOjoE,EAAOktC,oBAClC,IAAIu7B,EAAYR,EAAc74D,KAG9B/O,KAAK+vD,YAAcqY,EACnB,IAAIrW,EAAS6V,EAAchpD,eAAeq9B,EAAA55C,aAAaqB,aAAa,GACpE,IAAKquD,EAKH,OAJA/xD,KAAKsM,MACH/J,EAAAgK,eAAe2zD,+CACfvN,EAAWlmD,MAAOm7D,EAAcv9D,cAE3B1K,EAAOktC,oBAEhB,IAAIw7B,EAAkBD,EAAU7rD,eAC5BgD,EAAkBvf,KAAKuf,gBACvBw5C,EAAYx5C,EAAgBpD,SAASisD,GACrC9S,EAAQ,IAAIxrD,MAAqB,EAAI1G,GACrCuW,EAAQ,EACZ27C,EAAM37C,KAAWha,EAAOmrC,eAAeiuB,EAAUp/C,MAC/C3Z,KAAKo+D,eAAej7D,OAAOykE,EAAczpD,sBACvCxe,EAAOgoC,UAAU,GACjBhoC,EAAOgoC,UAAUvkC,MAGrB,IAAS/C,EAAI,EAAGA,EAAI+C,IAAU/C,EAC5Bi1D,EAAM37C,KAAW3Z,KAAKo+D,eAAerM,GACnCpyD,EAAOqpC,eAAe+vB,EAAUp/C,MAAO0uD,GACvC1oE,EAAOgoC,UAAUtnC,GACjB2nE,EAAe3nE,KAOnB,OAJA8C,OAAOwW,EAAQ,GAAK27C,EAAMlyD,QAC1BkyD,EAAM37C,GAASha,EAAOqpC,eAAe+vB,EAAUp/C,MAAO0uD,GACtD9oD,EAAgB7C,cAAcq8C,GAC9B/4D,KAAK+vD,YAAcqY,EACZzoE,EAAOurC,YAAY,KAAMoqB,EAAO+S,IAGzC1Y,EAAA1tD,UAAAmkE,qBAAA,SAAqBj7C,EAAqCivC,GACxD,IAAIz6D,EAASK,KAAKL,OAGd28C,EAAiB8d,EAAe9d,eACpC,IAAKA,GAAkBA,EAAevsC,GAAGzN,EAAA6M,YAAYuE,UAKnD,OAJA1T,KAAKsM,MACH/J,EAAAgK,eAAeynD,mCACf7oC,EAAW1e,MAAO,WAAY2tD,EAAenpD,YAExCtR,EAAOktC,oBAIhB,IAAI4lB,EAAOnW,EAAen+B,oBAC1B,GAAIs0C,EAAM,CAGR,GAAIA,EAAKhjD,UAAUyuC,mBAKjB,OAJAl+C,KAAKsM,MACH/J,EAAAgK,eAAe+7D,sDACfn9C,EAAW1e,MAAO6vC,EAAerrC,YAE5BtR,EAAOktC,oBAEhB,GAAI4lB,EAAK1iD,GAAGzN,EAAA6M,YAAYuxC,SAKtB,OAJA1gD,KAAKsM,MACH/J,EAAAgK,eAAeg8D,mFACfp9C,EAAW1e,MAAO6vC,EAAerrC,YAE5BtR,EAAOktC,oBAEhB,GAAI4lB,EAAK1iD,GAAGzN,EAAA6M,YAAYwxC,WAKtB,OAJA3gD,KAAKsM,MACH/J,EAAAgK,eAAei8D,qFACfr9C,EAAW1e,MAAO6vC,EAAerrC,YAE5BtR,EAAOktC,oBAKlB,IAAIvf,EAAQnC,EAAWmC,MACnB+e,EAAW/e,EAAMlqB,OACjBgT,EAAS+U,EAAW/U,OACpB5G,EAAU8sC,EAAe9sC,QACzBi5D,GAAY,EACZhE,EAAQ,IAAI36D,MAAqBuiC,EAAW,GAC5C0sB,EAAY/4D,KAAKuf,gBAAgBnD,aAAapc,KAAKoI,QAAQW,WAC/D5F,OAAOkpC,GAAYj2B,EAAOhT,QAC1B,IAAK,IAAI/C,EAAI,EAAGwH,EAAIwkC,EAAUhsC,EAAIwH,IAAKxH,EAAG,CACxC,IAAImN,EAASgC,EAAUA,EAAQtO,IAAIosB,EAAMjtB,GAAGuM,MAAQ,KACpD,GAAKY,GAAUA,EAAO9C,MAAQuxC,EAAAv2C,YAAYmY,MAA1C,CAQA,IAAI9O,EAAevB,EAAQuB,KAC3B01D,EAAMpkE,EAAI,GAAKL,KAAKL,OAAOgqC,YACzB56B,EAAKc,SACL7P,KAAKL,OAAOqpC,eAAe+vB,EAAUp/C,MAAO3Z,KAAKoI,QAAQ6pD,gBACzDjyD,KAAKq0D,kBAAkBj+C,EAAO/V,GAAYmN,EAAQuB,KAAI,KACtDA,EAAKwN,eACG/O,EAAQsQ,mBAbhB9d,KAAKsM,MACH/J,EAAAgK,eAAem8D,oCACfp7C,EAAMjtB,GAAGoM,MAAO6gB,EAAMjtB,GAAGuM,KAAM0vC,EAAerrC,YAEhDw3D,GAAY,EAahB,OADAzoE,KAAK+vD,YAAczT,EAAevtC,KAAKwtC,gBACnCksB,EAAkB9oE,EAAOktC,qBAG7B43B,EAAM,GAAK9kE,EAAOmrC,eAChBiuB,EAAUp/C,MACVm1C,EAAA6Z,gBAAgB3oE,KAAMs8C,EAAgBnxB,IAIxCs5C,EAAMA,EAAMrhE,OAAS,GAAKzD,EAAOqpC,eAAe+vB,EAAUp/C,MAAO3Z,KAAKoI,QAAQ6pD,gBAEvEtyD,EAAOurC,YAAY,KAAMu5B,EAAOzkE,KAAKoI,QAAQ6pD,kBAGtDtC,EAAA1tD,UAAAi5D,qBAAA,SAAqB/vC,EAA2BivC,GAC9C,IAAIz6D,EAASK,KAAKL,OACdyI,EAAUpI,KAAKoI,QACfmX,EAAkBvf,KAAKuf,gBAGvBb,EAAS1e,KAAKqH,SAASw4D,kBACzB10C,EAAWA,WACX5L,GAEF,IAAKb,EAAQ,OAAO/e,EAAOktC,oBAC3B,GAAInuB,EAAOhU,MAAQuxC,EAAAv2C,YAAYuI,gBAK7B,OAJAjO,KAAKsM,MACH/J,EAAAgK,eAAeq8D,yEACfz9C,EAAWA,WAAW1e,OAEjBzM,KAAKL,OAAOktC,oBAErB,IAGIyP,EAqBAr6B,EAxBA/O,EAAiCwL,EACjCmqD,EAA8B,KAC9B7qD,EAAgBmN,EAAWnN,cAoB/B,KAbE6qD,GAJC7qD,GACoD,QAApDs+B,EAAiB8d,EAAe9d,iBACjCA,EAAevsC,GAAGzN,EAAA6M,YAAYC,SAEdpP,KAAKqH,SAASsH,aAC5BuE,EACAopC,EAAet+B,cACfuB,EAAgBtD,KAAKhC,yBAGPja,KAAKqH,SAAS0uD,8BAC5B7iD,EACA8K,EACAuB,EAAgBtD,KAAKhC,wBACrBkR,IAGgB,OAAOxrB,EAAOktC,oBAKlC,IAAIi8B,EAAqCD,EACrC1qD,EAAuC,KAC3C,GAEE,GADAA,EAAsB2qD,EAAqB3qD,oBAClB,YAClB2qD,EAAuBA,EAAqB7qD,MAcrD,OAVEgE,EADE9D,EACKne,KAAK2/D,kBAAkBxhD,EAAqBgN,EAAW9W,UAAW8W,EACvE/iB,EAAQW,UAAUy0C,aAAa79C,IAK1BK,KAAK+oE,aAAaF,EAAe19C,GAG1CnrB,KAAK+vD,YAAc8Y,EAAc95D,KAC1BkT,GAGT0tC,EAAA1tD,UAAAk5D,+BAAA,SACEhwC,EACAivC,GAGA,OAAOp6D,KAAKq0D,kBACVlpC,EAAWA,WACXivC,EAAc,MAWlBzK,EAAA1tD,UAAAm5D,gCAAA,SACE4N,EACA5O,EACAwK,GAEA,IAAIjlE,EAASK,KAAKL,OAEd+e,EAAS1e,KAAKqH,SAAS4hE,sBAAsBD,EAAgBhpE,KAAKuf,iBACtE,IAAKb,EAAQ,OAAO/e,EAAOktC,oBAE3B,OAAQnuB,EAAOhU,MACb,KAAKuxC,EAAAv2C,YAAY4L,OACf,IAAKtR,KAAKwzD,cAAsB90C,GAC9B,OAAO/e,EAAOktC,oBAEhB,IAAIuC,EAAsB1wB,EAAQ3P,KAElC,OADA5L,OAAOisC,GAAc5sC,EAAA6F,KAAKc,MACbuV,EAAQ3O,GAAGzN,EAAA6M,YAAYmK,SAC3BtZ,KAAKm6D,sBAA8Bz7C,EAAQ07C,EAAgBwK,IAEpE5kE,KAAK+vD,YAAc3gB,EACZzvC,EAAOypC,gBAAyB1qB,EAAQrU,aAAc+kC,EAAW7yB,iBAE1E,KAAK0/B,EAAAv2C,YAAYsT,UACf,IAAItM,EAAqBgS,EAAQhS,OAEjC,OADAvJ,OAAkB,OAAXuJ,GAAmBA,EAAOhC,MAAQuxC,EAAAv2C,YAAYqT,MAChD/Y,KAAKu0D,YAAkB7nD,IAI5B1M,KAAK+vD,YAAcvtD,EAAA6F,KAAKG,IACRkW,EAAQ3O,GAAGzN,EAAA6M,YAAYmK,SAC9B3Z,EAAOgoC,UAAsBjpB,EAAQzF,eAEvCtZ,EAAOypC,gBAA4B1qB,EAAQrU,aAAY,KAP5DrK,KAAK+vD,YAAcvtD,EAAA6F,KAAKG,IACjBxI,KAAKL,OAAOktC,qBAQvB,KAAKoP,EAAAv2C,YAAYmY,MACf,IAAIyiD,EAAiBn9D,OAAOnD,KAAKqH,SAASk5D,uBAC1Cp9D,OAAeub,EAAQZ,cAAgB,GACvC,IAAI0iD,EAAWxgE,KAAK+zD,4BAClBuM,EACAtgE,KAAKoI,QAAQW,UAAS,GAIxB,OADA/I,KAAK+vD,YAAsBrxC,EAAQ3P,KAC5BpP,EAAO2pC,WACJ5qB,EAAQ3P,KAAKc,SACb6O,EAAQ3P,KAAKgB,GAAG,GACxBywD,EACQ9hD,EAAQ3P,KAAKwN,eACbmC,EAAQZ,cAGpB,KAAKm+B,EAAAv2C,YAAY4P,SACf,OAAOtV,KAAK6hE,cAAwBnjD,EAAQsqD,GAE9C,KAAK/sB,EAAAv2C,YAAYsJ,mBAKf,OAJAhP,KAAKsM,MACH/J,EAAAgK,eAAe28D,wEACfF,EAAev8D,MAA2BiS,EAAQhN,YAE7C/R,EAAOktC,oBAOlB,OAJA7sC,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfq0D,EAAev8D,OAEV9M,EAAOktC,qBAGR8iB,EAAA1tD,UAAA4/D,cAAR,SAAsBnjD,EAAkBi0C,GACtC,IAAI1wD,EAAYyc,EAAOnJ,gBACvB,GAAItT,EAAW,CACb,IAAI2M,EAAW5O,KAAKqH,SAASkI,gBAAgBtN,EAAW,MACxD,IAAK2M,EAAU,OAAO5O,KAAKL,OAAOktC,oBAClC,IAAIp9B,EAAYb,EAASa,UACzB,IAAKzP,KAAKkiE,mBACRzyD,EACA,EACAb,EAASmB,GAAGzN,EAAA6M,YAAYkM,UACxBs3C,GAEA,OAAO3yD,KAAKL,OAAOktC,oBAErB,IAAIy1B,EAA8D,IAApD1zD,EAASkF,eAAiBmoC,EAAAt2C,eAAe4N,QACvD,GAAI3E,EAASmB,GAAGzN,EAAA6M,YAAYkM,UAAW,CACrC,IAAI3O,EAASvJ,OAAOyL,EAASlC,QAC7BvJ,OAAOuJ,EAAOhC,MAAQuxC,EAAAv2C,YAAY0V,OAClC,IAAIklD,EAAiBn9D,OAAOnD,KAAKqH,SAASk5D,uBACtCC,EAAWxgE,KAAK+zD,4BAClBuM,EACAtgE,KAAKoI,QAAQW,UAAS,QAIxB;OADA/I,KAAK+vD,YAActgD,EAAUG,WACtB5P,KAAK2/D,kBAAkB/wD,KAAc+jD,EAAY6N,EAAU8B,GAGlE,OADAtiE,KAAK+vD,YAActgD,EAAUG,WACtB5P,KAAK2/D,kBAAkB/wD,KAAc+jD,EAAY,EAAG2P,GAO7D,OAJAtiE,KAAKsM,MACH/J,EAAAgK,eAAem8D,oCACf/V,EAAWlmD,MAAkBiS,EAAQhN,WAAuBgN,EAAQhS,OAAOuE,YAEtEjR,KAAKL,OAAOktC,qBAIvB8iB,EAAA1tD,UAAAo5D,yBAAA,SAAyBlwC,EAA+BivC,GACtD,IAAIlsC,EAAS/C,EAAW+C,OACpBC,EAAShD,EAAWgD,OACpB5O,EAAkBvf,KAAKuf,gBACvBC,EAAaD,EAAgBtD,KAE7By7C,EAAW13D,KAAK23D,cAClB33D,KAAK+zD,4BAA4B5oC,EAAW8C,UAAWzrB,EAAA6F,KAAKW,KAAI,GAChEhJ,KAAK+vD,aAGP,IACG/vD,KAAKoI,QAAQmB,eACdvJ,KAAKuf,gBAAgBrQ,MAAM5M,EAAA6M,YAAYC,QAAU9M,EAAA6M,YAAYopD,iBAC7D,CAEA,IAAIC,EAAkBx4D,KAAKL,OAAOmyC,qBAAqB4lB,GACvD,GACEh1D,EAAAyf,gBAAgBq2C,IAAoB91D,EAAA0f,aAAa+C,OACf,GAAlCziB,EAAA8jB,kBAAkBgyC,GAElB,OAAO91D,EAAA0iB,iBAAiBozC,GACpBx4D,KAAK+zD,4BAA4B7lC,EAAQksC,EAAc,GACvDp6D,KAAK+zD,4BAA4B5lC,EAAQisC,EAAc,GAI3D1C,EAAW13D,KAAK23D,cACd33D,KAAK+zD,4BAA4B5oC,EAAW8C,UAAWzrB,EAAA6F,KAAKW,KAAI,GAChEhJ,KAAK+vD,aAKX,IAAIoZ,EAAa3pD,EAAWO,OAC5BR,EAAgBtD,KAAOktD,EACvB,IAAIC,EAAappE,KAAK+zD,4BAA4B7lC,EAAQksC,EAAc,GACpEiP,EAAarpE,KAAK+vD,YACtBoZ,EAAWjpD,OAEX,IAAIopD,EAAa9pD,EAAWO,OAC5BR,EAAgBtD,KAAOqtD,EACvB,IAAIC,EAAavpE,KAAK+zD,4BAA4B5lC,EAAQisC,EAAc,GACpEoP,EAAaxpE,KAAK+vD,YACtBxwC,EAAgBtD,KAAOqtD,EAAWppD,OAElCV,EAAWgC,cAAc2nD,EAAYG,GAErC,IAAIjM,EAAa76D,EAAA6F,KAAKg1C,iBAAiBgsB,EAAYG,GAAY,GAC/D,OAAKnM,GAQL+L,EAAappE,KAAKy7D,kBAChB2N,EACAC,EACAhM,EAAU,IAGVnvC,GAEFq7C,EAAavpE,KAAKy7D,kBAChB8N,EACAC,EACAnM,EAAU,IAGVlvC,GAEFnuB,KAAK+vD,YAAcsN,EACZr9D,KAAKL,OAAOgsC,SAAS+rB,EAAU0R,EAAYG,KAxBhDvpE,KAAKsM,MACH/J,EAAAgK,eAAeynD,mCACf7oC,EAAW1e,MAAO48D,EAAWp4D,WAAYu4D,EAAWv4D,YAEtDjR,KAAK+vD,YAAcqK,EACZp6D,KAAKL,OAAOktC,sBAsBvB8iB,EAAA1tD,UAAAq5D,8BAAA,SAA8BnwC,EAAoCivC,GAChE,IAAIz6D,EAASK,KAAKL,OACd4f,EAAkBvf,KAAKuf,gBAGvBkqD,EAAWzpE,KAAKq0D,kBAClBlpC,EAAWjJ,QACXk4C,GAAkB53D,EAAA6F,KAAKc,KACnB3G,EAAA6F,KAAKG,IACL4xD,EAAc,KAMpB,GAAI13D,EAAAyf,gBAAgBsnD,IAAa/mE,EAAA0f,aAAa2F,YAAa,OAAO0hD,EAElE,IAYIC,EAZA3Z,EAAc/vD,KAAK+vD,YAGnBgJ,EAA0B,KAW9B,OAVIqB,GAAkB53D,EAAA6F,KAAKc,OACzB4vD,EAAYx5C,EAAgBnD,aAAa2zC,GAAa,GACtD0Z,EAAW9pE,EAAOupC,eAChB6vB,EAAUp/C,MACV8vD,IAMIt+C,EAAWG,UACjB,KAAKrD,EAAAC,MAAM+5B,UACT,OAAQ8N,EAAYrlD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACEg/D,EAAY/pE,EAAO+oC,aACjBhmC,EAAAsgB,SAAS8xC,OACT2U,EACA9pE,EAAOgoC,UAAU,IAEnB,MAEF,OAEE,GAAI3nC,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiBt8C,KAAK+vD,YAAYzT,eAGpC,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAakD,aAC5C,CACZmkE,EAAY1pE,KAAKs/D,qBAAqBvgD,EAAUoM,EAAWjJ,QAASunD,EAAUt+C,GAC9E,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,oBAGlB,OACE,IAAIzkC,EAAUpI,KAAKoI,QACnBshE,EAAY/pE,EAAO+oC,aACjBtgC,EAAQkB,SACJ5G,EAAAsgB,SAAS06C,OACTh7D,EAAAsgB,SAAS8xC,OACb2U,EACA1Z,EAAYtS,YAAY99C,IAE1B,MAEF,OACA,OACE+pE,EAAY/pE,EAAO+oC,aACjBhmC,EAAAsgB,SAAS06C,OACT+L,EACA9pE,EAAOooC,UAAU,IAEnB,MAEF,QACE2hC,EAAY/pE,EAAO+oC,aACjBhmC,EAAAsgB,SAAS26C,OACT8L,EACA9pE,EAAOwoC,UAAU,IAEnB,MAEF,QACEuhC,EAAY/pE,EAAO+oC,aACjBhmC,EAAAsgB,SAAS46C,OACT6L,EACA9pE,EAAO0oC,UAAU,IAEnB,MAEF,QAEE,OADAllC,QAAO,GACAxD,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMg6B,YACT,OAAQ6N,EAAYrlD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACEg/D,EAAY/pE,EAAO+oC,aACjBhmC,EAAAsgB,SAAS66C,OACT4L,EACA9pE,EAAOgoC,UAAU,IAEnB,MAEF,OAEE,GAAI3nC,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAC5C,IAAIusC,EAEEv9B,EADN,GADIu9B,EAAiBt8C,KAAK+vD,YAAYzT,eAGpC,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAamD,aAC5C,CACZkkE,EAAY1pE,KAAKs/D,qBAAqBvgD,EAAUoM,EAAWjJ,QAASunD,EAAUt+C,GAC9E,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,oBAGlB,OACMzkC,EAAUpI,KAAKoI,QACnBshE,EAAY/pE,EAAO+oC,aACjBtgC,EAAQkB,SACJ5G,EAAAsgB,SAAS86C,OACTp7D,EAAAsgB,SAAS66C,OACb4L,EACA1Z,EAAYtS,YAAY99C,IAE1B,MAEF,OACA,OACE+pE,EAAY/pE,EAAO+oC,aACjBhmC,EAAAsgB,SAAS86C,OACT2L,EACA9pE,EAAOooC,UAAU,IAEnB,MAEF,QACE2hC,EAAY/pE,EAAO+oC,aACjBhmC,EAAAsgB,SAAS+6C,OACT0L,EACA9pE,EAAOwoC,UAAU,IAEnB,MAEF,QACEuhC,EAAY/pE,EAAO+oC,aACjBhmC,EAAAsgB,SAASg7C,OACTyL,EACA9pE,EAAO0oC,UAAU,IAEnB,MAEF,QAEE,OADAllC,QAAO,GACAxD,EAAOktC,oBAGlB,MAEF,QAEE,OADA1pC,QAAO,GACAxD,EAAOktC,oBAKlB,IAAKksB,EAEH,OADA/4D,KAAK+vD,YAAcvtD,EAAA6F,KAAKc,KACjBnJ,KAAKk6D,2BAA2B/uC,EAAWjJ,QAChDwnD,GACA,GAKJ,IAAIC,EAAW3pE,KAAKk6D,2BAA2B/uC,EAAWjJ,QACxDwnD,GACA,GAGF1pE,KAAK+vD,YAAcgJ,EAAUhqD,KAC7BwQ,EAAgB7C,cAAcq8C,GAC9B,IAAI/G,EAAa+G,EAAUhqD,KAAKwN,eAEhC,OAAO5c,EAAOurC,YAAY,MACxBy+B,EACAhqE,EAAOqpC,eAAe+vB,EAAUp/C,MAAOq4C,IACtCA,IAGLrC,EAAA1tD,UAAAs5D,6BAAA,SACEpwC,EACAivC,GAEA,IAEIn4C,EAFAtiB,EAASK,KAAKL,OACd29D,GAAW,EAGf,OAAQnyC,EAAWG,UACjB,KAAKrD,EAAAC,MAAMljB,KAWT,GAVAid,EAAOjiB,KAAKq0D,kBACVlpC,EAAWjJ,QACXk4C,GAAkB53D,EAAA6F,KAAKc,KACnB3G,EAAA6F,KAAKG,IACL4xD,EAAc,KAMhBp6D,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiBt8C,KAAK+vD,YAAYzT,eAGpC,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa2C,MAC5C,CACZid,EAAOjiB,KAAKs/D,qBAAqBvgD,EAAUoM,EAAWjJ,QAASD,EAAMkJ,GACrE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,oBAIhB,MAEF,KAAK5kB,EAAAC,MAAMhjB,MACT,GAAIimB,EAAWjJ,QAAQxX,MAAQjI,EAAAkI,SAAS4J,UAClB4W,EAAWjJ,QAAS1N,aAAe/R,EAAAgS,YAAYghB,SAC/CtK,EAAWjJ,QAAS1N,aAAe/R,EAAAgS,YAAY8gB,OAClE,CAEDtT,EAAOjiB,KAAKi7D,yBAA4C9vC,EAAWjJ,QAASk4C,GAAgB,GAExFp6D,KAAKoI,QAAQ4U,WAAWhd,KAAKq3D,iBAAiBp1C,EAAMkJ,EAAW1e,OACnE,MAaF,GAVAwV,EAAOjiB,KAAKq0D,kBACVlpC,EAAWjJ,QACXk4C,GAAkB53D,EAAA6F,KAAKc,KACnB3G,EAAA6F,KAAKG,IACL4xD,EAAc,KAMhBp6D,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiBt8C,KAAK+vD,YAAYzT,eAGpC,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa6C,OAC5C,CACZ+c,EAAOjiB,KAAKs/D,qBAAqBvgD,EAAUoM,EAAWjJ,QAASD,EAAMkJ,GACrE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,oBAGhB,OAAQ7sC,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS66C,OAAQl+D,EAAOgoC,UAAU,GAAI1lB,GACjE,MAEF,OACA,OACEA,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS86C,OACTp7D,EAAAsgB,SAAS66C,OACb79D,KAAK+vD,YAAYvS,aAAa79C,GAC9BsiB,GAEF,MAEF,OACA,OACEA,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS86C,OAAQn+D,EAAOooC,UAAU,GAAI9lB,GACjE,MAEF,QACEA,EAAOtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ0jD,OAAQ3nD,GAC1C,MAEF,QACEA,EAAOtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ2jD,OAAQ5nD,GAC1C,MAEF,QACE9e,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAM+5B,UAYT,GAXAqb,GAAW,EACXr7C,EAAOjiB,KAAKq0D,kBACVlpC,EAAWjJ,QACXk4C,GAAkB53D,EAAA6F,KAAKc,KACnB3G,EAAA6F,KAAKG,IACL4xD,EAAc,KAMhBp6D,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiBt8C,KAAK+vD,YAAYzT,eAGpC,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa4C,YAC5C,CACZgd,EAAOjiB,KAAKs/D,qBAAqBvgD,EAAUoM,EAAWjJ,QAASD,EAAMkJ,GACrE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,oBAGhB,OAAQ7sC,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS8xC,OAAQ7yC,EAAMjiB,KAAKL,OAAOgoC,UAAU,IACxE,MAEF,OACA,OACE1lB,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS06C,OACTh7D,EAAAsgB,SAAS8xC,OACb7yC,EACAjiB,KAAK+vD,YAAYtS,YAAY99C,IAE/B,MAEF,OACA,OACEsiB,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS06C,OAAQz7C,EAAMtiB,EAAOooC,UAAU,IACnE,MAEF,QACE9lB,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS26C,OAAQ17C,EAAMtiB,EAAOwoC,UAAU,IACnE,MAEF,QACElmB,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS46C,OAAQ37C,EAAMtiB,EAAO0oC,UAAU,IACnE,MAEF,QACEllC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMg6B,YAYT,GAXAob,GAAW,EACXr7C,EAAOjiB,KAAKq0D,kBACVlpC,EAAWjJ,QACXk4C,GAAkB53D,EAAA6F,KAAKc,KACnB3G,EAAA6F,KAAKG,IACL4xD,EAAc,KAMhBp6D,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAE5C,GADIusC,EAAiBt8C,KAAK+vD,YAAYzT,eAGpC,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa8C,YAC5C,CACZ8c,EAAOjiB,KAAKs/D,qBAAqBvgD,EAAUoM,EAAWjJ,QAASD,EAAMkJ,GACrE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,oBAGhB,OAAQ7sC,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS66C,OAAQ57C,EAAMtiB,EAAOgoC,UAAU,IACnE,MAEF,OACA,OACE1lB,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAAS86C,OACTp7D,EAAAsgB,SAAS66C,OACb57C,EACAjiB,KAAK+vD,YAAYtS,YAAY99C,IAE/B,MAEF,OACA,OACEsiB,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS86C,OAAQ77C,EAAMtiB,EAAOooC,UAAU,IACnE,MAEF,QACE9lB,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS+6C,OAAQ97C,EAAMtiB,EAAOwoC,UAAU,IACnE,MAEF,QACElmB,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASg7C,OAAQ/7C,EAAMtiB,EAAO0oC,UAAU,IACnE,MAEF,QACEllC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAMu6B,YAWT,GAVAxgC,EAAOjiB,KAAKq0D,kBACVlpC,EAAWjJ,QACXk4C,GAAkB53D,EAAA6F,KAAKc,KACnB3G,EAAA6F,KAAKG,IACL4xD,EAAc,KAMhBp6D,KAAK+vD,YAAYhgD,GAAE,KAErB,GADIusC,EAAiBt8C,KAAK+vD,YAAYzT,eAGpC,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAa+C,KAC5C,CACZ6c,EAAOjiB,KAAKs/D,qBAAqBvgD,EAAUoM,EAAWjJ,QAASD,EAAMkJ,GACrE,MAMNlJ,EAAOjiB,KAAK8pE,eAAe7nD,EAAMjiB,KAAK+vD,aACtC/vD,KAAK+vD,YAAcvtD,EAAA6F,KAAKW,KACxB,MAEF,KAAKif,EAAAC,MAAMw6B,MAaT,GAZAzgC,EAAOjiB,KAAKq0D,kBACVlpC,EAAWjJ,QACXk4C,GAAkB53D,EAAA6F,KAAKc,KACnB3G,EAAA6F,KAAKG,IACL4xD,EAAerqD,GAAE,GACfvN,EAAA6F,KAAKI,IACL2xD,EAAc,KAMlBp6D,KAAK+vD,YAAYhgD,GAAE,KAAuB,CAC5C,IAAIusC,EAEEv9B,EADN,GADIu9B,EAAiBt8C,KAAK+vD,YAAYzT,eAGpC,GADIv9B,EAAWu9B,EAAe19B,eAAeq9B,EAAA55C,aAAagD,aAC5C,CACZ4c,EAAOjiB,KAAKs/D,qBAAqBvgD,EAAUoM,EAAWjJ,QAASD,EAAMkJ,GACrE,MAOJ,OAJAnrB,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,oBAUhB,OARE5qB,EAAOjiB,KAAKy7D,kBACVx5C,EACAjiB,KAAK+vD,YAAa/vD,KAAK+vD,YAAY6O,QAAO,IAE1CzzC,EAAWjJ,SAIPliB,KAAK+vD,YAAYrlD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEuX,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASo8C,OAAQn9C,EAAMtiB,EAAOgoC,WAAW,IACpE,MAEF,OACA,OACE1lB,EAAOtiB,EAAO+oC,aACZ1oC,KAAKoI,QAAQkB,SACT5G,EAAAsgB,SAASq8C,OACT38D,EAAAsgB,SAASo8C,OACbn9C,EACAjiB,KAAK+vD,YAAYrS,eAAe/9C,IAElC,MAEF,OACA,OACEsiB,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASq8C,OAAQp9C,EAAMtiB,EAAOooC,WAAW,GAAI,IACxE,MAEF,QACE5kC,QAAO,GACP8e,EAAOtiB,EAAOktC,oBAGlB,MAEF,KAAK5kB,EAAAC,MAAM24B,OAKT,OAJA7gD,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEN9M,EAAOktC,oBAEhB,QAEE,OADA1pC,QAAO,GACAxD,EAAOktC,oBAGlB,OAAOywB,EACHt9D,KAAKk6D,2BAA2B/uC,EAAWjJ,QAASD,EAAMm4C,GAAkB53D,EAAA6F,KAAKc,MACjF8Y,GAIN0tC,EAAA1tD,UAAAy5D,uBAAA,SAAuBz5C,EAAqBlT,GAC1C,IAAIpP,EAASK,KAAKL,OACdsc,EAAOjc,KAAKuf,gBAAgBtD,KAChC,OAAQlN,EAAKrE,MACX,OACMuR,EAAK+F,YAAYC,EAAMlT,KACzBkT,EAAOjiB,KAAKoI,QAAQwB,WAAU,GAC1BjK,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ6jD,cAAe9nD,GAC1CtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS2C,OAC3BhmB,EAAO+oC,aAAahmC,EAAAsgB,SAASwC,OAC3BvD,EACAtiB,EAAOgoC,UAAU,KAEnBhoC,EAAOgoC,UAAU,MAGzB,MAEF,OACM1rB,EAAK+F,YAAYC,EAAMlT,KACzBkT,EAAOjiB,KAAKoI,QAAQwB,WAAU,GAC1BjK,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ8jD,eAAgB/nD,GAC3CtiB,EAAO+oC,aAAahmC,EAAAsgB,SAAS2C,OAC3BhmB,EAAO+oC,aAAahmC,EAAAsgB,SAASwC,OAC3BvD,EACAtiB,EAAOgoC,UAAU,KAEnBhoC,EAAOgoC,UAAU,MAGzB,MAEF,OACM1rB,EAAK+F,YAAYC,EAAMlT,KACzBkT,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASsC,OAClCrD,EACAtiB,EAAOgoC,UAAU,OAGrB,MAEF,OACM1rB,EAAK+F,YAAYC,EAAMlT,KACzBkT,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASsC,OAClCrD,EACAtiB,EAAOgoC,UAAU,SAGrB,MAEF,QACM1rB,EAAK+F,YAAYC,EAAMlT,KAEzBkT,EAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASK,MAClCpB,EACAtiB,EAAOgoC,UAAU,KAMzB,OAAO1lB,GAIT0tC,EAAA1tD,UAAA6nE,eAAA,SAAe7nD,EAAqBlT,GAClC,IAAIpP,EAASK,KAAKL,OAClB,OAAQoP,EAAKrE,MACX,OACA,OACA,OACA,OACA,QACEuX,EAAOjiB,KAAK07D,uBAAuBz5C,EAAMlT,GAG3C,OACA,OACE,OAAOpP,EAAO4oC,YAAY7lC,EAAAwjB,QAAQC,OAAQlE,GAE5C,OACA,OACE,OAAOtiB,EAAO4oC,YAAY7lC,EAAAwjB,QAAQE,OAAQnE,GAE5C,OACA,OACE,OAAOtiB,EAAO4oC,YAAyB,IAAbx5B,EAAK2W,KAAahjB,EAAAwjB,QAAQE,OAAS1jB,EAAAwjB,QAAQC,OAAQlE,GAE/E,QACE,OAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASG,MAAOlB,EAAMtiB,EAAOwoC,UAAU,IAEpE,QACE,OAAOxoC,EAAO+oC,aAAahmC,EAAAsgB,SAASI,MAAOnB,EAAMtiB,EAAO0oC,UAAU,IAEpE,QAEE,OADAllC,QAAO,GACAxD,EAAOgoC,UAAU,KAM9BgoB,EAAA1tD,UAAA01D,cAAA,SAAc11C,EAAqBlT,GACjC,IAAIpP,EAASK,KAAKL,OAClB,OAAQoP,EAAKrE,MACX,OACA,OACA,OACA,OACA,QACEuX,EAAOjiB,KAAK07D,uBAAuBz5C,EAAMlT,GAG3C,OACA,OACE,OAAOkT,EAET,OACA,OACE,OAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASM,MAAOrB,EAAMtiB,EAAOooC,UAAU,IAEpE,OACA,OACE,OAAoB,IAAbh5B,EAAK2W,KACR/lB,EAAO+oC,aAAahmC,EAAAsgB,SAASM,MAAOrB,EAAMtiB,EAAOooC,UAAU,IAC3D9lB,EAEN,QACE,OAAOtiB,EAAO+oC,aAAahmC,EAAAsgB,SAASO,MAAOtB,EAAMtiB,EAAOwoC,UAAU,IAEpE,QACE,OAAOxoC,EAAO+oC,aAAahmC,EAAAsgB,SAASQ,MAAOvB,EAAMtiB,EAAO0oC,UAAU,IAEpE,QAEE,OADAllC,QAAO,GACAxD,EAAOgoC,UAAU,KAM9BgoB,EAAA1tD,UAAA8mE,aAAA,SAAaF,EAAsBlW,WAC7BhzD,EAASK,KAAKL,OACd4f,EAAkBvf,KAAKuf,gBACvB0yC,EAAiBjyD,KAAKoI,QAAQ6pD,eAG9B8G,EAAYx5C,EAAgBnD,aAAaysD,EAAc95D,MAAM,GAC7DgrD,EAAe,IAAIjwD,MAQvB,GAPAiwD,EAAa5nD,KACXxS,EAAOmrC,eAAeiuB,EAAUp/C,MAC9Bm1C,EAAA6Z,gBAAgB3oE,KAAM6oE,EAAelW,KAKrCkW,EAAcr5D,YAChB,IAAmB,IAAAmM,EAAA7O,EAAA+7D,EAAcr5D,QAAQ4G,UAAQlJ,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAA9C,IAAIQ,EAAMN,EAAA5L,MACb,GAAIkM,EAAO9C,MAAQuxC,EAAAv2C,YAAYmY,MAAO,CACpC,IAAIqB,EAAe1R,EACfy8D,EAAY/qD,EAAMnQ,KAClBm7D,EAAkBD,EAAU1tD,eAC5B4tD,EAAmBjrD,EAAMjd,UAAU8J,YAEvC,GADA5I,QAAQ+b,EAAMhQ,MAAM5M,EAAA6M,YAAY+I,QAC5BiyD,EAAiB1wD,YACnBsgD,EAAa5nD,KAAKxS,EAAOgqC,YAAYsgC,EAAUp6D,SAC7ClQ,EAAOqpC,eAAe+vB,EAAUp/C,MAAOs4C,GACvCjyD,KAAKq0D,kBACH8V,EAAiB1wD,YACjBwwD,EAAS,KAIXC,EACAhrD,EAAMpB,mBAEH,CAEL,IAAIia,EAAoC7Y,EAAMjd,UAAU8J,YAAagsB,eACrEgiC,EAAa5nD,KAAKxS,EAAOgqC,YAAYsgC,EAAUp6D,SAC7ClQ,EAAOqpC,eAAe+vB,EAAUp/C,MAAOs4C,GACvCl6B,GAAkB,EACdp4B,EAAOqpC,eAAe,EAAIjR,EAAgBmyC,GAC1CD,EAAUzsB,aAAa79C,GACzBuqE,EACFhrD,EAAMpB,mHAchB,OANAi8C,EAAa5nD,KACXxS,EAAOqpC,eAAe+vB,EAAUp/C,MAAOs4C,IAGzC1yC,EAAgB7C,cAAcq8C,GAC9B/4D,KAAK+vD,YAAc8Y,EAAc95D,KAC1BpP,EAAOurC,YAAY,KAAM6uB,EAAc9H,IAIhDtC,EAAA1tD,UAAAwzD,wBAAA,SAAwBoT,EAAsBlW,GAE5C,IAAIhzD,EAASK,KAAKL,OACdsyD,EAAiBjyD,KAAKoI,QAAQ6pD,eAElC,OADAjyD,KAAK+vD,YAAc8Y,EAAc95D,KAC1BpP,EAAOgsC,SACE,GAAdsmB,EACItyD,EAAO+oC,aACLhmC,EAAAsgB,SAASM,MACT3jB,EAAOqpC,eAAe,EAAC,GACvBrpC,EAAOooC,UAAU,IAEnBpoC,EAAOqpC,eAAe,EAAC,GAC3BrpC,EAAOqpC,eAAe,EAAGipB,GACzBtyD,EAAOupC,eAAe,EACpBlpC,KAAK+oE,aAAaF,EAAelW,MAMvChD,EAAA1tD,UAAAo1D,iBAAA,SAAiBp1C,EAAqBxV,GACpC,IAAI8S,EAAkBvf,KAAKuf,gBACvBzX,EAAS2E,EAAM3E,OACfA,EAAOsV,eAAiB,IAAGtV,EAAOsV,eAAiBpd,KAAKL,OAAO01C,iBAAiBvtC,EAAOF,iBAC3F6E,EAAM0Q,aAAe8E,EACrB1C,EAAgBhF,eAAepI,KAAK1F,IAExCkjD,EAzyOA,CAA8BptD,EAAA4V,mBA6yO9B,SAASg8C,EACPnoD,EACAD,GAaA,GAVA0jD,EAA8B1jD,EAAYU,MAAM3E,OAAO+uB,WAEvD64B,EAA+B3jD,EAAY+C,yBAGvC/C,EAAYW,QAAUX,EAAYW,OAAOhC,MAAQjI,EAAAkI,SAASa,uBAC5DikD,EAA8B,MAC9BC,EAA+B3jD,EAAYnL,KAAK6L,MAAMwE,YAGnDjF,EAAQqF,aAAa4qC,EAAAt2C,eAAeyR,UAAzC,CAEA,IAAIiB,EAAUrM,EAAQqM,QAClB3H,EAAYvN,OAAOV,EAAAgR,cAAchR,EAAAY,cAAc+T,SAAUrL,EAAYwE,aACrE2Z,EAAOxZ,EAAU2D,UACrB,GAAI6V,GAAQA,EAAK9mB,OAAQ,CACvB,IAAIF,EAAMgnB,EAAK,GAGXhnB,EAAIwH,MAAQjI,EAAAkI,SAAS4J,SAA+BrR,EAAKsR,aAAe/R,EAAAgS,YAAYC,QACtFg7C,EAAyDxsD,EAAK5B,MAC1D4oB,EAAK9mB,QAAU,KACjBF,EAAMgnB,EAAK,IACHxf,MAAQjI,EAAAkI,SAAS4J,SAA+BrR,EAAKsR,aAAe/R,EAAAgS,YAAYC,QACtF+6C,EAA8BC,EAC9BA,EAAyDxsD,EAAK5B,MAC1D4oB,EAAK9mB,OAAS,GAChBiV,EAAQ/L,MACN/J,EAAAgK,eAAe0I,+BACfvE,EAAUjE,MAAO,IAAKyd,EAAK9mB,OAAO6N,aAItCoH,EAAQ/L,MACN/J,EAAAgK,eAAeyI,wBACf9R,EAAIuJ,SAKV4L,EAAQ/L,MACN/J,EAAAgK,eAAeyI,wBACf9R,EAAIuJ,YAIR4L,EAAQ/L,MACN/J,EAAAgK,eAAe81D,wCACf3xD,EAAUjE,MAAO,IAAK,MAl2Of/M,EAAAiwD,0FC1Pb,SAAYpjD,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,yMACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,uJACAA,IAAA,mFACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,0IACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HArHF,CAAY7M,EAAA6M,iBAAA7M,EAAA6M,oBAyHZ7M,EAAAi6B,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,+DACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,qGACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,wEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,QAAS,MAAO,sRCxPpB,IAAAswC,EAAAjqE,EAAA,IAUA87C,EAAA97C,EAAA,GASAsC,EAAAtC,EAAA,GAiBA4uD,EAAA5uD,EAAA,GAMAkqE,EAAAlqE,EAAA,IAMAmqE,EAAA,oBAAAA,IAEEtqE,KAAAuqE,OAAwB,IAAIzgE,MAC5B9J,KAAAie,KAAe,GAKjB,OAHEqsD,EAAAroE,UAAAuoE,SAAA,SAAS5pE,EAAcmO,GACrB/O,KAAKuqE,OAAOp4D,MAAOvR,KAAQA,EAAMmO,KAAQA,KAE7Cu7D,EARA,GAUAG,EAAA,WAQA,OAJE,SAAYC,EAAqBC,GAC/B3qE,KAAK4qE,cAAgBF,EACrB1qE,KAAK+O,KAAO47D,GANhB,GAAajrE,EAAA+qE,cAgBb,IAAAI,EAAA,WAME,SAAAA,EAAYjqE,EAAcmO,EAAc+7D,QAAA,IAAAA,MAAA,UAFxC9qE,KAAA+qE,mBAA6B,GAG3B/qE,KAAKY,KAAOA,EACZZ,KAAK+O,KAAOA,EACZ/O,KAAK8qE,QAAUA,EAMnB,OAHSD,EAAAG,eAAP,SAAsBF,GACpB,MAAkB,UAAXA,GAAkC,YAAXA,GAElCD,EAfA,GAiBAjc,EAAA,oBAAAA,KA+BA,OA7BSA,EAAAqc,UAAyB,IAAI/zD,KAAa,QAAS,UAMnD03C,EAAAC,cAAqC,IAAIhpD,MAC7C,KAAM,SACN,MAAO,UACP,MAAO,UACP,MAAO,UACP,QAAS,UACT,KAAM,UACN,MAAO,WACP,MAAO,WACP,MAAO,WACP,QAAS,UACT,MAAO,YACP,MAAO,YACP,OAAQ,SACR,UAAW,SACX,SAAU,WACV,SAAU,WACV,eAAgB,SAChB,kBAAmB,SACnB,cAAe,SACf,cAAe,WACf,QAAS,WAEd+oD,EA/BA,GAAalvD,EAAAkvD,YAiCb,IAAAsc,EAAA,WAYA,OALE,SAAYtqE,EAAcmO,EAAco8D,QAAA,IAAAA,MAAA,OAJxCnrE,KAAAorE,WAAqB,MACrBprE,KAAAqrE,YAAwB,YACxBrrE,KAAAsrE,YAAwB,UAGtBtrE,KAAKY,KAAOA,EACZZ,KAAK+O,KAAOA,EACZ/O,KAAKorE,WAAaD,GAVtB,GAiBAI,EAAA,WAMA,OANA,WACEvrE,KAAAwrE,QAAkB,cAClBxrE,KAAA49C,MAA4B,IAAI9zC,MAChC9J,KAAAyrE,QAA4B,IAAI3hE,MAChC9J,KAAA0rE,QAA4B,IAAI5hE,MAChC9J,KAAA2rE,OAA0B,IAAI7hE,OALhC,GAQApC,EAAA,WAWE,SAAAA,EAAY2Q,GATZrY,KAAA4rE,QAAkB,IAAIL,EAGtBvrE,KAAA6uD,cAAqCD,EAAUC,cAC/C7uD,KAAA6rE,aAA4B,IAAI30D,IAChClX,KAAA8rE,cAAwC,IAAIjmE,IAC5C7F,KAAA+rE,cAAsC,IAAIlmE,IAC1C7F,KAAAgsE,mBAAsD,IAAInmE,IAGxD7F,KAAKqY,QAAUA,EACfrY,KAAKisE,UAoVT,OA5UEvkE,EAAAzF,UAAAiqE,0BAAA,SAA0BC,EAAoB18D,WAExC28D,EAAS,IAAI9B,EACjB8B,EAAOxrE,KAAOurE,EAEd,IAAItiD,EAA8Bpa,EAAUoa,eAC5C,IAAsB,IAAAwiD,EAAAv/D,EAAA+c,GAAUyiD,EAAAD,EAAAr/D,QAAAs/D,EAAAr/D,KAAAq/D,EAAAD,EAAAr/D,OAAE,CAA7B,IAAIu/D,EAASD,EAAAhrE,MACZyN,EAAuBw9D,EAAUx9D,KACjCy9D,EAAW,IAAIzd,EAAA/B,iBAAiBhtD,KAAKqY,QAAmBtJ,GAC5Dq9D,EAAO5B,SAAS+B,EAAU3rE,KAAK6L,MAAMwE,WAAYu7D,EAAS1e,qBAC1D9tD,KAAKysE,gBAAgBD,qGAEvB,OAAOJ,GAGT1kE,EAAAzF,UAAAwqE,gBAAA,SAAgBC,WACVC,EAAUD,EAAiBve,iBAC/B,IAAmB,IAAAye,EAAA9/D,EAAA6/D,GAAOE,EAAAD,EAAA5/D,QAAA6/D,EAAA5/D,KAAA4/D,EAAAD,EAAA5/D,OAAE,CAAvB,IAAI8/D,EAAMD,EAAAvrE,MACb,GAAItB,KAAK6rE,aAAan9D,IAAIo+D,GACxB,OAGF,IAAI/e,EAAU2e,EAAiB/d,kBAAkBme,GAC7C/e,GAAW+e,GAAU/e,GACvB/tD,KAAK4rE,QAAQhuB,MAAMzrC,KAAK,IAAIs4D,EAAYqC,EAAQ/e,IAGlD,IAAI/hD,EAAU0gE,EAAiBpe,YAAYwe,GAC3C,GAAI9gE,GAAWA,EAAQtB,MAAQuxC,EAAAv2C,YAAYuI,gBAAiB,CAC1D,IAAIiF,EAAiClH,EACrChM,KAAK+sE,0BAA0B75D,GAEjClT,KAAK6rE,aAAa10D,IAAI21D,uGAO1BplE,EAAAzF,UAAA+qE,oBAAA,SAAoBhhE,GAClB,GAAIA,EAAQtB,MAAQuxC,EAAAv2C,YAAYsJ,mBAAoB,CAClD,IAAIi+D,EAA8BjhE,EAClC,OAAO+iD,EAAA/E,QAAQC,qBAAqBgjB,EAASlhE,YAAatJ,EAAAY,cAAckxB,QAE1E,OAAO,GAMT7sB,EAAAzF,UAAAirE,yBAAA,SAAyBziE,WACvB,GAAKA,EAAU8F,eAGf,IAAsB,IAAAoL,EAAA7O,EAAArC,EAAU8F,YAAUrD,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAAvC,IAAI0D,EAASxD,EAAA5L,MAChB,GAAIoP,EAAUzN,eAAiBR,EAAAY,cAAcmxB,UAAY9jB,EAAU2D,UAAW,CAE5E,GAAkC,GAA9B3D,EAAU2D,UAAUjR,OACtB,MAAM,IAAIqL,MAAM,8CAElB,IAAIM,EAAO2B,EAAU2D,UAAU,GAAG5H,MAAMwE,WACpCrQ,EAAOZ,KAAKmtE,aAAaz8D,EAAU2D,UAAU,IACjDg2D,EAAA+C,SAASC,kBAAkBzsE,GAC3BZ,KAAK4rE,QAAQD,OAAOx5D,KAAK,IAAI+4D,EAAStqE,EAAMmO,IAC5C/O,KAAKstE,kBAAkB58D,EAAU2D,UAAU,yGASjD3M,EAAAzF,UAAAkrE,aAAA,SAAalrD,GACX,IAAI/e,EAAc+e,EAAKxV,MAAMwE,WAC7B,GAAIo5D,EAAAkD,QAAQC,kBAAkBtqE,GAC5B,OAAOA,EAAIwU,UAAU,EAAGxU,EAAIE,OAAS,GAEvC,IAAIiH,EAAe0kD,EAAA/E,QAAQI,gBAAgBnoC,GACvCjW,EAA0BhM,KAAKqY,QAAQlS,eAAejF,IAAImJ,GAC9D,GAAI2B,EAAS,CACX,IAAID,EAA6EC,EAASD,YAC1F,GAAIA,GAAeA,EAAY0N,YAE7B,OADgE1N,EAAY0N,YAC7DnY,MAGnB,MAAM,IAAImN,MAAM,uBAAuBpE,IAGzC3C,EAAAzF,UAAAwrE,mBAAA,SAAmBxrD,GACjB,IAEI5X,EAFe4X,EAAKxV,MAAM3E,OAAO2O,aAEH,IADvBwL,EAAKxV,MAAMwE,WAElBjF,EAAUhM,KAAKqY,QAAQlS,eAAejF,IAAImJ,GAC9C,IAAK2B,GAAWA,EAAQtB,MAAQuxC,EAAAv2C,YAAYuI,gBAC1C,MAAM,IAAIQ,MAAM,WAAWpE,EAAY,6CAA6CA,EAAY,iBAElG,OAAO2B,GAMTtE,EAAAzF,UAAAqrE,kBAAA,SAAkBhjD,GAChB,IACIpX,EADUlT,KAAKytE,mBAAmBnjD,GAEtCtqB,KAAK+sE,0BAA0B75D,IAQjCxL,EAAAzF,UAAAyrE,4BAAA,SAA4Bx6D,EAAgCk5D,WACtD58D,EAAkC0D,EAAenH,YAAYyD,QAC7D0D,EAAehF,eAAiB6gD,EAAA/E,QAAQa,mBAAmB33C,EAAehF,gBAC5ElO,KAAK0tE,4BAA4Bx6D,EAAehF,cAAek+D,OAEjE,IAAmB,IAAAuB,EAAA7gE,EAAA0C,GAAOo+D,EAAAD,EAAA3gE,QAAA4gE,EAAA3gE,KAAA2gE,EAAAD,EAAA3gE,OAAE,CAAvB,IAAIQ,EAAMogE,EAAAtsE,MACb,GAAIkM,EAAO9C,MAAQjI,EAAAkI,SAASgI,iBAAkB,CAC5C,IAAIk7D,EAAmDrgE,EACnDsgE,EAAatgE,EAAO5M,KAAK6L,MAAMwE,WAC/B88D,EAAoCF,EAAa9+D,KACrD,GAAIg/D,IAAehf,EAAA/E,QAAQC,qBAAqB4jB,EAAcprE,EAAAY,cAAcoxB,QAAS,CACnF,IAAIi4C,EAAqC,IAAI3d,EAAA/B,iBAAiBhtD,KAAKqY,QAAmB01D,GAClFhgB,EAAU2e,EAAiB5e,oBAC/Bse,EAAO5B,SAASsD,EAAY/f,GAC5B/tD,KAAKysE,gBAAgBC,yGAM7BhlE,EAAAzF,UAAA8qE,0BAAA,SAA0B75D,GACxB,IAAKlT,KAAK6uD,cAAc3tD,IAAIgS,EAAexB,cAAgBq9C,EAAA/E,QAAQC,qBAAqB/2C,EAAenH,YAAatJ,EAAAY,cAAcoxB,QAAS,CACzI,IAAI23C,EAAS,IAAI9B,EACjB8B,EAAOxrE,KAAOsS,EAAexB,WAC7B1R,KAAK0tE,4BAA4Bx6D,EAAgBk5D,GACjDpsE,KAAKguE,YAAY5B,KAQb1kE,EAAAzF,UAAA+rE,YAAR,SAAoB5B,GACbpsE,KAAK8rE,cAAcp9D,IAAI09D,EAAOxrE,QACjCZ,KAAK4rE,QAAQH,QAAQt5D,KAAKi6D,GAC1BpsE,KAAK8rE,cAAc1hE,IAAIgiE,EAAOxrE,KAAMwrE,KAOxC1kE,EAAAzF,UAAAgsE,uBAAA,SAAuBC,eACrB,GAAIA,EAAav6D,iBAAmBo7C,EAAA/E,QAAQoB,iBAAiB8iB,GAAe,CAC1E,IAAIl8C,EAAO,IAAIloB,MACXqkE,GAAsB,EACtBC,EAAeF,EAAax8D,WAC5B28D,EAAkB,IAAMD,EAE5Bp8C,EAAK7f,KAAK,SAASk8D,EAAe,UAAUD,EAAY,eACxDp8C,EAAK7f,KAAK,KAAKk8D,EAAe,+BAC9Br8C,EAAK7f,KAAK,SAASk8D,EAAe,0BAClCr8C,EAAK7f,KAAK,OAAOk8D,EAAe,cAChCr8C,EAAK7f,KAAK,gBAAgBk8D,EAAe,yBAEzC,IAAqB,IAAAnhE,EAAAJ,EAAAohE,EAAav6D,gBAAgByC,UAAQ7H,EAAArB,EAAAF,QAAAuB,EAAAtB,KAAAsB,EAAArB,EAAAF,OAAE,CAAvD,IAAI4B,EAAQL,EAAAjN,MACf,GAAItB,KAAKgtE,oBAAoBp+D,GAAW,CACtCu/D,GAAsB,EACtBnuE,KAAKsuE,yBAA4C1/D,GACjD,IAAI7C,EAAuD6C,EAAU7C,YAEjEwiE,EAAWxiE,EAAYnL,KAAK6L,MAAMwE,WAClCu9D,EAASziE,EAAY0D,UAAUoa,WAC/Bja,EAAa7D,EAAY0D,UAAUG,WAEvCy6D,EAAA+C,SAASqB,gBAAgBF,GACzBv8C,EAAK7f,KAAK,WAAWk8D,EAAe,cAAcE,EAAQ,QAG1D,IADA,IAAIhE,EAAS,IAAIzgE,MACR6P,EAAQ,EAAGA,EAAQ60D,EAAOprE,OAAQuW,IAAS,CAClD,IAAI5K,EAAsBy/D,EAAO70D,GAC7BmC,EAAgB/M,EAAKA,KAAKtC,MAAMwE,WAChC8K,EAAgBhN,EAAKnO,KAAK6L,MAAMwE,WAEhCy7D,EAAqC,IAAI3d,EAAA/B,iBAAiBhtD,KAAKqY,QAAmBtJ,EAAKA,MAC3F,GAAI29D,EAAiBnf,UAAW,CAC9B,IAAImhB,EAAiBhC,EAAiBjf,yBAClCkhB,EAAcjC,EAAiB7e,cAC/B6gB,GAAkB3f,EAAAjF,YAAYwD,OAChCt7B,EAAK7f,KAAK,aAAa4J,EAAa,oBAAoB4yD,EAAW,QAC1DD,GAAkB3f,EAAAjF,YAAYp1C,OACvCsd,EAAK7f,KAAK,aAAa4J,EAAa,6BAEpCiW,EAAK7f,KAAK,aAAa4J,EAAa,2BAA2B4yD,EAAW,YAEvE,CACL,IAAInhB,EAAckf,EAAiBlf,YAC/BA,GAAeuB,EAAAjF,YAAYp1C,OAC7Bsd,EAAK7f,KAAK,aAAa4J,EAAa,uBAC3ByxC,GAAeuB,EAAAjF,YAAYwD,OACpCt7B,EAAK7f,KAAK,aAAa4J,EAAa,cAAc2wD,EAAiB//B,SAAQ,SAE3E3sC,KAAKstE,kBAAkBv+D,EAAKA,MAC5BijB,EAAK7f,KAAK,aAAa4J,EAAa,UAAUD,EAAa,OAC3DkW,EAAK7f,KAAK,SAAS4J,EAAa,sBAGpCwuD,EAAOp4D,KAAK4J,GAGd,IAAI6yD,EAAc,IAAI7f,EAAA/B,iBAAiBhtD,KAAKqY,QAAmBzI,GAC/D,GAAIg/D,EAAYzhB,SACdn7B,EAAK7f,KAAK,SAASk8D,EAAe,IAAIE,EAAQ,IAAIhE,EAAOr4D,KAAK,KAAI,UAC7D,CACL8f,EAAK7f,KAAK,sBAAsBk8D,EAAe,IAAIE,EAAQ,IAAIhE,EAAOr4D,KAAK,KAAI,MAC/E,IAAIy6B,EAAWiiC,EAAYrhB,UAAYqhB,EAAY/gB,cAAgB+gB,EAAYjiC,SAC3E3gC,EAAU4iE,EAAYtgB,YAAY3hB,GACtC,GAAI3gC,GAAW+iD,EAAA/E,QAAQqB,iBAAiBr/C,GAAU,CAChD,IAAI6iE,EAA+B7iE,EAASD,YAC5C,IAAKgjD,EAAA/E,QAAQe,iBAAiB8jB,GAC5B,MAAM,IAAIpgE,MAAM,SAASk+B,EAAQ,2DAA2DoiB,EAAA/E,QAAQ6B,SAASgjB,EAAYpiE,QAGzHmiE,EAAYrhB,UACdv7B,EAAK7f,KAAK,SAASk8D,EAAe,gBAAgBO,EAAY/gB,cAAa,cAE3E77B,EAAK7f,KAAK,SAASk8D,EAAe,cAAcO,EAAYjiC,SAAQ,cAGxE3a,EAAK7f,KAAK,4GAWd,GAPA6f,EAAK7f,KAAK,WAAWk8D,EAAe,2BACpCr8C,EAAK7f,KAAK,WAAWk8D,EAAe,eACpCr8C,EAAK7f,KAAK,SAEV6f,EAAK7f,KAAK,OAAOk8D,EAAe,cAChCr8C,EAAK7f,KAAK,OACVnS,KAAKktE,yBAAyBgB,EAAaniE,aACvCoiE,EAAqB,CACvB,IAAI5iB,EAAmBwD,EAAA/E,QAAQuB,iBAAiB2iB,OAEhD,IAA4B,IAAAY,EAAAhiE,EAAAy+C,GAAgBwjB,EAAAD,EAAA9hE,QAAA+hE,EAAA9hE,KAAA8hE,EAAAD,EAAA9hE,OAAE,CAAzC,IAAI89C,EAAeikB,EAAAztE,MACtB,GAAIstD,EAAUqc,UAAUv8D,IAAIo8C,GAAkB,CAE5C9qD,KAAK4rE,QAAQJ,QAAaxrE,KAAK4rE,QAAQJ,QAAO,IAAI1gB,EAClD,yGAGJ,OAAO94B,GAGX,OAAO,IAAIloB,OAGbpC,EAAAzF,UAAA+sE,iBAAA,SAAiBvkE,GACf,IAAIwkE,EAAsClgB,EAAA/E,QAAQE,oBAAoBz/C,EAAWhI,EAAAY,cAAckxB,QAC/F,IAAK06C,EACH,MAAM,IAAIxgE,MAAM,oDAAoDsgD,EAAA/E,QAAQ6B,SAASphD,EAAUgC,OAAM,KAEvG,IAAIyd,EAA4B+kD,EAAc56D,UAC9C,GAAI6V,GAAQA,EAAK9mB,OAAS,EAAG,CAC3B,IAAIF,EAAMlD,KAAKmtE,aAAajjD,EAAK,IACjC,IAAK2gD,EAAUG,eAAe9nE,GAC5B,MAAM,IAAIuL,MAAM,qCAAqCvL,EAAG,eAAe6rD,EAAA/E,QAAQ6B,SAASphD,EAAUgC,OAAM,KAE1G,OAAOvJ,EAET,MAAO,UAMTwE,EAAAzF,UAAAqsE,yBAAA,SAAyBY,GAEvB,IAAInjE,EAAmCmjE,EAAcnjE,YACjDwiE,EAAWxiE,EAAYnL,KAAK6L,MAAMwE,WAClCxB,EAAYy/D,EAAcnjE,YAAY0D,UACtC28D,EAASpsE,KAAKksE,0BAA0BqC,EAAU9+D,GACtDzP,KAAKguE,YAAY5B,GACjBpsE,KAAK4rE,QAAQF,QAAQv5D,KAAK,IAAI04D,EAAU0D,EAAUA,EAAUvuE,KAAKgvE,iBAAiBjjE,MAG5ErE,EAAAzF,UAAAgqE,QAAR,mBAOMkD,EAAuC,IAAI/E,EAAAgF,kBAAkBpvE,KAAKqY,SAClEg3D,EAA+B,IAAIjF,EAAAkF,cAActvE,KAAKqY,SACtDk3D,EAAkBJ,EAAkBK,kBACpCC,EAAcJ,EAAcG,kBAC5BE,EAAeH,EAAgBI,OAAOF,GAC1CzvE,KAAKgsE,mBAAqB5B,EAAAwF,YAAYC,YAAYH,GAElD,IAAII,EAAmB,IAAIzF,EAAA0F,aAC3B,IAAoB,IAAAp0D,EAAA7O,EAAA9M,KAAKqY,QAAQlS,eAAeiQ,UAAQlJ,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAArD,IAAIhB,EAAOkB,EAAA5L,MACd,GAAI0K,EAAQtB,MAAQuxC,EAAAv2C,YAAYuI,gBAAiB,CAC/C,IAAIigE,EAA+BliE,EACnC,IAAKhM,KAAK+rE,cAAcr9D,IAAIw/D,EAAa7jE,cAAe,CACtD,IAAI2lE,EAA+BhwE,KAAKiuE,uBAAuBC,GAC/D4B,EAAiBG,OAAOD,GACxBhwE,KAAK+rE,cAAc3hE,IAAI8jE,EAAa7jE,aAAc2B,uGASxDhM,KAAKkwE,SAAWlwE,KAAKmwE,iBAAiBL,EAAiBM,eAIjD1oE,EAAAzF,UAAAkuE,iBAAR,SAAyBn+C,GACvB,IAAI89C,EAAmB,IAAIzF,EAAA0F,SAI3B,OAHAD,EAAiB34D,IAAI,iFACrB24D,EAAiBG,OAAOj+C,GACxB89C,EAAiB34D,IAAI,KACd24D,EAAiB7+D,YAE5BvJ,EAjWA,GAAahI,EAAAgI,2RCrJb,IAAA6lE,EAAA,oBAAAA,KAwBA,OAjBWA,EAAAC,kBAAP,SAAyB/0D,GACrB,YAAW43D,GAAP53D,GAA2B,MAAPA,IAGI,IAArBA,EAAIjV,WAAW,IAAgD,IAAlCiV,EAAIjV,WAAWiV,EAAIrV,OAAS,KAO7DmqE,EAAA+C,gBAAP,SAAuB73D,GACnB,OAAI80D,EAAQC,kBAAkB/0D,GACnBA,EAAIf,UAAU,EAAGe,EAAIrV,OAAS,GAElCqV,GAEf80D,EAxBA,GAAa7tE,EAAA6tE,UA0Bb,IAAAH,EAAA,oBAAAA,KAyBA,OAjBWA,EAAAqB,gBAAP,SAAuBh2D,GACnBtV,OAAOsV,EAAIrV,OAAS,EAAG,iCACvBD,OAAOsV,EAAIrV,QAAU,GAAI,eAAeqV,EAAG,wCAQxC20D,EAAAC,kBAAP,SAAyBzsE,WACrBuC,OAAOvC,EAAKwC,OAAS,EAAG,gCACxBD,OAAOvC,EAAKwC,QAAU,GAAI,mBAAmBxC,EAAI,2CACjD,IAAkB,IAAA2vE,EAAAzjE,EAAAlM,GAAI4vE,EAAAD,EAAAvjE,QAAAwjE,EAAAvjE,KAAAujE,EAAAD,EAAAvjE,OAAE,CAAnB,IAAIyjE,EAAKD,EAAAlvE,MACV6B,OAAOiqE,EAASsD,kBAAkBnO,SAASkO,GAAQ,cAAc7vE,EAAI,kCAAkCwsE,EAASsD,uHArBzGtD,EAAAsD,kBAAoB,mCAwBvCtD,EAzBA,GAAa1tE,EAAA0tE,WA2Bb,IAAA2C,EAAA,oBAAAA,IAEY/vE,KAAAgyB,KAAsB,IAAIloB,MAC1B9J,KAAA2wE,SAAmB,KACnB3wE,KAAA4wE,SAAmB,OACnB5wE,KAAA6wE,SAAmB,WACnB7wE,KAAA8wE,QAAkB9wE,KAAK2wE,SA+CnC,OA7CIZ,EAAA9tE,UAAA8uE,OAAA,SAAOjgC,GAEH,IADA,IAAIggC,EAAU,GACPhgC,GAAS,GACZggC,GAAW9wE,KAAK6wE,SAChB//B,GAAS,EAUb,OARIA,GAAS,IACTggC,GAAW9wE,KAAK4wE,SAChB9/B,GAAS,GAETA,GAAS,IACTggC,GAAW9wE,KAAK2wE,UAEpB3wE,KAAK8wE,QAAUA,EACR9wE,MAGX+vE,EAAA9tE,UAAA+uE,SAAA,WAEI,OADAhxE,KAAK8wE,SAAW9wE,KAAK2wE,SACd3wE,MAGX+vE,EAAA9tE,UAAAkV,IAAA,SAAI85D,GAEA,OADAjxE,KAAKgyB,KAAK7f,KAAKnS,KAAK8wE,QAAUG,GACvBjxE,MAGX+vE,EAAA9tE,UAAAivE,SAAA,WAEI,OADAlxE,KAAK8wE,QAAU9wE,KAAK8wE,QAAQ32C,QAAQn6B,KAAK2wE,SAAU,IAC5C3wE,MAGX+vE,EAAA9tE,UAAAgP,SAAA,WACI,OAAOjR,KAAKgyB,KAAK9f,KAAK,OAG1B69D,EAAA9tE,UAAAguE,OAAA,SAAOj+C,eACH,IAAgB,IAAAm/C,EAAArkE,EAAAklB,GAAIo/C,EAAAD,EAAAnkE,QAAAokE,EAAAnkE,KAAAmkE,EAAAD,EAAAnkE,OAAE,CAAjB,IAAIikE,EAAGG,EAAA9vE,MACRtB,KAAKgyB,KAAK7f,KAAK8+D,uGAIvBlB,EAAA9tE,UAAAmuE,WAAA,WACI,OAAOpwE,KAAKgyB,MAEpB+9C,EArDA,GAAarwE,EAAAqwE,WAuDb,IAAAsB,EAAA,oBAAAA,KAOA,OALWA,EAAAC,OAAP,SAAcnmD,EAAkB4O,GAC5B,IAAK5O,EACD,MAAM,IAAI1c,MAAMsrB,IAG5Bs3C,EAPA,GAAa3xE,EAAA2xE,w6BCvGb,IAyDYE,EAzDZhvE,EAAApC,EAAA,GAKA87C,EAAA97C,EAAA,GAmBAsC,EAAAtC,EAAA,GAoBAqC,EAAArC,EAAA,GAMAmC,EAAAnC,EAAA,IAOA,SAAYoxE,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAA7xE,EAAA6xE,aAAA7xE,EAAA6xE,gBAQZ,IAAAjqE,EAAA,SAAAvB,GAWE,SAAAuB,EAAY+Q,GAAZ,IAAApS,EACEF,EAAAvF,KAAAR,KAAMqY,EAAQrS,cAAYhG,YAN5BiG,EAAAs6D,sBAA2C,KAE3Ct6D,EAAA85D,yBAA+C,KAK7C95D,EAAKoS,QAAUA,IA+jCnB,OA5kC8B7Q,EAAAF,EAAAvB,GAiB5BuB,EAAArF,UAAA2xD,YAAA,SACEtpC,EACArQ,EACAu3D,GAIA,QALA,IAAAv3D,MAAA,WACA,IAAAu3D,MAAaD,EAAWE,QAIpBnnD,EAAK5f,MAAQjI,EAAAkI,SAAS0pB,UAAW,CACnC,IAAI5kB,EAAYzP,KAAK0xE,iBAAgCpnD,EAAMrQ,EAAyBu3D,GACpF,OAAK/hE,EACE6a,EAAKrB,WAAaxZ,EAAUV,KAAKiuC,aAAevtC,EAAUV,KAD1C,KAKzB5L,OAAOmnB,EAAK5f,MAAQjI,EAAAkI,SAASqpB,MAC7B,IAAIi5B,EAAqB3iC,EACrB5Y,EAAau7C,EAASrsD,KAAKgM,KAC3BkD,EAAa4B,EACbvF,EAAY8gD,EAASxgD,MAAM3E,OAAO2O,aAAenU,EAAAuU,eAAiBnF,EAIhEvL,EAAiBnG,KAAKqY,QAAQlS,eAC9B6F,OAAO,EACX,IACGA,EAAU7F,EAAejF,IAAIiL,MAC7BH,EAAU7F,EAAejF,IAAI4O,IAE9B,OAAQ9D,EAAQtB,MACd,KAAKuxC,EAAAv2C,YAAYqT,KACf,OAA+B,OAA3Bk0C,EAASjvC,eAA0BivC,EAASjvC,cAAc5a,QACxDouE,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAe20D,sBACf52C,EAAK7d,MAAOT,EAAQ3B,cAGjB,MAEF7H,EAAA6F,KAAKG,IAEd,KAAKyzC,EAAAv2C,YAAYuI,gBACf,IAAIW,EAAW5O,KAAK+1D,8BACF/pD,EAChBihD,EAASjvC,cACT/D,EACAqQ,GAEF,OAAK1b,EACE0b,EAAKrB,WAAara,EAASG,KAAKiuC,aAAepuC,EAASG,KADzC,KAS5B,IAAIP,EAAQxO,KAAKqY,QAAQ/R,YAAYpF,IAAIwQ,GACzC,GAAIlD,EAAO,OAAOxO,KAAK4zD,YAAYplD,EAAMO,KAAMkL,EAAyBu3D,GAKxE,IAAIzP,EAAoB9U,EAASjvC,cACjC,GAAI+jD,EAAmB,CAGrB,IAFA,IAAI4P,EAAmB5P,EAAkB3+D,OACrC8jC,EAAa,IAAIp9B,MAAY6nE,GACxBtxE,EAAI,EAAGA,EAAIsxE,IAAoBtxE,EAAG,CACzC,IAAIuxE,EAAY5xE,KAAK4zD,YACnBmO,EAAkB1hE,GAClB4Z,EACAu3D,GAEF,IAAKI,EAAW,OAAO,KACvB1qC,EAAW7mC,GAAKuxE,EAElB,GAAID,EAAkB,CACpB,IAAIE,EAAcrvE,EAAAs7C,cAAc5W,GAC5B2qC,EAAYzuE,SACd+I,GAAa,IAAM0lE,EAAc,IACjC/hE,GAAc,IAAM+hE,EAAc,UAE/B,GAAI53D,EAAyB,CAClC,IAAI63D,EAAkB73D,EAAwB/Y,IAAI4O,GAClD,GAAIgiE,EAAiB,OAAOA,GAOhC,IAAIzrE,EAAcrG,KAAKqY,QAAQhS,YAC3B0I,OAAI,EACR,OACGA,EAAO1I,EAAYnF,IAAIiL,MACvB4C,EAAO1I,EAAYnF,IAAI4O,IAEjBf,GAIPyiE,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACfu/C,EAASrsD,KAAK6L,MAAOqD,GAGlB,OAITxI,EAAArF,UAAAyvE,iBAAA,SACEpnD,EACArQ,EACAu3D,QADA,IAAAv3D,MAAA,WACA,IAAAu3D,MAAyBD,EAAWE,QAEpC,IAAI3nD,EAAmBQ,EAAKR,iBACxBvO,EAAwB,KAC5B,GAAIuO,KACFvO,EAAWvb,KAAK4zD,YAAY9pC,EAAkB7P,EAAyBu3D,IACxD,OAAO,KAQxB,IANA,IAAIO,EAAqBznD,EAAKT,WAC1B40B,EAAgBszB,EAAmB3uE,OACnCsM,EAAiB,IAAI5F,MAAY20C,GACjCR,EAAiB,IAAIn0C,MAAc20C,GACnCP,EAAqB,EACrBC,GAAU,EACL99C,EAAI,EAAGA,EAAIo+C,IAAiBp+C,EAAG,CACtC,IAAI2xE,EAAoBD,EAAmB1xE,GAC3C,OAAQ2xE,EAAkBroD,eACxB,KAAKlnB,EAAAyxB,cAAc0rB,QACjB1B,EAAqB79C,EAAI,EACzB,MAEF,KAAKoC,EAAAyxB,cAAc+9C,KACjB9uE,OAAO9C,GAAKo+C,GACZN,GAAU,EAId,IAAIriC,EAAgB9b,KAAK4zD,YACvBzwD,OAAO6uE,EAAkBjjE,MACzBkL,EACAu3D,GAEF,IAAK11D,EAAe,OAAO,KAC3BpM,EAAerP,GAAKyb,EACpBmiC,EAAe59C,GAAK2xE,EAAkBpxE,KAAKgM,KAE7C,IACIgD,EADAsiE,EAAiB5nD,EAAK1a,WAE1B,GAAIsiE,GAEF,KADAtiE,EAAa5P,KAAK4zD,YAAYse,EAAgBj4D,EAAyBu3D,IACtD,OAAO,UAExB5hE,EAAapN,EAAA6F,KAAKc,KAEpB,IAAIsG,EAAY,IAAIjN,EAAAu7C,UAAUruC,EAAgBE,EAAY2L,GAI1D,OAHA9L,EAAUwuC,eAAiBA,EAC3BxuC,EAAUyuC,mBAAqBA,EAC/BzuC,EAAU0uC,QAAUA,EACb1uC,GAITnI,EAAArF,UAAA+/D,qBAAA,SACEhqD,EACA+pD,EACA9nD,EACA67C,EACA0b,QAFA,IAAAv3D,MAAA,WACA,IAAA67C,MAAA,WACA,IAAA0b,MAAyBD,EAAWE,QAEpC,IAAIU,EAAiBn6D,EAAe5U,OAChCgvE,EAAgBrQ,EAAoBA,EAAkB3+D,OAAS,EACnE,GAAI+uE,GAAkBC,EAgBpB,OAfIA,EACFpyE,KAAKsM,MACH/J,EAAAgK,eAAe8lE,oCACf5vE,EAAAwP,MAAMC,KACS6vD,EAAmB,GAAGt1D,MACtBs1D,EAAmBqQ,EAAgB,GAAG3lE,OAErD0lE,EAAelhE,SAAS,IAAKmhE,EAAcnhE,SAAS,KAE7C6kD,GACT91D,KAAKsM,MACH/J,EAAAgK,eAAe8lE,oCACfvc,EAAsBrpD,MAAMqnD,MAAOqe,EAAelhE,SAAS,IAAK,KAG7D,KAGT,IADA,IAAI+M,EAAgB,IAAIlU,MAAYqoE,GAC3B9xE,EAAI,EAAGA,EAAI8xE,IAAkB9xE,EAAG,CACvC,IAAI0O,EAAO/O,KAAK4zD,YACDmO,EAAmB1hE,GAChC4Z,EACAu3D,GAEF,IAAKziE,EAAM,OAAO,KAElBiP,EAAc3d,GAAK0O,EAErB,OAAOiP,GAIT1W,EAAArF,UAAA+L,kBAAA,SACEwE,EACAsmD,EACA0Y,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IACIzlE,EADApL,EAAO4R,EAAW5F,KAGtB,GAAIksD,EAAS,CAEX,OAAQA,EAAQpuD,MACd,KAAKuxC,EAAAv2C,YAAYwU,SAEf,GADAlO,EAAqB8sD,EAAS78C,KAAKwE,eAAe7f,GAIhD,OAFAZ,KAAKugE,sBAAwB,KAC7BvgE,KAAK+/D,yBAA2B,KACzB/zD,EAET8sD,EAAqBA,EAAS72D,UAAUyK,OACxC,MAEF,KAAKuvC,EAAAv2C,YAAY0V,MACf09C,EAAkBA,EAAS72D,UAAUyK,OAMzC,KAAOosD,GAAS,CACd,IAAItpD,EAAUspD,EAAQtpD,QACtB,GAAIA,IACExD,EAAUwD,EAAQtO,IAAIN,IAGxB,OAFAZ,KAAKugE,sBAAwB,KAC7BvgE,KAAK+/D,yBAA2B,KACzB/zD,EAGX8sD,EAAUA,EAAQpsD,QAKtB,IAAIvG,EAAiBnG,KAAKqY,QAAQlS,eAClC,OAAI6F,EAAU7F,EAAejF,IAAIsR,EAAW/F,MAAM3E,OAAO2O,aAAenU,EAAAuU,eAAiBjW,KACvFZ,KAAKugE,sBAAwB,KAC7BvgE,KAAK+/D,yBAA2B,KACzB/zD,IAILA,EAAU7F,EAAejF,IAAIN,KAC/BZ,KAAKugE,sBAAwB,KAC7BvgE,KAAK+/D,yBAA2B,KACzB/zD,IAGLwlE,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAemB,mBACf8E,EAAW/F,MAAO7L,GAGf,OAIT0G,EAAArF,UAAAgnE,sBAAA,SACED,EACAsJ,EACAd,QAAA,IAAAA,MAAyBD,EAAWE,QAGpC,IAAIc,EAAmBvJ,EAAe79C,WAClCzM,EAAS1e,KAAK6/D,kBAAkB0S,EAAkBD,EAAoBd,GAC1E,IAAK9yD,EAAQ,OAAO,KAGpB,IAAI8zD,EAAexJ,EAAehnE,SAAS4K,KAG3C,OAAQ8R,EAAOhU,MACb,KAAKuxC,EAAAv2C,YAAY4L,OACjB,KAAK2qC,EAAAv2C,YAAYkU,MACjB,KAAKqiC,EAAAv2C,YAAYmY,MACf,IAAI9O,EAA6B2P,EAAQ3P,KAGzC,GAFA5L,OAAO4L,GAAQvM,EAAA6F,KAAKc,QAChBmzC,EAAiBvtC,EAAKutC,gBAMxB,OAJAt8C,KAAKsM,MACH/J,EAAAgK,eAAem8D,oCACfM,EAAehnE,SAASyK,MAAO+lE,EAAoC9zD,EAAQ3P,KAAKkC,YAE3E,KAETyN,EAAS49B,EACT,MAEF,KAAKL,EAAAv2C,YAAY4P,SACf,IAOIgnC,EAPAz7C,EAASb,KAAKuP,gBAChBpM,OAAkBub,EAAQnJ,iBAC1B,KACA,KACAi8D,GAEF,IAAK3wE,EAAQ,OAAO,KAEpB,KADIy7C,EAAiBz7C,EAAO4O,UAAUG,WAAW0sC,gBAM/C,OAJAt8C,KAAKsM,MACH/J,EAAAgK,eAAem8D,oCACfM,EAAehnE,SAASyK,MAAO+lE,EAAc3xE,EAAO4O,UAAUG,WAAWqB,YAEpE,KAETyN,EAAS49B,EACT,MAEF,KAAKL,EAAAv2C,YAAY0V,MACf,IAAIgR,EAAoBpsB,KAAK+/D,yBAC7B,GAAI3zC,EAAmB,CACrB,IAAIw0C,EAAqBliD,EAAQE,eAAeq9B,EAAA55C,aAAaoB,aAC7D,IAAKm9D,EAKH,OAJA5gE,KAAKsM,MACH/J,EAAAgK,eAAe4zD,qCACf/zC,EAAkB3f,MAAeiS,EAAQrU,cAEpC,KAET,IAAIuF,EAAagxD,EAAWnxD,UAAUG,WACtC,KAAM8O,EAAS9O,EAAW0sC,gBAKxB,OAJAt8C,KAAKsM,MACH/J,EAAAgK,eAAem8D,oCACfM,EAAehnE,SAASyK,MAAO+lE,EAAc5iE,EAAWqB,YAEnD,MAQf,OAAQyN,EAAOhU,MACb,KAAKuxC,EAAAv2C,YAAYuI,gBACjB,KAAKguC,EAAAv2C,YAAY0V,MACf,OAAG,CACD,IACI5N,OAAM,EACV,IAFIgC,EAAUkP,EAAOlP,WAELhC,EAASgC,EAAQtO,IAAIsxE,IAGnC,OAFAxyE,KAAKugE,sBAAwBgS,EAC7BvyE,KAAK+/D,yBAA2B,KACzBvyD,EAGT,GAAIkR,EAAOhU,MAAQuxC,EAAAv2C,YAAYuI,gBAAiB,CAC9C,IAAqByQ,EAAQxQ,cAG3B,MAFAwQ,EAA0CA,EAAQxQ,kBAK/C,IAAIwQ,EAAOhU,MAAQuxC,EAAAv2C,YAAY0V,MAOpC,MANA,IAAYsD,EAAQT,KAGlB,MAFAS,EAAwBA,EAAQT,MAQtC,MAEF,QACE,IAAIzO,EACJ,GADIA,EAAUkP,EAAOlP,QAGnB,GADIhC,EAASgC,EAAQtO,IAAIsxE,GAIvB,OAFAxyE,KAAKugE,sBAAwBgS,EAC7BvyE,KAAK+/D,yBAA2B,KACzBvyD,EAUf,OAJAxN,KAAKsM,MACH/J,EAAAgK,eAAem8D,oCACfM,EAAehnE,SAASyK,MAAO+lE,EAAc9zD,EAAOrU,cAE/C,MAGT/C,EAAArF,UAAAyiE,qBAAA,SACE+N,EACAH,EACAd,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAIc,EAAmBE,EAActnD,WACjCzM,EAAS1e,KAAK6/D,kBAAkB0S,EAAkBD,EAAoBd,GAC1E,IAAK9yD,EAAQ,OAAO,KACpB,OAAQA,EAAOhU,MACb,KAAKuxC,EAAAv2C,YAAY4L,OACjB,KAAK2qC,EAAAv2C,YAAYkU,MACjB,KAAKqiC,EAAAv2C,YAAYmY,MAEf,GAAIa,EAD6BA,EAAQ3P,KACvButC,eAGhB,OAFAt8C,KAAKugE,sBAAwBgS,EAC7BvyE,KAAK+/D,yBAA2B0S,EAAcrmD,kBACvC1N,EAET,MAEF,KAAKu9B,EAAAv2C,YAAY0V,MACf,IAAIwlD,EAAqBliD,EAAQE,eAAeq9B,EAAA55C,aAAaoB,aAC7D,IAAKm9D,EAOH,OANI4Q,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAe4zD,qCACfsS,EAAchmE,MAAeiS,EAAQrU,cAGlC,KAGT,GAAIqU,EADakiD,EAAWnxD,UAAUG,WACd0sC,eAGtB,OAFAt8C,KAAKugE,sBAAwBgS,EAC7BvyE,KAAK+/D,yBAA2B0S,EAAcrmD,kBACvC1N,EAWb,OANI8yD,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACf49D,EAAiB9lE,OAGd,MAGTnF,EAAArF,UAAA49D,kBAAA,SACE10C,EACAmnD,EACAd,GAEA,SAFA,IAAAA,MAAyBD,EAAWE,QAE7BtmD,EAAWzgB,MAAQjI,EAAAkI,SAASke,eACjCsC,EAAuCA,EAAYA,WAErD,OAAQA,EAAWzgB,MACjB,KAAKjI,EAAAkI,SAASyqB,UACZ,IAAIrmB,EAAO/O,KAAK4zD,YACQzoC,EAAYnD,OAClCsqD,EAAmBr2D,KAAKhC,wBACxBu3D,GAEF,GAAIziE,EAEF,GADIguC,EAAYhuC,EAAKutC,eAInB,OAFAt8C,KAAKugE,sBAAwB,KAC7BvgE,KAAK+/D,yBAA2B,KACzBhjB,EAGX,OAAO,KAET,KAAKt6C,EAAAkI,SAAS0qB,OACZ,MAAM,IAAI5mB,MAAM,mBAElB,KAAKhM,EAAAkI,SAASorB,KACZ,GAAIu8C,EAAmBr2D,KAAKlM,GAAE,MAE5B,GADI2iE,EAAgBJ,EAAmBr2D,KAAKwE,eAAe,QAIzD,OAFAzgB,KAAKugE,sBAAwB,KAC7BvgE,KAAK+/D,yBAA2B,KACzB2S,EAIX,OADIhmE,EAAS4lE,EAAmB5lE,SAE9B1M,KAAKugE,sBAAwB,KAC7BvgE,KAAK+/D,yBAA2B,KACzBrzD,IAEL8kE,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAeu4D,+CACf35C,EAAW1e,OAGR,MAET,KAAKhK,EAAAkI,SAASmrB,MAEV,IAAI48C,EAOFhmE,EARJ,GAAI4lE,EAAmBr2D,KAAKlM,GAAE,MAE5B,GADI2iE,EAAgBJ,EAAmBr2D,KAAKwE,eAAe,SAIzD,OAFAzgB,KAAKugE,sBAAwB,KAC7BvgE,KAAK+/D,yBAA2B,KACzB2S,EAIX,OADIhmE,EAAS4lE,EAAmB5lE,SAClBA,EAAOhC,MAAQuxC,EAAAv2C,YAAY0V,QAAU1O,EAAiBA,EAAQuR,OAC1Eje,KAAKugE,sBAAwB,KAC7BvgE,KAAK+/D,yBAA2B,KACzBrzD,IAEL8kE,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAey4D,iDACf75C,EAAW1e,OAGR,MAET,KAAKhK,EAAAkI,SAAS8d,WACZ,OAAOzoB,KAAKgO,kBAAwCmd,EAAYmnD,EAAoBd,GAEtF,KAAK/uE,EAAAkI,SAAS4J,QACZ,OAA4B4W,EAAY3W,aACtC,KAAK/R,EAAAgS,YAAYC,OAGf,OAFA1U,KAAKugE,sBAAwBp1C,EAC7BnrB,KAAK+/D,yBAA2B,KACzB//D,KAAKqY,QAAQ1R,eAIxB,MAEF,KAAKlE,EAAAkI,SAASie,eACZ,OAAO5oB,KAAKipE,sBACgB99C,EAC1BmnD,EACAd,GAGJ,KAAK/uE,EAAAkI,SAASge,cACZ,OAAO3oB,KAAK0kE,qBACev5C,EACzBmnD,EACAd,GAGJ,KAAK/uE,EAAAkI,SAAS+d,KACZ,IAAI6pD,EAAoCpnD,EAAYA,WAChDzM,EAAS1e,KAAK6/D,kBAAkB0S,EAAkBD,EAAoBd,GAC1E,IAAK9yD,EAAQ,OAAO,KACpB,GAAIA,EAAOhU,MAAQuxC,EAAAv2C,YAAYsJ,mBAAoB,CACjD,IAAIJ,EAAW5O,KAAKg1D,iCACCt2C,EACFyM,EAAYnN,cAC7Bs0D,EAAmBr2D,KAAKhC,wBACxBkR,EACAqmD,GAEF,IAAK5iE,EAAU,OAAO,KACtB,IACImuC,EADAntC,EAAahB,EAASa,UAAUG,WAEpC,GADImtC,EAAYntC,EAAW0sC,eAIzB,OAAOS,EAEP,IAAIttC,EAAYG,EAAWD,mBAC3B,GAAIF,EAAW,CACb,IAAIkjE,EAAiBljE,EAAUuuC,qBAO/B,OANK20B,IACHA,EAAiB,IAAI12B,EAAA1+B,eAAevd,KAAKqY,QAAS5I,GAClDA,EAAUuuC,qBAAuB20B,GAI5BA,EASX,OANInB,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAeq1D,uGACf2Q,EAAiB9lE,MAAOiS,EAAOrU,cAG5B,MAWb,OANImnE,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAGR,MAITnF,EAAArF,UAAAsN,gBAAA,SACEtN,EACA+b,EACA/D,EACAu3D,gBADA,IAAAv3D,MAAA,WACA,IAAAu3D,MAAyBD,EAAWE,QAEpC,IAAII,EAAc7zD,EAAgBxb,EAAAs7C,cAAc9/B,GAAiB,GAC7DpP,EAAW3M,EAAU6X,UAAU5Y,IAAI2wE,GACvC,GAAIjjE,EAAU,OAAOA,EAErB,IAAI7C,EAAc9J,EAAU8J,YACxBu3D,EAAarhE,EAAU8N,GAAGzN,EAAA6M,YAAYkM,UACtCnI,EAAiBjR,EAAUiR,eAG3BsI,EAAyBvB,EAE7B,GADAA,EAA0B,IAAIpU,IAC1B2V,MACF,IAA2C,IAAAC,EAAA3O,EAAA0O,GAAsBE,EAAAD,EAAAzO,QAAA0O,EAAAzO,KAAAyO,EAAAD,EAAAzO,OAAE,CAA1D,IAAA2O,EAAAxO,EAAAuO,EAAApa,MAAA,GAACsa,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GACvB1B,EAAwB7P,IACtBwR,EACAC,qGAMN,IAAI9B,EAAqB9X,EAAU8X,mBACnC,GAAIA,EAAoB,CACtB5W,OAAOlB,EAAU8N,GAAGzN,EAAA6M,YAAYkM,WAChC,IACIu3D,EADmBzvE,OAAO+P,GAAgBnH,YACHiM,eACvC66D,EAAyBD,EAAoBxvE,OACjDD,OAAO0vE,GAA0B94D,EAAmB3W,QACpD,IAAK,IAAI/C,EAAI,EAAGA,EAAIwyE,IAA0BxyE,EAC5C4Z,EAAwB7P,IACtBwoE,EAAoBvyE,GAAGO,KAAKgM,KAC5BmN,EAAmB1Z,SAIvB8C,QAAQ4W,GAIV,IAEI+4D,EAFAC,EAAgBhnE,EAAY0D,UAC5BujE,EAAyBjnE,EAAYiM,eAEzC,GAAIgG,IAAkB80D,EAA2B90D,EAAc5a,QAAS,CACtED,OAAO6vE,GAA0BF,GAA4BE,EAAuB5vE,QACpF,IAAS/C,EAAI,EAAGA,EAAIyyE,IAA4BzyE,EAC9C4Z,EAAwB7P,IACA4oE,EAAwB3yE,GAAGO,KAAKgM,KACtDoR,EAAc3d,SAIlB8C,QAAQ6vE,GAA2D,GAAjCA,EAAuB5vE,QAI3D,IAAIylE,EAA8B,KAC9BttD,EAAwB,KAC5B,GAAI+nD,EAAY,CAOd,KANAuF,EAAgB7oE,KAAK2O,aACnBxL,OAAO+P,GACP6G,EACAE,EACAu3D,IAEkB,OAAO,KAC3Bj2D,EAAWstD,EAAc95D,KACzBkL,EAAwB7P,IAAI,OAAQmR,GAItC,IAiBI3L,EAjBAqjE,EAAsBF,EAAclpD,WACpCqpD,EAA0BD,EAAoB7vE,OAC9CsM,EAAiB,IAAI5F,MAAYopE,GACjCj1B,EAAiB,IAAIn0C,MAAcopE,GACnCh1B,EAAqB,EACzB,IAAS79C,EAAI,EAAGA,EAAI6yE,IAA2B7yE,EAAG,CAChD,IAAI8yE,EAAuBF,EAAoB5yE,GAC3C8yE,EAAqBxpD,eAAiBlnB,EAAAyxB,cAAc0rB,UACtD1B,EAAqB79C,EAAI,GAE3B,IAAI4sD,EAAW9pD,OAAOgwE,EAAqBpkE,MACvC+M,EAAgB9b,KAAK4zD,YAAY3G,EAAUhzC,EAAyBu3D,GACxE,IAAK11D,EAAe,OAAO,KAC3BpM,EAAerP,GAAKyb,EACpBmiC,EAAe59C,GAAK8yE,EAAqBvyE,KAAKgM,KAIhD,GAAI3K,EAAU8N,GAAGzN,EAAA6M,YAAY4D,KAC3BnD,EAAapN,EAAA6F,KAAKc,UACb,GAAIlH,EAAU8N,GAAGzN,EAAA6M,YAAY4E,aAClCnE,EAAazM,OAAO0lE,GAAe95D,SAC9B,CACDk+C,EAAW9pD,OAAO4vE,EAAcnjE,YAApC,IACIb,EAAO/O,KAAK4zD,YAAY3G,EAAUhzC,EAAyBu3D,GAC/D,IAAKziE,EAAM,OAAO,KAClBa,EAAab,EAGf,IAAIU,EAAY,IAAIjN,EAAAu7C,UAAUruC,EAAgBE,EAAY2L,GAC1D9L,EAAUwuC,eAAiBA,EAC3BxuC,EAAUyuC,mBAAqBA,EAE/B,IAAI7zC,EAAepI,EAAUoI,aAa7B,OAZIwnE,EAAYzuE,SAAQiH,GAAgB,IAAMwnE,EAAc,KAC5DjjE,EAAW,IAAIqtC,EAAAjiC,SACb/X,EACAoI,EACAoF,EACAo5D,GAEI31D,EACJ+G,GAEFhY,EAAU6X,UAAU1P,IAAIynE,EAAajjE,GACrC5O,KAAKqY,QAAQjS,gBAAgBgE,IAAIC,EAAcuE,GACxCA,GAITtH,EAAArF,UAAAmxE,yBAAA,SACEnxE,EACA+b,EACAwzD,QAAA,IAAAA,MAAyBD,EAAWE,QAEpCtuE,OAAOlB,EAAU8N,GAAGzN,EAAA6M,YAAYkM,WAChC,IAAInI,EAAiB/P,OAAOlB,EAAUiR,gBAEtC,IAAM8K,IAAiBA,EAAc5a,OAAS,OAAOnB,EAErD,IAAIyP,EAAazP,EAAUyP,WACvB2hE,EAAa7wE,EAAAs7C,cAAc9/B,GAC3Bs1D,EAAmB,IAAIr3B,EAAAjoC,kBACzBhU,KAAKqY,QACL3G,EACAwB,EAAe7I,aAAe,IAAMgpE,EAAa,IAAM/wE,EAAA2T,mBAAqBvE,EAC5EzP,EAAU8J,YACVmH,EACAjR,EAAU6R,gBAKZ,OAHAw/D,EAAiBh7D,MAAQrW,EAAUqW,MACnCg7D,EAAiBv+D,aAAe9S,EAAU8S,aAC1Cu+D,EAAiBv5D,mBAAqBiE,EAC/Bs1D,GAIThsE,EAAArF,UAAA+yD,iCAAA,SACE/yD,EACA8/D,EACA9nD,EACA04C,EACA6e,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAI9P,EAAuC,KAC3C,OAAI1/D,EAAU8N,GAAGzN,EAAA6M,YAAYC,WAC3BjM,OAA4B,MAArB4+D,GAAyD,GAA5BA,EAAkB3+D,QACtDu+D,EAAwB3hE,KAAKgiE,qBAC3B7+D,OAAOlB,EAAU8J,YAAYiM,gBAC7B+pD,EACA9nD,EACA04C,EACA6e,IAIGxxE,KAAKuP,gBACVtN,EACA0/D,EACA1nD,EACAu3D,GANmC,MAWvClqE,EAAArF,UAAA0M,aAAA,SACE1M,EACA+b,EACA/D,EACAu3D,4BADA,IAAAv3D,MAAA,WACA,IAAAu3D,MAAyBD,EAAWE,QAEpC,IAAII,EAAc7zD,EAAgBxb,EAAAs7C,cAAc9/B,GAAiB,GAG7DpP,EAAW3M,EAAU6X,UAAU5Y,IAAI2wE,GACvC,GAAIjjE,EAAU,OAAOA,EAGrB,IAAI4M,EAAyBvB,EAE7B,GADAA,EAA0B,IAAIpU,IAC1B2V,MACF,IAA2C,IAAA8C,EAAAxR,EAAA0O,GAAsB+C,EAAAD,EAAAtR,QAAAuR,EAAAtR,KAAAsR,EAAAD,EAAAtR,OAAE,CAA1D,IAAA+/C,EAAA5/C,EAAAoR,EAAAjd,MAAA,GAACsa,EAAAmxC,EAAA,GAAelxC,EAAAkxC,EAAA,GACvB9yC,EAAwB7P,IAAIwR,EAAeC,qGAM/C,IAAI9P,EAAc9J,EAAU8J,YAC5B,GAAIiS,EAAe,CACjB,IAAIhG,EAAiBjM,EAAYiM,eAC7Bu7D,EAAwBv7D,EAAe5U,OACvCowE,EAAsBx1D,EAAc5a,OACxCD,OAAOqwE,GAAuBD,GAC9B,IAAK,IAAIlzE,EAAI,EAAGA,EAAImzE,IAAuBnzE,EACzC4Z,EAAwB7P,IAAI4N,EAAe3X,GAAGO,KAAKgM,KAAMoR,EAAc3d,SAGzE8C,OAA4C,GAArC4I,EAAYiM,eAAe5U,QAIpC,IAAIqwE,EAA0B,KAC9B,GAAI1nE,EAAY+B,YAAa,CAC3B,IAAI4lE,EAAgB1zE,KAAK4zD,YACvB7nD,EAAY+B,YACZmM,EACAu3D,GAEF,IAAKkC,EAAe,OAAO,KAC3B,KAAMD,EAAYC,EAAcp3B,gBAO9B,OANIk1B,GAAcD,EAAWE,QAC3BzxE,KAAKqY,QAAQ/L,MACX/J,EAAAgK,eAAe4B,sCACfpC,EAAY+B,YAAYrB,OAGrB,KAET,GAAIgnE,EAAUpiE,aAAa4qC,EAAAt2C,eAAeiM,QAOxC,OANI4/D,GAAcD,EAAWE,QAC3BzxE,KAAKqY,QAAQ/L,MACX/J,EAAAgK,eAAeonE,yCACf5nE,EAAY+B,YAAYrB,MAAOgnE,EAAUppE,cAGtC,KAET,GAAIopE,EAAUpiE,aAAa4qC,EAAAt2C,eAAekM,YAAc5P,EAAUoP,aAAa4qC,EAAAt2C,eAAekM,WAO5F,OANI2/D,GAAcD,EAAWE,QAC3BzxE,KAAKqY,QAAQ/L,MACX/J,EAAAgK,eAAeqnE,+DACfnxE,EAAAwP,MAAMC,KAAKnG,EAAYnL,KAAK6L,MAAOV,EAAY+B,YAAYrB,QAGxD,KAKX,IAAIiF,EAAazP,EAAUyP,WACvBrH,EAAepI,EAAUoI,aACzBwnE,EAAYzuE,SACdsO,GAAc,IAAMmgE,EAAc,IAClCxnE,GAAgB,IAAMwnE,EAAc,MAEtCjjE,EAAW,IAAIqtC,EAAAl+B,MAAM9b,EAAWyP,EAAYrH,EAAc2T,EAAey1D,IAChEx5D,wBAA0BA,EACnChY,EAAU6X,UAAU1P,IAAIynE,EAAajjE,GACrC5O,KAAKqY,QAAQjS,gBAAgBgE,IAAIC,EAAcuE,GAG/C,IAAIkP,EAAoB,EACxB,GAAI21D,EAAW,CACb,GAAIA,EAAUjkE,QAAS,CAChBZ,EAASY,UAASZ,EAASY,QAAU,IAAI3J,SAC9C,IAA4B,IAAA2rD,EAAA1kD,EAAA2mE,EAAUjkE,QAAQ4G,UAAQq7C,EAAAD,EAAAxkD,QAAAykD,EAAAxkD,KAAAwkD,EAAAD,EAAAxkD,OAAE,CAAnD,IAAI6mE,EAAepiB,EAAAnwD,MACtBsN,EAASY,QAAQpF,IAAIypE,EAAgBniE,WAAYmiE,sGAGrD/1D,EAAe21D,EAAUv1D,oBAI3B,GAAIjc,EAAUgS,qBAAsB,CAClC,IAAI6/D,EAAqB9zE,KAAKozE,yBAC5BnxE,EAAUgS,qBACV+J,EACAwzD,GAEF,IAAKsC,EAAoB,OAAO,KAChCllE,EAASuP,oBAAsBne,KAAKuP,gBAAgBukE,EAAoB,KAAM,KAAMtC,GAItF,GAAIvvE,EAAU0R,oBACZ,IAAmB,IAAA+9C,EAAA5kD,EAAA7K,EAAU0R,gBAAgByC,UAAQg8C,EAAAV,EAAA1kD,QAAAolD,EAAAnlD,KAAAmlD,EAAAV,EAAA1kD,OAAE,CAAlD,IAAIQ,EAAM4kD,EAAA9wD,MACb,OAAQkM,EAAO9C,MAGb,KAAKuxC,EAAAv2C,YAAYiY,gBACV/O,EAASY,UAASZ,EAASY,QAAU,IAAI3J,KAC9C,IAAIskE,EAAoC38D,EAAQzB,YAC5Ck+D,EAAyB,KAE7B,GAAKE,EAAiBp7D,KAiBpBk7D,EAAYjqE,KAAK4zD,YACfuW,EAAiBp7D,KACjBH,EAASqL,wBACTu3D,OApBwB,CAC1B,GAAkB,OAAdiC,GAA4C,OAAtBA,EAAUjkE,QAAkB,CACpD,IAAIukE,EAAYN,EAAUjkE,QAAQtO,IAAqBsM,EAAQkE,YAC3DqiE,IAAcA,EAAUhkE,GAAGzN,EAAA6M,YAAYuxC,WACzCv9C,OAAO4wE,EAAUrpE,MAAQuxC,EAAAv2C,YAAYmY,OACrCosD,EAAoB8J,EAAWhlE,MAG9Bk7D,GACCuH,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAesnD,cACfsW,EAAiBvpE,KAAK6L,MAAMqnD,OAWpC,IAAKmW,EAAW,MAChB,IAAI+J,EAAgB,IAAI/3B,EAAAr+B,MACNpQ,EAChBnD,EAAe/H,EAAA2T,mBAAsCzI,EAAQkE,WAC7Du4D,EACAE,EACAv7D,GAEF,OAAQq7D,EAAUp6D,UAChB,KAAK,EAAG,MACR,KAAK,EAAwB,EAAfiO,KAAoBA,EAAc,MAChD,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,QAAS3a,QAAO,GAElB6wE,EAAcl2D,aAAeA,EAC7BA,GAAgBmsD,EAAUp6D,SAC1BjB,EAASY,QAAQpF,IAAIoD,EAAOkE,WAAYsiE,GACxC,MAIF,KAAK/3B,EAAAv2C,YAAYsJ,mBACVJ,EAASY,UAASZ,EAASY,QAAU,IAAI3J,KAC9C,IAAIytE,EAAmBtzE,KAAKozE,yBACP5lE,EACnBwQ,EACAwzD,GAEF,IAAK8B,EAAkB,OAAO,KAC9BA,EAAiBjpE,aAAeA,EAAe/H,EAAA2T,mBAAqBq9D,EAAiB5hE,WACrF9C,EAASY,QAAQpF,IAAIoD,EAAOkE,WAAY4hE,GACxC,MAIF,KAAKr3B,EAAAv2C,YAAY4P,SACV1G,EAASY,UAASZ,EAASY,QAAU,IAAI3J,KAC9C,IAAI0P,EAAkBpS,OAAkBqK,EAAQ+H,iBAC5CC,EAA6BhI,EAAQgI,gBACrCy+D,EAAmB,IAAIh4B,EAAAxmC,SACzBzV,KAAKqY,QACL7K,EAAOkE,WACPrH,EAAe/H,EAAA2T,mBAAqBzI,EAAOkE,WAC3CzP,GAEEiyE,EAAyBl0E,KAAKozE,yBAChC79D,EACAyI,EACAwzD,GAEF,IAAK0C,EAAwB,OAAO,KAIpC,GAHAA,EACG7pE,aAAeA,EAAe/H,EAAA2T,mBAAqBi+D,EAAuBxiE,WAC7EuiE,EAAiB1+D,gBAAkB2+D,EAC/B1+D,EAAiB,CACnB,IAAI2+D,GAAyBn0E,KAAKozE,yBAChC59D,EACAwI,EACAwzD,GAEF,IAAK2C,GAAwB,OAAO,KACpCA,GACG9pE,aAAeA,EAAe/H,EAAA2T,mBAAqBk+D,GAAuBziE,WAC7EuiE,EAAiBz+D,gBAAkB2+D,GAErCvlE,EAASY,QAAQpF,IAAIoD,EAAOkE,WAAYuiE,GACxC,MAEF,QAAS9wE,QAAO,sGAMtByL,EAASsP,oBAAsBJ,MAG/B,IAAsC,IAAAu0C,GAAAvlD,EAAA7K,EAAU4S,oBAAkB09C,GAAAF,GAAArlD,QAAAulD,GAAAtlD,KAAAslD,GAAAF,GAAArlD,OAAE,CAA3D,IAAAwlD,GAAArlD,EAAAolD,GAAAjxD,MAAA,GAACoJ,GAAA8nD,GAAA,GAAM4hB,GAAA5hB,GAAA,GACdrvD,OAAOuH,IAAQuxC,EAAA55C,aAAaoD,SAC5B,IAAI85D,QAAgB,EACpB,GAAI6U,GAAkBrkE,GAAGzN,EAAA6M,YAAYkM,UAAW,CAC9C,IAAIg5D,GAAkBr0E,KAAKozE,yBACzBgB,GACAp2D,EACAwzD,GAEF,IAAK6C,GAAiB,SACtB9U,GAAmBv/D,KAAKuP,gBAAgB8kE,GAAiB,KAAM,KAAM7C,QAErEjS,GAAmBv/D,KAAKuP,gBAAgB6kE,GAAmB,KAAM,KAAM5C,GAEzE,GAAKjS,GAAL,CACA,IAAI3qD,GAAYhG,EAASgG,UACpBA,KAAWhG,EAASgG,UAAYA,GAAY,IAAI/O,KACrD+O,GAAUxK,IAAIM,GAAM60D,2GAEtB,OAAO3wD,GAITtH,EAAArF,UAAA8zD,8BAAA,SACE9zD,EACA8/D,EACA9nD,EACA04C,EACA6e,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAI9P,EAAuC,KAG3C,GAAI1/D,EAAU8N,GAAGzN,EAAA6M,YAAYC,SAAU,CACrC,IAAIklE,EAAqBryE,EAAU8J,YAAYiM,eAC3Cu7D,EAAwBe,EAAmBlxE,OAC/CD,OAAOowE,EAAwB,GAC/B,IAAIC,EAA4C,OAAtBzR,EAA6BA,EAAkB3+D,OAAS,EAClF,GAAImwE,GAAyBC,EAO3B,OANIhC,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO8mE,EAAsBtiE,SAAS,IAAKuiE,EAAoBviE,SAAS,KAGhF,KAST,KAPA0wD,EAAwB3hE,KAAKgiE,qBAC3BsS,EACAvS,EACA9nD,EACA04C,EACA6e,IAE0B,OAAO,UAInC,GAA0B,OAAtBzP,GAA8BA,EAAkB3+D,OAOlD,OANIouE,GAAcD,EAAWE,QAC3BzxE,KAAKsM,MACH/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGzB,KAKX,OAAOrK,KAAK2O,aACV1M,EACA0/D,EACA1nD,EACAu3D,IAGNlqE,EA5kCA,CAA8B/E,EAAA4V,mBAAjBzY,EAAA4H,iIC9DbnH,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAAuC,EAAAvC,EAAA,GAEAuC,EAAAyjC,OAAOlkC,UAAUsxC,OAAS,WACxB,OAAOghC,SAASC,WAAWx0E,KAAKwa,KAAKi6D,eAGvC/xE,EAAAyjC,OAAOlkC,UAAUuxC,QAAU,WACzB,OAAO+gC,SAASC,WAAWx0E,KAAKwa,KAAKk6D,+BCpBvC,SAAAjhB,GAEA,MAAA8gB,EAAA9gB,EAAAkhB,UAAoCx0E,EAAQ,IAG5C,QAAAyB,KAFA6xD,EAAA8gB,WAEAA,GACA3yE,EAAAyuB,WAAA,cAAAzuB,EAAAyuB,WAAA,gBAAAojC,EAAA7xD,GAAA2yE,EAAA3yE,IAKA6xD,EAAAmhB,kBAAAL,EAAAM,QACAphB,EAAAqhB,cAAAP,EAAAQ,MACAthB,EAAAuhB,cAAAT,EAAAU,SACAxhB,EAAAyhB,QAAA,SAAAzrC,EAAAoR,GAAqC05B,EAAAY,OAAA1rC,GAAAoR,GACrC4Y,EAAA2hB,OAAA,SAAA3rC,GAA+B,OAAA8qC,EAAAY,OAAA1rC,qCCf/B9pC,EAAAD,QAAAO,oBCAA,SAAAwzD,GAEA,IAAA4hB,EAAA,oBAAAr5B,qBAAA,IAAAyX,MAAA1zD,KAEAs1E,EAAAC,WAAA,EAEA,IAAAC,EAAA,IAAAC,aAAA,GACAC,EAAA,IAAAC,YAAAH,EAAAvvC,QAiJA,SAAA2vC,IACAlnE,MAAAmnE,kBACAnnE,MAAAmnE,kBAAA51E,KAAA21E,GAEA31E,KAAAo7B,MAAAp7B,KAAAY,KAAA,KAAAZ,KAAA+5B,QAAA,UAAAtrB,OAAA2sB,MAWA,SAAAy6C,EAAA97C,GACA/5B,KAAA+5B,WAAA,mBACAtrB,MAAAmnE,kBACAnnE,MAAAmnE,kBAAA51E,KAAA61E,GAEA71E,KAAAo7B,MAAAp7B,KAAAY,KAAA,KAAAZ,KAAA+5B,QAAA,UAAAtrB,OAAA2sB,MAnKAr6B,OAAA+0E,iBACAT,EAAA,YAAA/zE,GAA0C,OAAAA,GAAA,SAE1CslB,WAAgBtlB,OAAA,IAAAy0E,UAAA,GAChBlvD,WAAgBvlB,MAAA,IAAAy0E,UAAA,KAGhBh1E,OAAA+0E,iBACAT,EAAA,aAAA/zE,GAA4C,OAAAA,GAAA,SAE5CslB,WAAgBtlB,OAAA,MAAAy0E,UAAA,GAChBlvD,WAAgBvlB,MAAA,MAAAy0E,UAAA,KAGhBh1E,OAAA+0E,iBACAT,EAAA,IAAAA,EAAA,eAAA/zE,GAAmE,SAAAA,IAEnEslB,WAAgBtlB,OAAA,WAAAy0E,UAAA,GAChBlvD,WAAgBvlB,MAAA,WAAAy0E,UAAA,KAGhBh1E,OAAA+0E,iBACAT,EAAA,YAAA/zE,GAA0C,WAAAA,IAE1CslB,WAAgBtlB,MAAA,EAAAy0E,UAAA,GAChBlvD,WAAgBvlB,MAAA,IAAAy0E,UAAA,KAGhBh1E,OAAA+0E,iBACAT,EAAA,aAAA/zE,GAA4C,aAAAA,IAE5CslB,WAAgBtlB,MAAA,EAAAy0E,UAAA,GAChBlvD,WAAgBvlB,MAAA,MAAAy0E,UAAA,KAGhBh1E,OAAA+0E,iBACAT,EAAA,IAAAA,EAAA,eAAA/zE,GAAmE,OAAAA,IAAA,IAEnEslB,WAAgBtlB,MAAA,EAAAy0E,UAAA,GAChBlvD,WAAgBvlB,MAAA,WAAAy0E,UAAA,KAGhBh1E,OAAA+0E,iBACAT,EAAA,cAAA/zE,GAA8C,QAAAA,IAE9CslB,WAAgBtlB,MAAA,EAAAy0E,UAAA,GAChBlvD,WAAgBvlB,MAAA,EAAAy0E,UAAA,KAGhBh1E,OAAA+0E,iBACAT,EAAA,aAAA/zE,GAA4C,OAAA00E,KAAAC,OAAA30E,KAE5C40E,SAAgB50E,MAAA00E,KAAAC,OAAA,cAAAF,UAAA,GAChBnvD,WAAgBtlB,MAAA00E,KAAAC,OAAA,eAAAF,UAAA,GAChBlvD,WAAgBvlB,MAAA00E,KAAAC,OAAA,cAAAF,UAAA,GAChBI,kBAAwB70E,MAAA00E,KAAAC,OAAA,gBAAAF,UAAA,GACxBK,kBAAwB90E,OAAA,SAAAy0E,UAAA,GACxBM,kBAAwB/0E,MAAA,SAAAy0E,UAAA,GACxBO,mBAAwBh1E,MAAAi1E,IAAAR,UAAA,GACxBS,mBAAwBl1E,OAAAi1E,IAAAR,UAAA,GACxBU,KAAUn1E,MAAAm1E,IAAAV,UAAA,KAGVh1E,OAAA+0E,iBACAT,EAAA,aAAA/zE,GAA4C,OAAAA,IAE5C40E,SAAgB50E,MAAA,sBAAAy0E,UAAA,GAChBnvD,WAAgBtlB,MAAA,OAAAy0E,UAAA,GAChBlvD,WAAgBvlB,MAAA,uBAAAy0E,UAAA,GAChBI,kBAAwB70E,MAAA,wBAAAy0E,UAAA,GACxBK,kBAAwB90E,OAAA,iBAAAy0E,UAAA,GACxBM,kBAAwB/0E,MAAA,iBAAAy0E,UAAA,GACxBO,mBAAwBh1E,MAAAi1E,IAAAR,UAAA,GACxBS,mBAAwBl1E,OAAAi1E,IAAAR,UAAA,GACxBU,KAAUn1E,MAAAm1E,IAAAV,UAAA,KAGVV,EAAA,IAAAW,KAAAU,MAEArB,EAAA,aAAA/zE,GACA,IAAAZ,EAAAs1E,KAAAU,MAAAp1E,MACA,OAAAA,EAAA,GAAAZ,KAGA20E,EAAA,gBAAA/zE,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGA+zE,EAAA,cAAA/zE,EAAAmkB,GAEA,OAAAnkB,IADAmkB,GAAA,IACAnkB,IAAA,GAAAmkB,GAGA4vD,EAAA,cAAA/zE,EAAAmkB,GAEA,OAAAnkB,KADAmkB,GAAA,IACAnkB,GAAA,GAAAmkB,GAGA4vD,EAAA,IAAAW,KAAAW,IAEAtB,EAAA,IAAAW,KAAAtlB,IAEA2kB,EAAA,IAAAW,KAAAj0D,IAEAszD,EAAA,KAAAW,KAAA35B,KAEAg5B,EAAA,MAAAW,KAAAY,MAGAvB,EAAA,iBAAA/zE,GACA,WAAA00E,KAAAW,IAAAr1E,EAAA00E,KAAAa,MAAAv1E,IACA,EAAA00E,KAAAc,MAAA,GAAAx1E,GAEA00E,KAAAc,MAAAx1E,IAGA+zE,EAAA,gBAAAtkD,EAAAC,EAAA/C,GACA,OAAAA,EAAA8C,EAAAC,GAGAqkD,EAAA,KAAAW,KAAAe,KAEA1B,EAAA,MAAAW,KAAAa,MAEAxB,EAAA,kBAAA2B,EAAAC,GACA,OAAAjB,KAAAW,IAAAK,GAAAhB,KAAAkB,KAAAD,IAGA5B,EAAA,eAAA/zE,GACA,IAAAoiD,EAAApiD,GAAA,WACAqiD,GAAA,SAAAriD,IAAA,EAIA,OAFAoiD,GADApiD,EAAAoiD,EAAAC,IACA,WACAA,GAAA,MAAAriD,IAAA,KAIA+zE,EAAA,iBAAA/zE,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUAq0E,EAAA1zE,UAAAlB,OAAAY,OAAA8M,MAAAxM,WACA0zE,EAAA1zE,UAAArB,KAAA,mBACA+0E,EAAA1zE,UAAA83B,QAAA,cAEAs7C,EAAA,uBACA,UAAAM,GAWAE,EAAA5zE,UAAAlB,OAAAY,OAAA8M,MAAAxM,WACA4zE,EAAA5zE,UAAArB,KAAA,iBAEAy0E,EAAA,gBAAA8B,EAAAp9C,GACA,GAAAo9C,EAAA,OAAAA,EACA,UAAAtB,EAAA97C,IAGAs7C,EAAA,oBAAA/zE,GACA,OAAAA,GAGA+zE,EAAA,kBAAA58D,EAAA2+D,GACA,SAAAC,SAAA5+D,OAAA43D,IAGA90B,OAAA,uBAAAD,GACA,OAAAC,OAAAkM,aAAA1zB,MAAAwnB,OAAAD,IAGAC,OAAA,wBAAAD,GACA,OAAAC,OAAA+7B,cAAAvjD,MAAAwnB,OAAAD,IAGA+5B,EAAA,UAAAkC,OAAAC,UAEAnC,EAAA,iBAAAnyE,GACA,uBAAAA,GAGAmyE,EAAA,qBAAAnyE,GACA,uBAAAA,GAAA,iBAAAA,GAGAmyE,EAAA,kBAAAnyE,GACA,uBAAAA,gBAAAq4C,QAGA85B,EAAA,QAAAvrE,MAAAyjD,QAEA8nB,EAAA,mBAAApzD,GACA,OAAAA,GAGAozD,EAAA,cAAA2B,EAAAC,GACA,OAAAD,EAAAC,GAGA5B,EAAA,eAAA2B,EAAAC,GACA,OAAAjB,KAAAC,OAAAe,EAAAC,IAGA5B,EAAA,OAAAW,KACAX,EAAA,OAAAoC,QAAA,SAAAT,GACa,OAAbzB,EAAA,GAAAyB,EAAaU,QAAAjC,EAAA,QAAAuB,OAGb3B,EAAA,aACA,IAAAsC,EAAA,IAAAxkC,WAAA,GACAykC,EAAA,EACA,OACAjxC,SAAA0uC,EAAA,4BAAA3vD,GACA,KAAAA,KAAA,YACA,GAAAkyD,EAAAlyD,EAAAiyD,EAAAv0E,OAAA,CACA,IAAAy0E,EAAAF,GACAA,EAAA,IAAAxkC,WAAA6iC,KAAAtlB,IAAA,MAAAinB,EAAAv0E,OAAAsiB,EAAA,EAAAiyD,EAAAv0E,UACAgH,IAAAytE,GAEA,IAAApuC,EAAAmuC,EAEA,OADA,GAAAA,GAAAlyD,KAAAkyD,EAAA,KAAAA,IACAnuC,GAEAvpB,KAAAm1D,EAAA,wBAAA5rC,KACAquC,KAAAzC,EAAA,wBAAA0C,EAAAC,EAAAtyD,GACAiyD,EAAAM,WAAAF,EAAAC,IAAAtyD,MAjBA,GAsBA2vD,EAAA,MAAAA,EAAA,kBAAA5rC,EAAAnoC,EAAA2kC,GACA0xC,KAAAluC,GAAA,EAAAxD,IAAA3kC,GAGA+zE,EAAA,KAAAA,EAAA,iBAAA5rC,EAAAxD,GACA,OAAA0xC,KAAAluC,GAAA,EAAAxD,yCCnQA,SAAAwtB,GAAA,MAAA8hB,EAAA,IAAAC,aAAA,GACA0C,EAAA,IAAAC,aAAA5C,EAAAvvC,QACAoyC,EAAA,IAAAC,WAAA9C,EAAAvvC,QAEAytB,EAAA6kB,WAAA,SAAAh3E,GAEA,OADA42E,EAAA,GAAA52E,EACA82E,EAAA,IAGA3kB,EAAA8kB,WAAA,SAAAj3E,GAEA,OADA82E,EAAA,GAAA92E,EACA42E,EAAA,IAGAzkB,EAAA+kB,WAAA,SAAAl3E,GAEA,OADAi0E,EAAA,GAAAj0E,EACA+H,QAAA+uE,EAAA,GAAAA,EAAA,KAGA3kB,EAAAglB,WAAA,SAAAn3E,GAGA,OAFA82E,EAAA,GAAAroC,QAAAzuC,GACA82E,EAAA,GAAApoC,SAAA1uC,GACAi0E,EAAA,wCCtBA,SAAA9hB,GAAA,MAAAilB,EAAAjlB,EAAAilB,MAA4Bv4E,EAAQ,IAEpCszD,EAAAxyC,SAAAy3D,EAAAC,KAEAllB,EAAAzyC,QAAA03D,EAAAE,IAEAnlB,EAAApqD,QAAA,SAAAwvE,EAAAC,GACA,OAAAJ,EAAAK,SAAAF,EAAAC,IAGArlB,EAAA1jB,QAAA,SAAAzuC,GACA,OAAAA,EAAA03E,KAGAvlB,EAAAzjB,SAAA,SAAA1uC,GACA,OAAAA,EAAA23E,MAGAxlB,EAAAjL,QAAA,SAAA/mC,EAAAC,GACA,OAAAD,EAAAtK,IAAAuK,IAGA+xC,EAAA8R,QAAA,SAAA9jD,EAAAC,GACA,OAAAD,EAAAy3D,IAAAx3D,IAGA+xC,EAAAhL,QAAA,SAAAhnC,EAAAC,GACA,OAAAD,EAAA03D,IAAAz3D,IAGA+xC,EAAA2lB,QAAA,SAAA33D,EAAAC,GACA,OAAAD,EAAA43D,IAAA33D,IAGA+xC,EAAA6lB,UAAA,SAAA73D,EAAAC,GACA,OAAAD,EAAA83D,aAAAF,IAAA33D,EAAA63D,cAAAC,YAGA/lB,EAAAgmB,QAAA,SAAAh4D,EAAAC,GACA,OAAAD,EAAAi4D,IAAAh4D,IAGA+xC,EAAAkmB,UAAA,SAAAl4D,EAAAC,GACA,OAAAD,EAAA83D,aAAAG,IAAAh4D,EAAA63D,cAAAC,YAGA/lB,EAAA3yC,QAAA,SAAAW,EAAAC,GACA,OAAAD,EAAAm4D,IAAAl4D,IAGA+xC,EAAAtyC,OAAA,SAAAM,EAAAC,GACA,OAAAD,EAAAo4D,GAAAn4D,IAGA+xC,EAAAqmB,QAAA,SAAAr4D,EAAAC,GACA,OAAAD,EAAAs4D,IAAAr4D,IAGA+xC,EAAA1yC,QAAA,SAAAU,EAAAC,GACA,OAAAD,EAAAu4D,IAAAt4D,IAGA+xC,EAAAwmB,QAAA,SAAAx4D,EAAAC,GACA,OAAAD,EAAAy4D,IAAAx4D,IAGA+xC,EAAAtC,UAAA,SAAA1vC,EAAAC,GACA,OAAAD,EAAA04D,KAAAz4D,IAGA+xC,EAAAryC,QAAA,SAAA9f,GACA,OAAAA,EAAA84E,OAGA3mB,EAAA4mB,OAAA,SAAA54D,EAAAC,GACA,OAAAD,EAAA64D,GAAA54D,IAGA+xC,EAAA5yC,OAAA,SAAAY,EAAAC,GACA,OAAAD,EAAA84D,GAAA74D,IAGA+xC,EAAAxC,UAAA,SAAA3vD,EAAA80D,GACAjzD,OAAAizD,GAAA,IAAAA,IAAA,IACA,IAAAkE,EAAAoe,EAAA8B,QAAApkB,EAAA,GACA,OAAA90D,EAAA6V,IAAAmjD,GAAAsf,IAAAtf,EAAA8f,QAGA3mB,EAAA+R,UAAA,SAAAlkE,GACA,WAAAA,EAAA23E,MAAA33E,EAAA03E,KAAA,GAAA13E,EAAA03E,KAAA1wE,GAAAue,YACA,IAAAvlB,EAAA23E,MAAA33E,EAAA03E,KAAA1wE,GAAAse,WAAAtlB,EAAA03E,IAAA,GAGAvlB,EAAAiS,WAAA,SAAApkE,GACA,WAAAA,EAAA23E,MAAA33E,EAAA03E,KAAA,GAAA13E,EAAA03E,KAAAzwE,IAAAse,YACA,IAAAvlB,EAAA23E,MAAA33E,EAAA03E,KAAAzwE,IAAAqe,WAAAtlB,EAAA03E,IAAA,GAGAvlB,EAAAmS,WAAA,SAAAtkE,GACA,WAAAA,EAAA23E,MAAA33E,EAAA03E,KAAA,IACA,IAAA13E,EAAA23E,MAAA33E,EAAA03E,IAAA,GAGAvlB,EAAAgS,UAAA,SAAAnkE,GACA,WAAAA,EAAA23E,MAAA33E,EAAA03E,KAAA,GAAA13E,EAAA03E,KAAArwE,GAAAke,WAGA4sC,EAAAkS,WAAA,SAAArkE,GACA,WAAAA,EAAA23E,MAAA33E,EAAA03E,KAAA,GAAA13E,EAAA03E,KAAApwE,IAAAie,WAGA4sC,EAAAoS,WAAA,SAAAvkE,GACA,WAAAA,EAAA23E,MAGAxlB,EAAAqS,YAAA,SAAAxkE,GACA,WAAAA,EAAA23E,OAAA,IAAA33E,EAAA03E,KAAA,IAAA13E,EAAA03E,MAGA,MAAAyB,EAAA/B,EAAAgC,WAAAzxE,IAAAmtE,kBACAuE,EAAAjC,EAAAgC,WAAAzxE,IAAAotE,kBAEA5iB,EAAAsS,WAAA,SAAAzkE,GACA,OAAAA,EAAAs5E,IAAAH,IAAAn5E,EAAAu5E,IAAAF,IAGA,MAAAG,EAAApC,EAAAgC,WAAAxxE,IAAAktE,kBACA2E,EAAArC,EAAAgC,WAAAxxE,IAAAmtE,kBAEA5iB,EAAAwS,WAAA,SAAA3kE,GACA,OAAAA,EAAAs5E,IAAAE,IAAAx5E,EAAAu5E,IAAAE,IAGAtnB,EAAAuS,WAAA,SAAA1kE,GACA,OAAAmyD,EAAAuiB,KAAAC,OAAA30E,EAAA05E,aAGAvnB,EAAAyS,WAAA,SAAA5kE,GACA,OAAAA,EAAA05E,YAGAvnB,EAAAwnB,cAAA,SAAA35E,EAAA45E,GACA,OAAAA,EAAA55E,EAAAi4E,aAAAj4E,GAAA2P,SAAA,sCC9IAtR,EAAAD,QAAAg5E,EAKA,IAAAyC,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAAj1C,OAAA,IAAAgN,YACA,u2BACSzzC,QACR,MAAAq8C,IAcD,SAAA28B,EAAAM,EAAAC,EAAAiC,GAMAl7E,KAAAg5E,IAAA,EAAAA,EAMAh5E,KAAAi5E,KAAA,EAAAA,EAMAj5E,KAAAk7E,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXA7C,EAAAz2E,UAAAu5E,WAEAz6E,OAAAC,eAAA03E,EAAAz2E,UAAA,cAAqDX,OAAA,IAkBrDo3E,EAAA4C,SAOA,IAAAG,KAOAC,KAQA,SAAAlB,EAAAl5E,EAAA45E,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADAt6E,KAAA,IACAA,EAAA,OACAq6E,EAAAD,EAAAp6E,IAEAq6E,GAEAJ,EAAAxC,EAAAz3E,GAAA,EAAAA,GAAA,WACAs6E,IACAF,EAAAp6E,GAAAi6E,GACAA,IAGAK,GAAA,MADAt6E,GAAA,IACAA,EAAA,OACAq6E,EAAAF,EAAAn6E,IAEAq6E,GAEAJ,EAAAxC,EAAAz3E,IAAA,WACAs6E,IACAH,EAAAn6E,GAAAi6E,GACAA,GAmBA,SAAAb,EAAAp5E,EAAA45E,GACA,GAAAW,MAAAv6E,GACA,OAAA45E,EAAAY,EAAAnD,EACA,GAAAuC,EAAA,CACA,GAAA55E,EAAA,EACA,OAAAw6E,EACA,GAAAx6E,GAAAy6E,EACA,OAAAC,MACK,CACL,GAAA16E,IAAA26E,EACA,OAAAr1D,EACA,GAAAtlB,EAAA,GAAA26E,EACA,OAAAp1D,EAEA,OAAAvlB,EAAA,EACAo5E,GAAAp5E,EAAA45E,GAAAgB,MACAnD,EAAAz3E,EAAA66E,EAAA,EAAA76E,EAAA66E,EAAA,EAAAjB,GAmBA,SAAAnC,EAAAqD,EAAAC,EAAAnB,GACA,WAAAxC,EAAA0D,EAAAC,EAAAnB,GA5CAxC,EAAA8B,UAkCA9B,EAAAgC,aAsBAhC,EAAAK,WASA,IAAAuD,EAAAtG,KAAAuG,IASA,SAAAC,EAAA/jE,EAAAyiE,EAAA9D,GACA,OAAA3+D,EAAArV,OACA,MAAAqL,MAAA,gBACA,WAAAgK,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAAkgE,EASA,GARA,iBAAAuC,GAEA9D,EAAA8D,EACAA,GAAA,GAEAA,OAEA9D,KAAA,IACA,MAAAA,EACA,MAAAqF,WAAA,SAEA,IAAAt6E,EACA,IAAAA,EAAAsW,EAAAgyC,QAAA,QACA,MAAAh8C,MAAA,mBACA,OAAAtM,EACA,OAAAq6E,EAAA/jE,EAAAf,UAAA,GAAAwjE,EAAA9D,GAAA8E,MAQA,IAHA,IAAAQ,EAAAhC,EAAA4B,EAAAlF,EAAA,IAEA1+D,EAAAigE,EACAt4E,EAAA,EAAmBA,EAAAoY,EAAArV,OAAgB/C,GAAA,GACnC,IAAAqlB,EAAAswD,KAAAj0D,IAAA,EAAAtJ,EAAArV,OAAA/C,GACAiB,EAAA+1E,SAAA5+D,EAAAf,UAAArX,IAAAqlB,GAAA0xD,GACA,GAAA1xD,EAAA,GACA,IAAAi3D,EAAAjC,EAAA4B,EAAAlF,EAAA1xD,IACAhN,IAAAygE,IAAAwD,GAAAxlE,IAAAujE,EAAAp5E,SAGAoX,GADAA,IAAAygE,IAAAuD,IACAvlE,IAAAujE,EAAAp5E,IAIA,OADAoX,EAAAwiE,WACAxiE,EAoBA,SAAAkkE,EAAA/hC,EAAAqgC,GACA,uBAAArgC,EACA6/B,EAAA7/B,EAAAqgC,GACA,iBAAArgC,EACA2hC,EAAA3hC,EAAAqgC,GAEAnC,EAAAl+B,EAAAm+B,IAAAn+B,EAAAo+B,KAAA,kBAAAiC,IAAArgC,EAAAqgC,UAfAxC,EAAA8D,aAyBA9D,EAAAkE,YAUA,IAcAT,EAAAU,WAOAd,EAAAI,IAOAF,EAAAF,EAAA,EAOAe,EAAAtC,EA5BA,OAkCA7B,EAAA6B,EAAA,GAMA9B,EAAAC,OAMA,IAAAmD,EAAAtB,EAAA,MAMA9B,EAAAoD,QAMA,IAAAlD,EAAA4B,EAAA,GAMA9B,EAAAE,MAMA,IAAAmE,EAAAvC,EAAA,MAMA9B,EAAAqE,OAMA,IAAAC,EAAAxC,GAAA,GAMA9B,EAAAsE,UAMA,IAAAn2D,EAAAkyD,GAAA,iBAMAL,EAAA7xD,YAMA,IAAAm1D,EAAAjD,GAAA,SAMAL,EAAAsD,qBAMA,IAAAp1D,EAAAmyD,EAAA,kBAMAL,EAAA9xD,YAMA,IAAAq2D,EAAAvE,EAAAz2E,UAMAg7E,EAAAC,MAAA,WACA,OAAAl9E,KAAAk7E,SAAAl7E,KAAAg5E,MAAA,EAAAh5E,KAAAg5E,KAOAiE,EAAAjC,SAAA,WACA,OAAAh7E,KAAAk7E,UACAl7E,KAAAi5E,OAAA,GAAAkD,GAAAn8E,KAAAg5E,MAAA,GACAh5E,KAAAi5E,KAAAkD,GAAAn8E,KAAAg5E,MAAA,IAUAiE,EAAAhsE,SAAA,SAAAmmE,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAqF,WAAA,SACA,GAAAz8E,KAAAm9E,SACA,UACA,GAAAn9E,KAAAo9E,aAAA,CACA,GAAAp9E,KAAAs6E,GAAA1zD,GAAA,CAGA,IAAAy2D,EAAA3C,EAAAtD,GACAiC,EAAAr5E,KAAAq5E,IAAAgE,GACAC,EAAAjE,EAAAF,IAAAkE,GAAAnE,IAAAl5E,MACA,OAAAq5E,EAAApoE,SAAAmmE,GAAAkG,EAAAJ,QAAAjsE,SAAAmmE,GAEA,UAAAp3E,KAAAk8E,MAAAjrE,SAAAmmE,GAQA,IAHA,IAAAsF,EAAAhC,EAAA4B,EAAAlF,EAAA,GAAAp3E,KAAAk7E,UACAqC,EAAAv9E,KACA0Y,EAAA,KACA,CACA,IAAA8kE,EAAAD,EAAAlE,IAAAqD,GAEAe,GADAF,EAAArE,IAAAsE,EAAArE,IAAAuD,IAAAQ,UAAA,GACAjsE,SAAAmmE,GAEA,IADAmG,EAAAC,GACAL,SACA,OAAAM,EAAA/kE,EAEA,KAAA+kE,EAAAr6E,OAAA,GACAq6E,EAAA,IAAAA,EACA/kE,EAAA,GAAA+kE,EAAA/kE,IASAukE,EAAAS,YAAA,WACA,OAAA19E,KAAAi5E,MAOAgE,EAAAU,oBAAA,WACA,OAAA39E,KAAAi5E,OAAA,GAOAgE,EAAAW,WAAA,WACA,OAAA59E,KAAAg5E,KAOAiE,EAAAY,mBAAA,WACA,OAAA79E,KAAAg5E,MAAA,GAOAiE,EAAAa,cAAA,WACA,GAAA99E,KAAAo9E,aACA,OAAAp9E,KAAAs6E,GAAA1zD,GAAA,GAAA5mB,KAAAk8E,MAAA4B,gBAEA,IADA,IAAAjjC,EAAA,GAAA76C,KAAAi5E,KAAAj5E,KAAAi5E,KAAAj5E,KAAAg5E,IACA+E,EAAA,GAAsBA,EAAA,GACtB,IAAAljC,EAAA,GAAAkjC,GAD+BA,KAG/B,UAAA/9E,KAAAi5E,KAAA8E,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAAn9E,KAAAi5E,MAAA,IAAAj5E,KAAAg5E,KAOAiE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAAp9E,KAAAk7E,UAAAl7E,KAAAi5E,KAAA,GAOAgE,EAAAgB,WAAA,WACA,OAAAj+E,KAAAk7E,UAAAl7E,KAAAi5E,MAAA,GAOAgE,EAAAiB,MAAA,WACA,aAAAl+E,KAAAg5E,MAOAiE,EAAAkB,OAAA,WACA,aAAAn+E,KAAAg5E,MAQAiE,EAAAmB,OAAA,SAAA98D,GAGA,OAFAg6D,EAAAh6D,KACAA,EAAAs7D,EAAAt7D,KACAthB,KAAAk7E,WAAA55D,EAAA45D,UAAAl7E,KAAAi5E,OAAA,OAAA33D,EAAA23D,OAAA,SAEAj5E,KAAAi5E,OAAA33D,EAAA23D,MAAAj5E,KAAAg5E,MAAA13D,EAAA03D,MASAiE,EAAA3C,GAAA2C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAA/8D,GACA,OAAAthB,KAAAs6E,GAAAh5D,IASA27D,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA1C,GAAA0C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAAj9D,GACA,OAAAthB,KAAAw+E,KAAAl9D,GAAA,GASA27D,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAAp9D,GACA,OAAAthB,KAAAw+E,KAAAl9D,IAAA,GASA27D,EAAApC,IAAAoC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAAt9D,GACA,OAAAthB,KAAAw+E,KAAAl9D,GAAA,GASA27D,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAAx9D,GACA,OAAAthB,KAAAw+E,KAAAl9D,IAAA,GASA27D,EAAArC,IAAAqC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAA19D,GAGA,GAFAg6D,EAAAh6D,KACAA,EAAAs7D,EAAAt7D,IACAthB,KAAAs6E,GAAAh5D,GACA,SACA,IAAA29D,EAAAj/E,KAAAo9E,aACA8B,EAAA59D,EAAA87D,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEAl/E,KAAAk7E,SAGA55D,EAAA23D,OAAA,EAAAj5E,KAAAi5E,OAAA,GAAA33D,EAAA23D,OAAAj5E,KAAAi5E,MAAA33D,EAAA03D,MAAA,EAAAh5E,KAAAg5E,MAAA,OAFAh5E,KAAAk5E,IAAA53D,GAAA87D,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAAn/E,KAAAk7E,UAAAl7E,KAAAs6E,GAAA1zD,GACAA,EACA5mB,KAAAo6E,MAAAjjE,IAAAyhE,IAQAqE,EAAAf,IAAAe,EAAAkC,OAOAlC,EAAA9lE,IAAA,SAAAioE,GACA9D,EAAA8D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAAr/E,KAAAi5E,OAAA,GACAqG,EAAA,MAAAt/E,KAAAi5E,KACAsG,EAAAv/E,KAAAg5E,MAAA,GACAwG,EAAA,MAAAx/E,KAAAg5E,IAEAyG,EAAAL,EAAAnG,OAAA,GACAyG,EAAA,MAAAN,EAAAnG,KACA0G,EAAAP,EAAApG,MAAA,GAGA4G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAApG,QAIA,GAGA6G,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA1G,GANA+G,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGA7/E,KAAAk7E,WAQA+B,EAAA+C,SAAA,SAAAC,GAGA,OAFA3E,EAAA2E,KACAA,EAAArD,EAAAqD,IACAjgF,KAAAmX,IAAA8oE,EAAA/D,QASAe,EAAA/D,IAAA+D,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAAngF,KAAAm9E,SACA,OAAAxE,EAKA,GAJA2C,EAAA6E,KACAA,EAAAvD,EAAAuD,IAGAhF,EAKA,OAAApC,EAJAoC,EAAAhC,IAAAn5E,KAAAg5E,IACAh5E,KAAAi5E,KACAkH,EAAAnH,IACAmH,EAAAlH,MACAkC,EAAAiF,WAAApgF,KAAAk7E,UAGA,GAAAiF,EAAAhD,SACA,OAAAxE,EACA,GAAA34E,KAAAs6E,GAAA1zD,GACA,OAAAu5D,EAAAjC,QAAAt3D,EAAA+xD,EACA,GAAAwH,EAAA7F,GAAA1zD,GACA,OAAA5mB,KAAAk+E,QAAAt3D,EAAA+xD,EAEA,GAAA34E,KAAAo9E,aACA,OAAA+C,EAAA/C,aACAp9E,KAAAk8E,MAAA/C,IAAAgH,EAAAjE,OAEAl8E,KAAAk8E,MAAA/C,IAAAgH,GAAAjE,MACK,GAAAiE,EAAA/C,aACL,OAAAp9E,KAAAm5E,IAAAgH,EAAAjE,aAGA,GAAAl8E,KAAAy+E,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAApC,EAAA16E,KAAAg7E,WAAAmF,EAAAnF,WAAAh7E,KAAAk7E,UAKA,IAAAmE,EAAAr/E,KAAAi5E,OAAA,GACAqG,EAAA,MAAAt/E,KAAAi5E,KACAsG,EAAAv/E,KAAAg5E,MAAA,GACAwG,EAAA,MAAAx/E,KAAAg5E,IAEAyG,EAAAU,EAAAlH,OAAA,GACAyG,EAAA,MAAAS,EAAAlH,KACA0G,EAAAQ,EAAAnH,MAAA,GACAqH,EAAA,MAAAF,EAAAnH,IAEA4G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA1G,GAZA+G,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGA7/E,KAAAk7E,WASA+B,EAAA9D,IAAA8D,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAA1uE,MAAA,oBAaA,IAWA+xE,EAAAjD,EAAAkD,EArBA,GAAAtF,EAIA,OAAAn7E,KAAAk7E,WACA,aAAAl7E,KAAAi5E,OACA,IAAAsH,EAAAvH,MAAA,IAAAuH,EAAAtH,KAUAF,GANA/4E,KAAAk7E,SAAAC,EAAAuF,MAAAvF,EAAAwF,OACA3gF,KAAAg5E,IACAh5E,KAAAi5E,KACAsH,EAAAvH,IACAuH,EAAAtH,MAEAkC,EAAAiF,WAAApgF,KAAAk7E,UARAl7E,KAWA,GAAAA,KAAAm9E,SACA,OAAAn9E,KAAAk7E,SAAAY,EAAAnD,EAEA,GAAA34E,KAAAk7E,SA6BK,CAKL,GAFAqF,EAAArF,WACAqF,IAAAhH,cACAgH,EAAA1B,GAAA7+E,MACA,OAAA87E,EACA,GAAAyE,EAAA1B,GAAA7+E,KAAAm6E,KAAA,IACA,OAAA4C,EACA0D,EAAA3E,MAtCA,CAGA,GAAA97E,KAAAs6E,GAAA1zD,GACA,OAAA25D,EAAAjG,GAAA1B,IAAA2H,EAAAjG,GAAA0C,GACAp2D,EACA25D,EAAAjG,GAAA1zD,GACAgyD,GAIA4H,EADAxgF,KAAAk6E,IAAA,GACAb,IAAAkH,GAAAvG,IAAA,IACAM,GAAA3B,GACA4H,EAAAnD,aAAAxE,EAAAoE,GAEAO,EAAAv9E,KAAAk5E,IAAAqH,EAAApH,IAAAqH,IACAC,EAAAD,EAAArpE,IAAAomE,EAAAlE,IAAAkH,UAIS,GAAAA,EAAAjG,GAAA1zD,GACT,OAAA5mB,KAAAk7E,SAAAY,EAAAnD,EACA,GAAA34E,KAAAo9E,aACA,OAAAmD,EAAAnD,aACAp9E,KAAAk8E,MAAA7C,IAAAkH,EAAArE,OACAl8E,KAAAk8E,MAAA7C,IAAAkH,GAAArE,MACS,GAAAqE,EAAAnD,aACT,OAAAp9E,KAAAq5E,IAAAkH,EAAArE,aACAuE,EAAA9H,EAmBA,IADA4E,EAAAv9E,KACAu9E,EAAA3C,IAAA2F,IAAA,CAGAC,EAAAxK,KAAAtlB,IAAA,EAAAslB,KAAAY,MAAA2G,EAAAvC,WAAAuF,EAAAvF,aAWA,IAPA,IAAA4F,EAAA5K,KAAA35B,KAAA25B,KAAA76C,IAAAqlD,GAAAxK,KAAA6K,KACAC,EAAAF,GAAA,KAAAtE,EAAA,EAAAsE,EAAA,IAIAG,EAAArG,EAAA8F,GACAQ,EAAAD,EAAA5H,IAAAoH,GACAS,EAAA5D,cAAA4D,EAAAnC,GAAAtB,IAGAyD,GADAD,EAAArG,EADA8F,GAAAM,EACA9gF,KAAAk7E,WACA/B,IAAAoH,GAKAQ,EAAA5D,WACA4D,EAAAnI,GAEA6H,IAAAtpE,IAAA4pE,GACAxD,IAAArE,IAAA8H,GAEA,OAAAP,GASAxD,EAAA5D,IAAA4D,EAAAqD,OAOArD,EAAAgE,OAAA,SAAAV,GAKA,OAJAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IAGApF,EAOApC,GANA/4E,KAAAk7E,SAAAC,EAAA+F,MAAA/F,EAAAgG,OACAnhF,KAAAg5E,IACAh5E,KAAAi5E,KACAsH,EAAAvH,IACAuH,EAAAtH,MAEAkC,EAAAiF,WAAApgF,KAAAk7E,UAGAl7E,KAAAk5E,IAAAl5E,KAAAq5E,IAAAkH,GAAApH,IAAAoH,KASAtD,EAAAvD,IAAAuD,EAAAgE,OAQAhE,EAAAM,IAAAN,EAAAgE,OAMAhE,EAAA7C,IAAA,WACA,OAAArB,GAAA/4E,KAAAg5E,KAAAh5E,KAAAi5E,KAAAj5E,KAAAk7E,WAQA+B,EAAArD,IAAA,SAAAt4D,GAGA,OAFAg6D,EAAAh6D,KACAA,EAAAs7D,EAAAt7D,IACAy3D,EAAA/4E,KAAAg5E,IAAA13D,EAAA03D,IAAAh5E,KAAAi5E,KAAA33D,EAAA23D,KAAAj5E,KAAAk7E,WAQA+B,EAAApD,GAAA,SAAAv4D,GAGA,OAFAg6D,EAAAh6D,KACAA,EAAAs7D,EAAAt7D,IACAy3D,EAAA/4E,KAAAg5E,IAAA13D,EAAA03D,IAAAh5E,KAAAi5E,KAAA33D,EAAA23D,KAAAj5E,KAAAk7E,WAQA+B,EAAAlD,IAAA,SAAAz4D,GAGA,OAFAg6D,EAAAh6D,KACAA,EAAAs7D,EAAAt7D,IACAy3D,EAAA/4E,KAAAg5E,IAAA13D,EAAA03D,IAAAh5E,KAAAi5E,KAAA33D,EAAA23D,KAAAj5E,KAAAk7E,WAQA+B,EAAAmE,UAAA,SAAAC,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACArhF,KACAqhF,EAAA,GACAtI,EAAA/4E,KAAAg5E,KAAAqI,EAAArhF,KAAAi5E,MAAAoI,EAAArhF,KAAAg5E,MAAA,GAAAqI,EAAArhF,KAAAk7E,UAEAnC,EAAA,EAAA/4E,KAAAg5E,KAAAqI,EAAA,GAAArhF,KAAAk7E,WASA+B,EAAAjD,IAAAiD,EAAAmE,UAOAnE,EAAAqE,WAAA,SAAAD,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACArhF,KACAqhF,EAAA,GACAtI,EAAA/4E,KAAAg5E,MAAAqI,EAAArhF,KAAAi5E,MAAA,GAAAoI,EAAArhF,KAAAi5E,MAAAoI,EAAArhF,KAAAk7E,UAEAnC,EAAA/4E,KAAAi5E,MAAAoI,EAAA,GAAArhF,KAAAi5E,MAAA,OAAAj5E,KAAAk7E,WASA+B,EAAA/C,IAAA+C,EAAAqE,WAOArE,EAAAsE,mBAAA,SAAAF,GAIA,GAHA/F,EAAA+F,KACAA,IAAAnE,SAEA,KADAmE,GAAA,IAEA,OAAArhF,KAEA,IAAAi5E,EAAAj5E,KAAAi5E,KACA,OAAAoI,EAAA,GAEAtI,EADA/4E,KAAAg5E,MACAqI,EAAApI,GAAA,GAAAoI,EAAApI,IAAAoI,EAAArhF,KAAAk7E,UAEAnC,EADS,KAAAsI,EACTpI,EAEAA,IAAAoI,EAAA,GAFA,EAAArhF,KAAAk7E,WAYA+B,EAAA9C,KAAA8C,EAAAsE,mBAQAtE,EAAAuE,MAAAvE,EAAAsE,mBAMAtE,EAAAzD,SAAA,WACA,OAAAx5E,KAAAk7E,SAEAnC,EAAA/4E,KAAAg5E,IAAAh5E,KAAAi5E,MAAA,GADAj5E,MAQAi9E,EAAA1D,WAAA,WACA,OAAAv5E,KAAAk7E,SACAl7E,KACA+4E,EAAA/4E,KAAAg5E,IAAAh5E,KAAAi5E,MAAA,IAQAgE,EAAAwE,QAAA,SAAA9C,GACA,OAAAA,EAAA3+E,KAAA0hF,YAAA1hF,KAAA2hF,aAOA1E,EAAAyE,UAAA,WACA,IAAA5I,EAAA94E,KAAAi5E,KACAJ,EAAA74E,KAAAg5E,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAmE,EAAA0E,UAAA,WACA,IAAA7I,EAAA94E,KAAAi5E,KACAJ,EAAA74E,KAAAg5E,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAH,EAAAkJ,UAAA,SAAAr4C,EAAA2xC,EAAAyD,GACA,OAAAA,EAAAjG,EAAAmJ,YAAAt4C,EAAA2xC,GAAAxC,EAAAoJ,YAAAv4C,EAAA2xC,IASAxC,EAAAmJ,YAAA,SAAAt4C,EAAA2xC,GACA,WAAAxC,EACAnvC,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACA2xC,IAUAxC,EAAAoJ,YAAA,SAAAv4C,EAAA2xC,GACA,WAAAxC,EACAnvC,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACA2xC,qRC7xCA,IAAA34E,EAAApC,EAAA,GAIAsC,EAAAtC,EAAA,GASAqC,EAAArC,EAAA,GAMAuC,EAAAvC,EAAA,GAcA87C,EAAA97C,EAAA,GAWAyC,EAAAzC,EAAA,IAIAmC,EAAAnC,EAAA,GAKA,SAAgB8hE,EACd8f,EACA9/E,EACA+b,EACA6qB,EACAuxB,EACAzH,GAEA,IAEI34B,EACAC,EACAC,EACA8Y,EALArzC,EAASoiF,EAASpiF,OAWtB,OAAQsC,EAAUoI,cAIhB,IAAK,YACH,IAAI0E,EAAOizE,EAAqBD,EAAU/jE,EAAe6qB,EAAU8pB,GAEnE,OADAovB,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACvB+F,EACEA,EAAKgB,GAAE,KAAwBhB,EAAKgB,GAAE,KACzCpQ,EAAOgoC,UAAU,GACjBhoC,EAAOgoC,UAAU,GAHHhoC,EAAOktC,oBAK3B,IAAK,UACC99B,EAAOizE,EAAqBD,EAAU/jE,EAAe6qB,EAAU8pB,GAEnE,OADAovB,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACvB+F,EACEA,EAAKgB,GAAE,GACVpQ,EAAOgoC,UAAU,GACjBhoC,EAAOgoC,UAAU,GAHHhoC,EAAOktC,oBAK3B,IAAK,WACC99B,EAAOizE,EAAqBD,EAAU/jE,EAAe6qB,EAAU8pB,GAEnE,OADAovB,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACvB+F,EACEA,EAAKgB,GAAE,GACVpQ,EAAOgoC,UAAU,GACjBhoC,EAAOgoC,UAAU,GAHHhoC,EAAOktC,oBAK3B,IAAK,cACC99B,EAAOizE,EAAqBD,EAAU/jE,EAAe6qB,EAAU8pB,GAEnE,OADAovB,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACvB+F,GACLgzE,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACrB+F,EAAKgB,GAAE,KACVpQ,EAAOgoC,UAAU,GACjBhoC,EAAOgoC,UAAU,IAJHhoC,EAAOktC,oBAM3B,IAAK,WACC99B,EAAOizE,EAAqBD,EAAU/jE,EAAe6qB,EAAU8pB,GAEnE,GADAovB,EAAShyB,YAAcvtD,EAAA6F,KAAKW,MACvB+F,EAAM,OAAOpP,EAAOktC,oBAEzB,GADIkQ,EAAYhuC,EAAKutC,eACN,CACb,IAAI31C,EAAiBo7E,EAAS1pE,QAAQ1R,eACtC,GAAIA,GAAkBo2C,EAAUt+B,eAAe9X,GAAiB,OAAOhH,EAAOgoC,UAAU,GAE1F,OAAOhoC,EAAOgoC,UAAU,GAE1B,IAAK,UACC54B,EAAOizE,EAAqBD,EAAU/jE,EAAe6qB,EAAU8pB,GAEnE,OADAovB,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACvB+F,EAEgB,QADjBguC,EAAYhuC,EAAKutC,iBAC+D,OAAvDS,EAAUn+B,eAAeq9B,EAAA55C,aAAaoB,aAC/D9D,EAAOgoC,UAAU,GACjBhoC,EAAOgoC,UAAU,GAJHhoC,EAAOktC,oBAM3B,IAAK,YAQH,GAPAk1C,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACxBgV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,OAKX,OAJA2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,IAAI7gC,EAAU+1E,EAAS16E,SAASw4D,kBAAkBh3B,EAAS,GAAIk5C,EAASxiE,gBAAiB3c,EAAA2uE,WAAW0Q,SACpG,OAAOtiF,EAAOgoC,UAAU37B,EAAU,EAAI,GAExC,IAAK,aAQH,GAPA+1E,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACxBgV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,OAKX,OAJA2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,IAAIq1C,EAAOH,EAAShuB,4BAA4BlrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,GAErE,OADAu5E,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACrBrJ,EAAOgoC,UAAUjlC,EAAAyf,gBAAgB+/D,IAASx/E,EAAA0f,aAAa+C,MAAQ,EAAI,GAE5E,IAAK,YACH,IAAK48D,EAAS1pE,QAAQtR,MAEpB,OADAg7E,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACrBrJ,EAAOgoC,UAAU,GAEtB54B,EAAOizE,EAAqBD,EAAU/jE,EAAe6qB,EAAU8pB,GAEnE,OADAovB,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACvB+F,EAEgB,QADjBguC,EAAYhuC,EAAKutC,iBACSS,EAAU1rC,aAAa4qC,EAAAt2C,eAAekM,WAEhElS,EAAOgoC,UAAU,GADjBhoC,EAAOgoC,UAAU,GAHHhoC,EAAOktC,oBAS3B,IAAK,MACH,GAAuB,GAAnBhE,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,KAEzD,OAAQu5E,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OACA,OACEsoC,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQG,OAAQ2T,GACzC,MAEF,QACA,OACA,OACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQG,OAAQ2T,GACzC,MAEF,OACE,GAAI+nD,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,OACEmG,EAAMrzC,EAAO4oC,YACXw5C,EAAS35E,QAAQkB,SACb5G,EAAAwjB,QAAQi8D,OACRz/E,EAAAwjB,QAAQG,OACZ2T,GAEF,MAEF,OACA,OACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQi8D,OAAQnoD,GACzC,MAEF,QACE+nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,KAEzD,OAAQu5E,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OACA,OACEsoC,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQI,OAAQ0T,GACzC,MAEF,QACA,OACA,OACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQI,OAAQ0T,GACzC,MAEF,OACE,GAAI+nD,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,OACEmG,EAAMrzC,EAAO4oC,YACXw5C,EAAS35E,QAAQkB,SACb5G,EAAAwjB,QAAQk8D,OACR1/E,EAAAwjB,QAAQI,OACZ0T,GAEF,MAEF,OACA,OACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQk8D,OAAQpoD,GACzC,MAEF,QACE+nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,SACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,KAEzD,OAAQu5E,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OACA,OACEsoC,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQK,UAAWyT,GAC5C,MAEF,QACA,OACA,OACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQK,UAAWyT,GAC5C,MAEF,OACE,GAAI+nD,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,OACEmG,EAAMrzC,EAAO4oC,YACXw5C,EAAS35E,QAAQkB,SACb5G,EAAAwjB,QAAQm8D,UACR3/E,EAAAwjB,QAAQK,UACZyT,GAEF,MAEF,OACA,OACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQm8D,UAAWroD,GAC5C,MAEF,QACE+nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,KAGzD,OADAyxB,EAAO8nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIk5C,EAAShyB,YAAW,KAC3DgyB,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OACA,OACA,QACEsoC,EAAM+uC,EAASrmB,uBACb/7D,EAAO+oC,aAAahmC,EAAAsgB,SAASs/D,QAAStoD,EAAMC,GAC5C8nD,EAAShyB,aAIb,OACA,OACE/c,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAASs/D,QAAStoD,EAAMC,GAClD,MAEF,OACE,GAAI8nD,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,OACEmG,EAAMrzC,EAAO+oC,aACXq5C,EAAS35E,QAAQkB,SACb5G,EAAAsgB,SAASu/D,QACT7/E,EAAAsgB,SAASs/D,QACbtoD,EACAC,GAEF,MAEF,OACA,OACE+Y,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAASu/D,QAASvoD,EAAMC,GAClD,MAEF,QACE8nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,KAGzD,OADAyxB,EAAO8nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIk5C,EAAShyB,YAAW,KAC3DgyB,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OACA,OACA,QACEsoC,EAAM+uC,EAASrmB,uBACb/7D,EAAO+oC,aAAahmC,EAAAsgB,SAASw/D,QAASxoD,EAAMC,GAC5C8nD,EAAShyB,aAEX,MAEF,OACA,OACE/c,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAASw/D,QAASxoD,EAAMC,GAClD,MAEF,OACE,GAAI8nD,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,OACEmG,EAAMrzC,EAAO+oC,aACXq5C,EAAS35E,QAAQkB,SACb5G,EAAAsgB,SAASy/D,QACT//E,EAAAsgB,SAASw/D,QACbxoD,EACAC,GAEF,MAEF,OACA,OACE+Y,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAASy/D,QAASzoD,EAAMC,GAClD,MAEF,QACE8nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KAEzD,OAAQ64E,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OAEE,IAAIquD,EAAYgpB,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKG,KAAK,GACvEwqC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe6vB,EAAUp/C,MAAOqgB,GACvCr6B,EAAO+oC,aAAahmC,EAAAsgB,SAAS66C,OAC3Bl+D,EAAOgoC,UAAU,GACjBhoC,EAAOqpC,eAAe+vB,EAAUp/C,MAAK,IAEvCha,EAAO+oC,aAAahmC,EAAAsgB,SAASqB,MAC3B1kB,EAAOqpC,eAAe+vB,EAAUp/C,MAAK,GACrCha,EAAOgoC,UAAU,KAGrB,MAEF,OACMoxB,EAAYgpB,EAASxiE,gBAAgB5C,oBAAoBolE,EAAS35E,QAAQW,WAAW,GACzFiqC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe6vB,EAAUp/C,MAAOqgB,GACvCr6B,EAAO+oC,aACLq5C,EAAS35E,QAAQkB,SACb5G,EAAAsgB,SAAS86C,OACTp7D,EAAAsgB,SAAS66C,OACbkkB,EAAS35E,QAAQW,UAAUy0C,aAAa79C,GACxCA,EAAOqpC,eAAe+vB,EAAUp/C,MAAOooE,EAAS35E,QAAQ6pD,iBAE1DtyD,EAAO+oC,aACLq5C,EAAS35E,QAAQkB,SACb5G,EAAAsgB,SAASuB,MACT7hB,EAAAsgB,SAASqB,MACb1kB,EAAOqpC,eAAe+vB,EAAUp/C,MAAOooE,EAAS35E,QAAQ6pD,gBACxD8vB,EAAS35E,QAAQW,UAAUy0C,aAAa79C,KAG5C,MAEF,OACMo5D,EAAYgpB,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKI,KAAK,GACvEuqC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe6vB,EAAUp/C,MAAOqgB,GACvCr6B,EAAO+oC,aAAahmC,EAAAsgB,SAAS86C,OAC3Bn+D,EAAOooC,UAAU,EAAG,GACpBpoC,EAAOqpC,eAAe+vB,EAAUp/C,MAAK,IAEvCha,EAAO+oC,aAAahmC,EAAAsgB,SAASuB,MAC3B5kB,EAAOqpC,eAAe+vB,EAAUp/C,MAAK,GACrCha,EAAOooC,UAAU,EAAG,KAGxB,MAEF,OACE,GAAIg6C,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,OACA,OACA,OACA,OACA,QACEmG,EAAMhZ,EACN,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQw8D,OAAQ1oD,GACzC,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQy8D,OAAQ3oD,GACzC,MAEF,QACEgZ,EAAMrzC,EAAOktC,oBACb,MAEF,QACEk1C,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KAGzD,OADA+wB,EAAO8nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIk5C,EAAShyB,YAAW,KAC3DgyB,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OACE,IAAIuR,EAAO8lE,EAASxiE,gBAAgBtD,KAChC2mE,EAAab,EAASxiE,gBAAgBnD,aACxC2lE,EAAShyB,aACR9zC,EAAK+F,YAAYgY,EAAM+nD,EAAShyB,cAE/B8yB,EAAad,EAASxiE,gBAAgB5C,oBACxColE,EAAShyB,aACR9zC,EAAK+F,YAAYiY,EAAM8nD,EAAShyB,cAEnCgyB,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aAAahmC,EAAAsgB,SAASqB,MAC3B1kB,EAAOqpC,eAAe45C,EAAWjpE,MAAK,GACtCha,EAAOqpC,eAAe65C,EAAWlpE,MAAK,KAG1C,MAEF,OACA,OACA,OACA,QACMsC,EAAO8lE,EAASxiE,gBAAgBtD,KAChC2mE,EAAab,EAASxiE,gBAAgBnD,aACxC2lE,EAAShyB,aACR9zC,EAAK+F,YAAYgY,EAAM+nD,EAAShyB,cAE/B8yB,EAAad,EAASxiE,gBAAgB5C,oBACxColE,EAAShyB,aACR9zC,EAAK+F,YAAYiY,EAAM8nD,EAAShyB,cAEnCgyB,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aAAahmC,EAAAsgB,SAASsB,MAC3B3kB,EAAOqpC,eAAe45C,EAAWjpE,MAAK,GACtCha,EAAOqpC,eAAe65C,EAAWlpE,MAAK,KAG1C,MAEF,OACMipE,EAAab,EAASxiE,gBAAgBnD,aAAa5Z,EAAA6F,KAAKI,KAAK,GAC7Do6E,EAAad,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKI,KAAK,GACxEs5E,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aAAahmC,EAAAsgB,SAASuB,MAC3B5kB,EAAOqpC,eAAe45C,EAAWjpE,MAAK,GACtCha,EAAOqpC,eAAe65C,EAAWlpE,MAAK,KAG1C,MAEF,OACMipE,EAAab,EAASxiE,gBAAgBnD,aAAa5Z,EAAA6F,KAAKI,KAAK,GAC7Do6E,EAAad,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKI,KAAK,GACxEs5E,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aAAahmC,EAAAsgB,SAASwB,MAC3B7kB,EAAOqpC,eAAe45C,EAAWjpE,MAAK,GACtCha,EAAOqpC,eAAe65C,EAAWlpE,MAAK,KAG1C,MAEF,OACMipE,EAAab,EAASxiE,gBAAgBnD,aAAa2lE,EAAS35E,QAAQW,WAAW,GAC/E85E,EAAad,EAASxiE,gBAAgB5C,oBAAoBolE,EAAS35E,QAAQW,WAAW,GAC1Fg5E,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aACLq5C,EAAS35E,QAAQkB,SACb5G,EAAAsgB,SAASuB,MACT7hB,EAAAsgB,SAASqB,MACb1kB,EAAOqpC,eAAe45C,EAAWjpE,MAAOooE,EAAS35E,QAAQ6pD,gBACzDtyD,EAAOqpC,eAAe65C,EAAWlpE,MAAOooE,EAAS35E,QAAQ6pD,kBAG7D,MAEF,OACE,GAAI8vB,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAEE+1C,EAAab,EAASxiE,gBAAgBnD,aAAa2lE,EAAS35E,QAAQW,WAAW,GAC/E85E,EAAad,EAASxiE,gBAAgB5C,oBAAoBolE,EAAS35E,QAAQW,WAAW,GAC1Fg5E,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aACLq5C,EAAS35E,QAAQkB,SACb5G,EAAAsgB,SAASwB,MACT9hB,EAAAsgB,SAASsB,MACb3kB,EAAOqpC,eAAe45C,EAAWjpE,MAAOooE,EAAS35E,QAAQ6pD,gBACzDtyD,EAAOqpC,eAAe65C,EAAWlpE,MAAOooE,EAAS35E,QAAQ6pD,kBAG7D,MAEF,QACEjf,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAAS8/D,OAAQ9oD,EAAMC,GACjD,MAEF,QACE+Y,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAAS+/D,OAAQ/oD,EAAMC,GACjD,MAEF,QACE8nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KAGzD,OADA+wB,EAAO8nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIk5C,EAAShyB,YAAW,KAC3DgyB,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OACMuR,EAAO8lE,EAASxiE,gBAAgBtD,KAChC2mE,EAAab,EAASxiE,gBAAgBnD,aACxC2lE,EAAShyB,aACR9zC,EAAK+F,YAAYgY,EAAM+nD,EAAShyB,cAE/B8yB,EAAad,EAASxiE,gBAAgB5C,oBACxColE,EAAShyB,aACR9zC,EAAK+F,YAAYiY,EAAM8nD,EAAShyB,cAEnCgyB,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aAAahmC,EAAAsgB,SAASS,MAC3B9jB,EAAOqpC,eAAe45C,EAAWjpE,MAAK,GACtCha,EAAOqpC,eAAe65C,EAAWlpE,MAAK,KAG1C,MAEF,OACA,OACA,OACA,QACMsC,EAAO8lE,EAASxiE,gBAAgBtD,KAChC2mE,EAAab,EAASxiE,gBAAgBnD,aACxC2lE,EAAShyB,aACR9zC,EAAK+F,YAAYgY,EAAM+nD,EAAShyB,cAE/B8yB,EAAad,EAASxiE,gBAAgB5C,oBACxColE,EAAShyB,aACR9zC,EAAK+F,YAAYiY,EAAM8nD,EAAShyB,cAEnCgyB,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aAAahmC,EAAAsgB,SAASU,MAC3B/jB,EAAOqpC,eAAe45C,EAAWjpE,MAAK,GACtCha,EAAOqpC,eAAe65C,EAAWlpE,MAAK,KAG1C,MAEF,OACMipE,EAAab,EAASxiE,gBAAgBnD,aAAa5Z,EAAA6F,KAAKI,KAAK,GAC7Do6E,EAAad,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKI,KAAK,GACxEs5E,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aAAahmC,EAAAsgB,SAASW,MAC3BhkB,EAAOqpC,eAAe45C,EAAWjpE,MAAK,GACtCha,EAAOqpC,eAAe65C,EAAWlpE,MAAK,KAG1C,MAEF,OACMipE,EAAab,EAASxiE,gBAAgBnD,aAAa5Z,EAAA6F,KAAKI,KAAK,GAC7Do6E,EAAad,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKI,KAAK,GACxEs5E,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aAAahmC,EAAAsgB,SAASY,MAC3BjkB,EAAOqpC,eAAe45C,EAAWjpE,MAAK,GACtCha,EAAOqpC,eAAe65C,EAAWlpE,MAAK,KAG1C,MAEF,OACMipE,EAAab,EAASxiE,gBAAgBnD,aAAa2lE,EAAS35E,QAAQW,WAAW,GAC/E85E,EAAad,EAASxiE,gBAAgB5C,oBAAoBolE,EAAS35E,QAAQW,WAAW,GAC1Fg5E,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aACLq5C,EAAS35E,QAAQkB,SACb5G,EAAAsgB,SAASW,MACTjhB,EAAAsgB,SAASS,MACb9jB,EAAOqpC,eAAe45C,EAAWjpE,MAAOooE,EAAS35E,QAAQ6pD,gBACzDtyD,EAAOqpC,eAAe65C,EAAWlpE,MAAOooE,EAAS35E,QAAQ6pD,kBAG7D,MAEF,OACE,GAAI8vB,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAEE+1C,EAAab,EAASxiE,gBAAgBnD,aAAa2lE,EAAS35E,QAAQW,WAAW,GAC/E85E,EAAad,EAASxiE,gBAAgB5C,oBAAoBolE,EAAS35E,QAAQW,WAAW,GAC1Fg5E,EAASxiE,gBAAgB7C,cAAckmE,GACvC5vC,EAAMrzC,EAAOssC,aACXtsC,EAAOupC,eAAe05C,EAAWjpE,MAAOqgB,GACxCr6B,EAAOupC,eAAe25C,EAAWlpE,MAAOsgB,GACxCt6B,EAAO+oC,aACLq5C,EAAS35E,QAAQkB,SACb5G,EAAAsgB,SAASY,MACTlhB,EAAAsgB,SAASU,MACb/jB,EAAOqpC,eAAe45C,EAAWjpE,MAAOooE,EAAS35E,QAAQ6pD,gBACzDtyD,EAAOqpC,eAAe65C,EAAWlpE,MAAOooE,EAAS35E,QAAQ6pD,kBAG7D,MAEF,QACEjf,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAASggE,OAAQhpD,EAAMC,GACjD,MAEF,QACE+Y,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAASigE,OAAQjpD,EAAMC,GACjD,MAEF,QACE8nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KAEzD,OAAQ64E,EAAShyB,YAAYrlD,MAC3B,OACE,GAAIq3E,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,QACEmG,EAAMhZ,EACN,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQg9D,QAASlpD,GAC1C,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQi9D,QAASnpD,GAC1C,MAEF,QACE+nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KAEzD,OAAQ64E,EAAShyB,YAAYrlD,MAC3B,OACE,GAAIq3E,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,QACEmG,EAAMhZ,EACN,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQk9D,SAAUppD,GAC3C,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQm9D,SAAUrpD,GAC3C,MAEF,QACE+nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,WACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KAGzD,OADA+wB,EAAO8nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIk5C,EAAShyB,YAAW,KAC3DgyB,EAAShyB,YAAYrlD,MAC3B,QACEsoC,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAASsgE,YAAatpD,EAAMC,GACtD,MAEF,QACE+Y,EAAMrzC,EAAO+oC,aAAahmC,EAAAsgB,SAASugE,YAAavpD,EAAMC,GACtD,MAEF,QACE8nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,UACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KAEzD,OAAQ64E,EAAShyB,YAAYrlD,MAC3B,OACE,GAAIq3E,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,QACEmG,EAAMhZ,EACN,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQs9D,WAAYxpD,GAC7C,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQu9D,WAAYzpD,GAC7C,MAEF,QACE+nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,cACH,GAAuB,GAAnBnK,EAASzlC,OAYX,OAXM4a,GAAyC,GAAxBA,EAAc5a,SAC/B4a,GAAiBA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAChF+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,MAG/E8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,IAAM7uB,GAAyC,GAAxBA,EAAc5a,OAMnC,OALI4a,GAAiBA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAChF+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAEtEtR,EAAOktC,oBAEhB,OAAQ7uB,EAAc,GAAGtT,MACvB,OACA,OACEsvB,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKY,IAAG,KACvD+pC,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQw9D,eAAgB1pD,GACjD,MAEF,OACA,OACEA,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KACvD8pC,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQy9D,eAAgB3pD,GACjD,MAEF,OACE,GAAIhc,EAAc,GAAGjO,GAAE,KAMrB,OALAgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbs1E,EAAShyB,YAAc/xC,EAAc,GAC9Bre,EAAOktC,oBAIlB,OACE7S,EAAO+nD,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQkB,SACb9G,EAAA6F,KAAKa,IACL1G,EAAA6F,KAAKY,IAAG,KAId+pC,EAAMrzC,EAAO4oC,YACXw5C,EAAS35E,QAAQkB,SACb5G,EAAAwjB,QAAQy9D,eACRjhF,EAAAwjB,QAAQw9D,eACZ1pD,GAEF,MAEF,QACEA,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,KACvDwqC,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ09D,eAAgB5pD,GACjD,MAEF,QACEA,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKI,IAAG,KACvDuqC,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ29D,eAAgB7pD,GACjD,MAEF,QACE+nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAKjB,OADAk1C,EAAShyB,YAAc/xC,EAAc,GAC9Bg1B,EAET,IAAK,OACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KAEzD,OAAQ64E,EAAShyB,YAAYrlD,MAC3B,QACEsoC,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ49D,QAAS9pD,GAC1C,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ69D,QAAS/pD,GAC1C,MAGF,QACE+nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBnK,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,GAAiBA,EAAc5a,OAAQ,CAEzC,GADA2+E,EAAShyB,YAAc/xC,EAAc,GACT,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKa,IAAG,KAEzD,OAAQ64E,EAAShyB,YAAYrlD,MAC3B,OACE,GAAIq3E,EAAShyB,YAAYhgD,GAAE,KAAuB,CAChDgyE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBACb,MAIJ,QACEmG,EAAMhZ,EACN,MAGF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ89D,SAAUhqD,GAC3C,MAEF,QACEgZ,EAAMrzC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQ+9D,SAAUjqD,GAC3C,MAEF,QACE+nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAKT,IAAK,OACH,OAAInK,EAASzlC,OAAS,GAAKylC,EAASzlC,OAAS,GACrC4a,GAAyC,GAAxBA,EAAc5a,QACnC2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAG3E43B,EAASzlC,OAAS,EACpB2+E,EAASz1E,MACP/J,EAAAgK,eAAe81D,wCACf1P,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAGlD8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAG7CtR,EAAOktC,qBAEV7uB,GAAyC,GAAxBA,EAAc5a,QAQrC42B,EAAO+nD,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQW,UAAS,MAIxBk9B,EAA4B,GAAnB4C,EAASzlC,OAAc8gF,EAAuBnC,EAAUl5C,EAAS,IAAM,GACvE,EACJlpC,EAAOktC,qBAEhBk1C,EAAShyB,YAAc/xC,EAAc,GAC9Bre,EAAO2pC,WACZtrB,EAAc,GAAGnO,SACjBmO,EAAc,GAAGjO,GAAG,GACpBiqB,EACAhc,EAAc,GAAGjO,GAAE,IACnBqqD,EAAerqD,GAAE,IACjBqqD,EAAe10C,KAAO1H,EAAc,GAAG0H,MAClCq8D,EAAShyB,YAAcqK,GAAgB79C,gBACvCwlE,EAAShyB,YAAc/xC,EAAc,IAAIzB,eAC9C0pB,MA3BIjoB,GAAiBA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAChF+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAEtEtR,EAAOktC,qBAyBlB,IAAK,QAEH,GADAk1C,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KACxB0/B,EAASzlC,OAAS,GAAKylC,EAASzlC,OAAS,EAkB3C,OAjBM4a,GAAyC,GAAxBA,EAAc5a,QACnC2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAG3E43B,EAASzlC,OAAS,EACpB2+E,EAASz1E,MACP/J,EAAAgK,eAAe81D,wCACf1P,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAGlD8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAG7CtR,EAAOktC,oBAEhB,IAAM7uB,GAAyC,GAAxBA,EAAc5a,OAKnC,OAJA2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAEtEtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQW,UAAS,KAI5BkxB,EAAO8nD,EAAS1tB,kBACdxrB,EAAS,GACT7qB,EAAc,GACdA,EAAc,GAAGjO,GAAE,GAChB,EACA,EAAwB,GAGzBhB,OAAI,EAoBR,OAlBEiP,EAAc,GAAGjO,GAAE,MAEhBgyE,EAAShyB,YAAYhgD,GAAE,IACxBgyE,EAAShyB,YAAYrqC,KAAO1H,EAAc,GAAG0H,OAG/CuU,EAAO8nD,EAAStmB,kBACdxhC,EACA8nD,EAAShyB,YAAa/xC,EAAc,GAAE,IAGtC6qB,EAAS,IAEX95B,EAAOiP,EAAc,IAErBjP,EAAOgzE,EAAShyB,aAEd9pB,EAA4B,GAAnB4C,EAASzlC,OAAc8gF,EAAuBnC,EAAUl5C,EAAS,IAAM,GACvE,EACJlpC,EAAOktC,qBAEhBk1C,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KACrBxJ,EAAOgqC,YAAY3rB,EAAc,GAAGnO,SAAUmqB,EAAMC,EAAMlrB,EAAKwN,eAAgB0pB,IAExF,IAAK,SAEH,GADA87C,EAAShyB,YAAcgyB,EAAS35E,QAAQW,UACjB,GAAnB8/B,EAASzlC,OAWX,OAVM4a,GAAyC,GAAxBA,EAAc5a,QACnC2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAG/E8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEV7uB,GAAyC,GAAxBA,EAAc5a,QACnC2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAG/E,IAAIpB,EAAoBmO,EAAe,GAAGnO,SAkB1C,OAjBIkyE,EAAS35E,QAAQkB,SAEf8wD,EAAerqD,GAAE,IAAuBqqD,EAAe10C,MAAQ,IACjEq8D,EAAShyB,YAAcvtD,EAAA6F,KAAKQ,IAC5BmqC,EAAMrzC,EAAOgoC,UAAU93B,IAEvBmjC,EAAMrzC,EAAOooC,UAAUl4B,EAAU,GAI/BuqD,EAAerqD,GAAE,IAA8C,IAAvBqqD,EAAe10C,MACzDq8D,EAAShyB,YAAcvtD,EAAA6F,KAAKS,IAC5BkqC,EAAMrzC,EAAOooC,UAAUl4B,EAAU,IAEjCmjC,EAAMrzC,EAAOgoC,UAAU93B,GAGpBmjC,EAET,IAAK,UAEH,GADA+uC,EAAShyB,YAAcgyB,EAAS35E,QAAQW,UACjB,GAAnB8/B,EAASzlC,OAWX,OAVM4a,GAAyC,GAAxBA,EAAc5a,QACnC2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAG/E8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,IAAM7uB,GAAyC,GAAxBA,EAAc5a,OAKnC,OAJA2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAEtEtR,EAAOktC,oBAEhB,IACIs3C,OAAS,EACb,OAFIt0E,EAAoBmO,EAAe,GAAGnO,UAGxC,KAAK,EAAKs0E,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,QAA0B,OAAfhhF,QAAO,GAAexD,EAAOktC,oBAmB1C,OAjBIk1C,EAAS35E,QAAQkB,SAEf8wD,EAAerqD,GAAE,IAAuBqqD,EAAe10C,MAAQ,IACjEq8D,EAAShyB,YAAcvtD,EAAA6F,KAAKQ,IAC5BmqC,EAAMrzC,EAAOgoC,UAAUw8C,IAEvBnxC,EAAMrzC,EAAOooC,UAAUo8C,EAAW,GAIhC/pB,EAAerqD,GAAE,IAA8C,IAAvBqqD,EAAe10C,MACzDq8D,EAAShyB,YAAcvtD,EAAA6F,KAAKS,IAC5BkqC,EAAMrzC,EAAOooC,UAAUo8C,EAAW,IAElCnxC,EAAMrzC,EAAOgoC,UAAUw8C,GAGpBnxC,EAET,IAAK,WAEH,GADA+uC,EAAShyB,YAAcgyB,EAAS35E,QAAQW,UACpC8/B,EAASzlC,OAAS,EAWpB,OAVM4a,GAAyC,GAAxBA,EAAc5a,QACnC2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAG/E8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,IAAM7uB,GAAyC,GAAxBA,EAAc5a,OAKnC,OAJA2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAEtEtR,EAAOktC,oBAEhB,IAAIkQ,EACJ,KADIA,EAAY/+B,EAAc,GAAGs+B,gBAM/B,OAJAylC,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEN9M,EAAOktC,oBAEhB,IAAI5G,OAAM,EACV,GAAI4C,EAASzlC,OAAQ,CACnB,GACEylC,EAAS,GAAGn+B,MAAQjI,EAAAkI,SAAS4J,SACTs0B,EAAS,GAAIr0B,aAAe/R,EAAAgS,YAAYC,OAM5D,OAJAqtE,EAASz1E,MACP/J,EAAAgK,eAAeyI,wBACf6zB,EAAS,GAAGp8B,OAEP9M,EAAOktC,oBAEhB,IAAI5tB,EAAsC4pB,EAAS,GAAIvnC,MACnD4d,EAAQ69B,EAAUvtC,QAAUutC,EAAUvtC,QAAQtO,IAAI+d,GAAa,KACnE,IAAMC,GAASA,EAAMxU,MAAQuxC,EAAAv2C,YAAYmY,MAKvC,OAJAkkE,EAASz1E,MACP/J,EAAAgK,eAAe63E,yBACfv7C,EAAS,GAAGp8B,MAAOswC,EAAU1yC,aAAc4U,GAEtCtf,EAAOktC,oBAEhB5G,EAAiB/mB,EAAOpB,kBAExBmoB,EAAS8W,EAAU7+B,oBAErB,OAAI6jE,EAAS35E,QAAQkB,SAEf8wD,EAAerqD,GAAE,IAAuBqqD,EAAe10C,MAAQ,IACjEq8D,EAAShyB,YAAcvtD,EAAA6F,KAAKQ,IACrBlJ,EAAOgoC,UAAU1B,IAEjBtmC,EAAOooC,UAAU9B,GAItBm0B,EAAerqD,GAAE,IAA8C,IAAvBqqD,EAAe10C,MACzDq8D,EAAShyB,YAAcvtD,EAAA6F,KAAKS,IACrBnJ,EAAOooC,UAAU9B,IAEjBtmC,EAAOgoC,UAAU1B,GAO9B,IAAK,SACH,GAAuB,GAAnB4C,EAASzlC,OAcX,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAShuB,4BAA4BlrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,GAE/DuG,EAAOgzE,EAAShyB,YAOpB,OANA91B,EAAO8nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI95B,EAAI,KACnDmrB,EAAO6nD,EAASpqB,cACdoqB,EAAShuB,4BAA4BlrB,EAAS,GAAIrmC,EAAA6F,KAAKW,KAAI,GAC3D+4E,EAAShyB,aAEXgyB,EAAShyB,YAAchhD,EACfgzE,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OACA,OACA,QAIA,QACEsoC,EAAMrzC,EAAOssC,aAAajS,EAAMC,EAAMC,GACtC,MAEF,QACE6nD,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMrzC,EAAOktC,oBAIjB,OAAOmG,EAET,IAAK,cAaH,OAZuB,GAAnBnK,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAGhD+M,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGzB1K,EAAOktC,oBAKhB,IAAK,cAcH,OAbAk1C,EAAShyB,YAAcvtD,EAAA6F,KAAKG,IACL,GAAnBqgC,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAGhD+M,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGzB1K,EAAOipC,WAAWlmC,EAAA2iC,OAAOg/C,eAElC,IAAK,cAiBH,OAhBAtC,EAAShyB,YAAcvtD,EAAA6F,KAAKG,IACL,GAAnBqgC,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD+oB,EAAOr6B,EAAOktC,qBAEd7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,KAErDwV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGzB1K,EAAOipC,WAAWlmC,EAAA2iC,OAAOi/C,WAAY,MAAQtqD,IAGtD,IAAK,cAOH,GANIhc,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,OAMX,OALA2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KACrBxJ,EAAOktC,oBAqBhB,MAnBA7S,EAAO+nD,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQW,UAAS,KAI5BkxB,EAAO8nD,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQW,UAAS,KAI5BmxB,EAAO6nD,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQW,UAAS,KAI5Bg5E,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KACtB,IAAIsF,MAAM,mBAGlB,IAAK,cAOH,GANIuP,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,OAMX,OALA2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KACrBxJ,EAAOktC,oBAqBhB,MAnBA7S,EAAO+nD,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQW,UAAS,KAI5BkxB,EAAO8nD,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKQ,IAAG,KAIVqxB,EAAO6nD,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQW,UAAS,KAI5Bg5E,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KACtB,IAAIsF,MAAM,mBAMlB,IAAK,aACH,OAAMuP,GAAyC,GAAxBA,EAAc5a,OAQd,GAAnBylC,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAc/xC,EAAc,GAC9Bre,EAAOktC,sBAEhB7S,EAAO+nD,EAAShuB,4BACdlrB,EAAS,GACT7qB,EAAc,GAAE,GAGlB+jE,EAAShyB,YAAc/xC,EAAc,GACjC+jE,EAAShyB,YAAYrqC,MAAQ1H,EAAc,GAAG0H,MAChDq8D,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEN9M,EAAOktC,qBAIT7S,IA9BDhc,GAAiBA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAChF+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAEtEtR,EAAOktC,qBA2BlB,IAAK,SACH,GAAIhE,EAASzlC,OAAS,GAAKylC,EAASzlC,OAAS,EAqB3C,OApBI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,GAAGu+B,iBACtC,GAAxBv+B,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAIvD43B,EAASzlC,OAAS,EACpB2+E,EAASz1E,MACP/J,EAAAgK,eAAe81D,wCACf1P,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAEzC43B,EAASzlC,OAAS,GAC3B2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAG7CtR,EAAOktC,oBAEhB,GAAI7uB,EAAe,CAEjB,GADIA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,GAAGu+B,iBACtC,GAAxBv+B,EAAc5a,OAKhB,OAJA2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhB7S,EAAO+nD,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,UAE/Dgc,EAAO+nD,EAAShuB,4BAA4BlrB,EAAS,GAAIrmC,EAAA6F,KAAKW,KAAI,GAGhE+F,EAAOgzE,EAAShyB,YAIpB,GAHAgyB,EAAShyB,YAAchhD,EAAKwtC,gBAGxBwlC,EAAS35E,QAAQoB,SACnB,OAAI4wD,GAAkB53D,EAAA6F,KAAKc,MACzB44E,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KACrBxJ,EAAOksC,aAET7R,EAGT,IAAIuqD,EAAQ3qB,EAAamoB,EAA6B,GAAnBl5C,EAASzlC,OAAcylC,EAAS,GAAK,KAAM8pB,GAI9E,GAFAovB,EAAShyB,YAAchhD,EAAKwtC,gBAExB6d,GAAkB53D,EAAA6F,KAAKc,KAAM,CAC/B,OAAQ44E,EAAShyB,YAAYrlD,MAC3B,QACEsoC,EAAMrzC,EAAOgsC,SACXhsC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQC,OACzB6T,GAEFuqD,GAEF,MAEF,OACA,OACEvxC,EAAMrzC,EAAOgsC,SACXhsC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQE,OACzB4T,GAEFuqD,GAEF,MAEF,OACA,OACEvxC,EAAMrzC,EAAOgsC,SACXhsC,EAAO4oC,YACLw5C,EAAS35E,QAAQkB,SACb5G,EAAAwjB,QAAQE,OACR1jB,EAAAwjB,QAAQC,OACZ6T,GAEFuqD,GAEF,MAGF,QACEvxC,EAAMrzC,EAAOgsC,SACXhsC,EAAO+oC,aAAahmC,EAAAsgB,SAASG,MAC3B6W,EACAr6B,EAAOwoC,UAAU,IAEnBo8C,GAEF,MAEF,QACEvxC,EAAMrzC,EAAOgsC,SACXhsC,EAAO+oC,aAAahmC,EAAAsgB,SAASI,MAC3B4W,EACAr6B,EAAO0oC,UAAU,IAEnBk8C,GAEF,MAEF,QACExC,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMuxC,EAIVxC,EAAShyB,YAAcvtD,EAAA6F,KAAKc,UAE5B,OAAQ44E,EAAShyB,YAAYrlD,MAC3B,OACA,OACA,OACA,OACA,QACMuR,EAAO8lE,EAASxiE,gBAAgBtD,KAChC88C,EAAYgpB,EAASxiE,gBAAgB5C,oBACvColE,EAAShyB,aACR9zC,EAAK+F,YAAYgY,EAAM+nD,EAAShyB,cAEnC/c,EAAMrzC,EAAOgsC,SACXhsC,EAAOupC,eAAe6vB,EAAUp/C,MAAOqgB,GACvCr6B,EAAOqpC,eAAe+vB,EAAUp/C,MAAK,GACrC4qE,GAEF,MAEF,OACA,OACA,QACMxrB,EAAYgpB,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKG,KAAK,GACvEwqC,EAAMrzC,EAAOgsC,SACXhsC,EAAOupC,eAAe6vB,EAAUp/C,MAAOqgB,GACvCr6B,EAAOqpC,eAAe+vB,EAAUp/C,MAAK,GACrC4qE,GAEF,MAEF,OACA,OACMxrB,EAAYgpB,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKI,KAAK,GACvEuqC,EAAMrzC,EAAOgsC,SACXhsC,EAAO4oC,YAAY7lC,EAAAwjB,QAAQE,OACzBzmB,EAAOupC,eAAe6vB,EAAUp/C,MAAOqgB,IAEzCuqD,EACA5kF,EAAOqpC,eAAe+vB,EAAUp/C,MAAK,IAEvC,MAEF,OACA,OACMo/C,EAAYgpB,EAASxiE,gBAAgB5C,oBAAoBolE,EAAS35E,QAAQW,WAAW,GACzFiqC,EAAMrzC,EAAOgsC,SACXhsC,EAAO4oC,YACLw5C,EAAS35E,QAAQkB,SACb5G,EAAAwjB,QAAQE,OACR1jB,EAAAwjB,QAAQC,OACZxmB,EAAOupC,eAAe6vB,EAAUp/C,MAAOqgB,IAEzCuqD,EACA5kF,EAAOqpC,eAAe+vB,EAAUp/C,MAAOooE,EAAS35E,QAAQ6pD,iBAE1D,MAEF,QACM8G,EAAYgpB,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKY,KAAK,GACvE+pC,EAAMrzC,EAAOgsC,SACXhsC,EAAO+oC,aAAahmC,EAAAsgB,SAASG,MAC3BxjB,EAAOupC,eAAe6vB,EAAUp/C,MAAOqgB,GACvCr6B,EAAOwoC,UAAU,IAEnBo8C,EACA5kF,EAAOqpC,eAAe+vB,EAAUp/C,MAAK,IAEvC,MAEF,QACMo/C,EAAYgpB,EAASxiE,gBAAgB5C,oBAAoBna,EAAA6F,KAAKa,KAAK,GACvE8pC,EAAMrzC,EAAOgsC,SACXhsC,EAAO+oC,aAAahmC,EAAAsgB,SAASI,MAC3BzjB,EAAOupC,eAAe6vB,EAAUp/C,MAAOqgB,GACvCr6B,EAAO0oC,UAAU,IAEnBk8C,EACA5kF,EAAOqpC,eAAe+vB,EAAUp/C,MAAK,IAEvC,MAEF,QACEooE,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEbumC,EAAMuxC,EAKZ,OAAOvxC,EAET,IAAK,YAOH,OANIh1B,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,uBAEZ5wB,EAAO8lE,EAASxiE,gBAAgBtD,MAC/B7R,IAAG,MACR4oC,EAAM+uC,EAAShuB,4BAA4BlrB,EAAS,GAAIuxB,EAAc,GACtEn+C,EAAK6D,MAAK,MACHkzB,GAET,IAAK,gBACH,GAAInK,EAASzlC,OAAS,EAcpB,OAbI4a,IACEA,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IACnC,GAAxBA,EAAc5a,QAChB2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,MAI3D8wE,EAASz1E,MACP/J,EAAAgK,eAAe81D,wCACf1P,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3CtR,EAAOktC,oBAEhB,IAAIj9B,OAAU,EACd,GAAIoO,EAAe,CACjB,GAA4B,GAAxBA,EAAc5a,OAMhB,OALI4a,EAAc5a,SAAQ2+E,EAAShyB,YAAc/xC,EAAc,IAC/D+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhDtR,EAAOktC,oBAEhBj9B,EAAaoO,EAAc,QAE3BpO,EAAawqD,EAGf,GADApgC,EAAO+nD,EAAShuB,4BAA4BlrB,EAAS,GAAIrmC,EAAA6F,KAAKQ,IAAG,GACpC,GAAzBk5E,EAAShyB,YAAYrlD,KAKvB,OAJAq3E,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfk0B,EAAS,GAAGp8B,OAEP9M,EAAOktC,oBAOhB,IALA,IAAIs3B,EAAct7B,EAASzlC,OAAS,EAChCohF,EAAe,IAAI16E,MAAqBq6D,GACxCsgB,EAAiB,IAAI36E,MAAcq6D,EAAc,GACjDxD,EAAmB/wD,EAAW2M,eAC9BmoE,EAAmB,IAAI56E,MAAkBq6D,GACpC9jE,EAAI,EAAGA,EAAI8jE,IAAe9jE,EAAG,CACpCmkF,EAAankF,GAAK0hF,EAAShuB,4BAA4BlrB,EAAS,EAAIxoC,GAAImC,EAAA6F,KAAKG,IAAG,GAChF,IAAIm8E,EAAc5C,EAAShyB,YAC3B00B,EAAepkF,GAAKskF,EAAYlnE,oBAChCinE,EAAiBrkF,GAAKskF,EAAYpoE,eAEpCkoE,EAAetgB,GAAev0D,EAAW6N,oBACzC,IAAIkvB,EAAW83C,EAAevyE,KAAK,IAC/By7B,EAAUhuC,EAAO4nC,2BAA2Bo5B,EAAkB+jB,GAKlE,OAJK/2C,IAASA,EAAUhuC,EAAOsnC,gBAAgB0F,EAAUg0B,EAAkB+jB,IAC3E3C,EAAShyB,YAAcngD,EAGhBjQ,EAAO+sC,mBAAmB1S,EAAMwqD,EAAc73C,GAKvD,IAAK,QAKH,OAJAo1C,EAASz1E,MACP/J,EAAAgK,eAAeq4E,eACfjyB,EAAWlmD,OAAQo8B,EAASzlC,OAASylC,EAAS,GAAK8pB,GAAYlmD,MAAMwE,YAEhEtR,EAAOktC,oBAEhB,IAAK,UAKH,OAJAk1C,EAASzmD,QACP/4B,EAAAgK,eAAeq4E,eACfjyB,EAAWlmD,OAAQo8B,EAASzlC,OAASylC,EAAS,GAAK8pB,GAAYlmD,MAAMwE,YAEhEtR,EAAOksC,YAEhB,IAAK,OAKH,OAJAk2C,EAAS1mD,KACP94B,EAAAgK,eAAeq4E,eACfjyB,EAAWlmD,OAAQo8B,EAASzlC,OAASylC,EAAS,GAAK8pB,GAAYlmD,MAAMwE,YAEhEtR,EAAOksC,YAKhB,IAAK,KAOH,OANI7tB,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKC,GACrB3I,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKC,GAAE,KAKX,IAAK,MAOH,OANI0V,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKE,IACrB5I,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKE,IAAG,KAKZ,IAAK,MAOH,OANIyV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKG,IACrB7I,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKG,IAAG,KAKZ,IAAK,MAOH,OANIwV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKI,IACrB9I,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKI,IAAG,KAKZ,IAAK,QAOH,OANIuV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcgyB,EAAS35E,QAAQkB,SACpC9G,EAAA6F,KAAKm0C,QACLh6C,EAAA6F,KAAKo0C,QACF98C,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQkB,SACb9G,EAAA6F,KAAKm0C,QACLh6C,EAAA6F,KAAKo0C,QAAO,KAKpB,IAAK,KAOH,OANIz+B,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKM,GACrBhJ,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKM,GAAE,KAKX,IAAK,MAOH,OANIqV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKO,IACrBjJ,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKO,IAAG,KAKZ,IAAK,MAOH,OANIoV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKQ,IACrBlJ,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKQ,IAAG,KAKZ,IAAK,MAOH,OANImV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKS,IACrBnJ,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKS,IAAG,KAKZ,IAAK,QAOH,OANIkV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcgyB,EAAS35E,QAAQW,UACjCpJ,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTk5C,EAAS35E,QAAQW,UAAS,KAK9B,IAAK,OAOH,OANIiV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKW,KACrBrJ,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKW,KAAI,KAKb,IAAK,MAOH,OANIgV,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKY,IACrBtJ,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKY,IAAG,KAKZ,IAAK,MAOH,OANI+U,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,QACX2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKa,IACrBvJ,EAAOktC,qBAETk1C,EAAS1tB,kBACdxrB,EAAS,GACTrmC,EAAA6F,KAAKa,IAAG,KAQZ,IAAK,eAOH,GANI8U,GACF+jE,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGT,GAAnBw+B,EAASzlC,OAMX,OALA2+E,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAElD8wE,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KACrBxJ,EAAOktC,oBAEhB,IAAIg4C,EAAO9C,EAAShuB,4BAA4BlrB,EAAS,GAAIrmC,EAAA6F,KAAKQ,IAAG,GAEjE8G,GADAZ,EAAOgzE,EAAShyB,aACUpgD,mBAE9B,OADAoyE,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KAEzB4F,EAAKgB,GAAE,MACPJ,GAC2C,GAA5CA,EAAmBD,eAAetM,QAClCuM,EAAmBD,eAAe,IAAMqyE,EAAS35E,QAAQW,WAQ3Dg5E,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KAE5B44E,EAAS1xB,mBAAoB,EACtB1wD,EAAO6sC,WAAW,iBAAmBq4C,GAAM,KAThD9C,EAASz1E,MACP/J,EAAAgK,eAAeynD,mCACfrB,EAAWlmD,MAAOsC,EAAKkC,WAAY,wBAE9BtR,EAAOktC,qBAQpB,IAAI5qB,EAkBN,SACE8/D,EACA9/E,EACA4mC,EACAuxB,EACAzH,GAEA,OAAQ1wD,EAAUoI,cAOhB,IAAK,UAAW,OAAOy6E,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GAC/E,IAAK,UAAW,OAAOmyB,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKI,IAAKogC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GAE/E,IAAK,UAAW,OAAOmyB,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GAC/E,IAAK,UAAW,OAAOmyB,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKI,IAAKogC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GAE/E,IAAK,aAAc,OAAOmyB,EAAS,SAAU/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACrF,IAAK,aAAc,OAAOmyB,EAAS,SAAU/C,EAAUv/E,EAAA6F,KAAKI,IAAKogC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GAErF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACjF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKI,IAAKogC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GAEjF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACjF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKI,IAAKogC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GAEjF,IAAK,UAAW,OAAOmyB,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GAC/E,IAAK,UAAW,OAAOmyB,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAE/E,IAAK,UAAW,OAAOmyB,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GAC/E,IAAK,UAAW,OAAOmyB,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAE/E,IAAK,UAAW,OAAOmyB,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GAC/E,IAAK,UAAW,OAAOmyB,EAAS,MAAO/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAE/E,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GACjF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAEjF,IAAK,YAAa,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GACnF,IAAK,YAAa,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAEnF,IAAK,eAAgB,OAAOmyB,EAAS,WAAY/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GACzF,IAAK,eAAgB,OAAOmyB,EAAS,WAAY/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAEzF,IAAK,cAAe,OAAOmyB,EAAS,UAAW/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GACvF,IAAK,cAAe,OAAOmyB,EAAS,UAAW/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAEvF,IAAK,sBAAuB,OAAOmyB,EAAS,cAAe/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GACnG,IAAK,sBAAuB,OAAOmyB,EAAS,cAAe/C,EAAUv/E,EAAA6F,KAAKI,IAAKogC,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GACnG,IAAK,sBAAuB,OAAOmyB,EAAS,cAAe/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACnG,IAAK,sBAAuB,OAAOmyB,EAAS,cAAe/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GAEnG,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GACjF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAEjF,IAAK,YAAa,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GACnF,IAAK,YAAa,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAEnF,IAAK,cAAe,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKC,GAAIugC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACnF,IAAK,cAAe,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKM,GAAIkgC,EAAUrmC,EAAA6F,KAAKQ,IAAK8pD,GACnF,IAAK,eAAgB,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKE,IAAKsgC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACrF,IAAK,eAAgB,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKO,IAAKigC,EAAUrmC,EAAA6F,KAAKQ,IAAK8pD,GACrF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACjF,IAAK,cAAe,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKC,GAAIugC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GACnF,IAAK,cAAe,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKM,GAAIkgC,EAAUrmC,EAAA6F,KAAKS,IAAK6pD,GACnF,IAAK,eAAgB,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKE,IAAKsgC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GACrF,IAAK,eAAgB,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKO,IAAKigC,EAAUrmC,EAAA6F,KAAKS,IAAK6pD,GACrF,IAAK,eAAgB,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GACrF,IAAK,eAAgB,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKQ,IAAKggC,EAAUrmC,EAAA6F,KAAKS,IAAK6pD,GACrF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKI,IAAKogC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GACjF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GACjF,IAAK,WAAY,OAAOmyB,EAAS,OAAQ/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAEjF,IAAK,aAAc,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKC,GAAIugC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACnF,IAAK,cAAe,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKE,IAAKsgC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACrF,IAAK,YAAa,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKG,IAAKmqD,GACnF,IAAK,aAAc,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKC,GAAIugC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GACnF,IAAK,cAAe,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKE,IAAKsgC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GACrF,IAAK,cAAe,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKG,IAAKqgC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GACrF,IAAK,YAAa,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKI,IAAKogC,EAAUrmC,EAAA6F,KAAKI,IAAKkqD,GACnF,IAAK,YAAa,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKY,IAAK4/B,EAAUrmC,EAAA6F,KAAKY,IAAK0pD,GACnF,IAAK,YAAa,OAAOmyB,EAAS,QAAS/C,EAAUv/E,EAAA6F,KAAKa,IAAK2/B,EAAUrmC,EAAA6F,KAAKa,IAAKypD,GAErF,OAAO,EAxGIoyB,CAAahD,EAAU9/E,EAAW4mC,EAAUuxB,EAAgBzH,GACvE,OAAI1wC,GACEjE,GAAiBA,EAAc5a,QACjC2+E,EAASz1E,MACP/J,EAAAgK,eAAe20D,sBACfvO,EAAWlmD,MAAOxK,EAAUoI,cAGzB4X,IAET8/D,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfg+C,EAAWlmD,OAEN9M,EAAOktC,qBA8FhB,SAASi4C,EACPlkF,EACAmhF,EACAiD,EACAn8C,EACAo8C,EACAtyB,GAEA,IAAI1wD,EAAYkB,OAAO4+E,EAAS1pE,QAAQlS,eAAejF,IAAIN,IAE3D,OADAuC,OAAOlB,EAAUyI,MAAQuxC,EAAAv2C,YAAYsJ,oBAC9BizD,EAAY8f,EAA6B9/E,GAAa+iF,GAAgBn8C,EAAUo8C,EAAWtyB,GAIpG,SAASqvB,EACPD,EACA/jE,EACA6qB,EACA8pB,GAEA,GAAuB,GAAnB9pB,EAASzlC,OACX,OAAK4a,GAAyC,GAAxBA,EAAc5a,OAO7B4a,EAAc,IANnB+jE,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAgBA,EAAc5a,OAAO6N,SAAS,IAAM,KAEtE,MAIX,GAAuB,GAAnB43B,EAASzlC,OAAa,CACxB,GAAI4a,EACF,GAA4B,GAAxBA,EAAc5a,OAChB2+E,EAAS1tB,kBAAkBxrB,EAAS,GAAI7qB,EAAc,GAAE,SACnD,CACL,GAAIA,EAAc5a,OAKhB,OAJA2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAEhD,KAET8wE,EAAShuB,4BAA4BlrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,QAG5Du5E,EAAShuB,4BAA4BlrB,EAAS,GAAIrmC,EAAA6F,KAAKG,IAAG,GAE5D,OAAOu5E,EAAShyB,YAYlB,OAVI/xC,GAAiBA,EAAc5a,OAAS,GAC1C2+E,EAASz1E,MACP/J,EAAAgK,eAAe8lE,oCACf1f,EAAWlmD,MAAO,IAAKuR,EAAc5a,OAAO6N,SAAS,KAGzD8wE,EAASz1E,MACP/J,EAAAgK,eAAe0I,+BACf09C,EAAWlmD,MAAO,IAAKo8B,EAASzlC,OAAO6N,SAAS,KAE3C,KAIT,SAASizE,EAAuBnC,EAAoB52D,GAClD,IAAIlJ,EACA3gB,EA6BJ,OA5BIygF,EAAS35E,QAAQkB,UACnB2Y,EAAO8/D,EAASjwC,qBAAqB3mB,EAAY3oB,EAAA6F,KAAKq0C,QAAO,MAE3Dh6C,EAAAyf,gBAAgBF,IAASvf,EAAA0f,aAAa+C,OACf,GAAvBziB,EAAA8jB,kBAAkBvE,IACY,GAA9Bvf,EAAAozC,qBAAqB7zB,KACpB3gB,EAAQoB,EAAA+jB,oBAAoBxE,IAAS,KAEtC8/D,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEbnL,GAAS,KAGX2gB,EAAO8/D,EAASjwC,qBAAqB3mB,EAAY3oB,EAAA6F,KAAKs0C,QAAO,MAE3Dj6C,EAAAyf,gBAAgBF,IAASvf,EAAA0f,aAAa+C,OACf,GAAvBziB,EAAA8jB,kBAAkBvE,KACjB3gB,EAAQoB,EAAA0iB,iBAAiBnD,IAAS,KAEnC8/D,EAASz1E,MACP/J,EAAAgK,eAAeoI,wBACfwW,EAAW1e,OAEbnL,GAAS,IAGNA,EAwDT,SAAgBs4D,EACdmoB,EACAhoD,EACA44B,GAEA,IAAIt6C,EAAU0pE,EAAS1pE,QACnB1Y,EAASoiF,EAASpiF,OAElBulF,EAAa7sE,EAAQhS,YAAYnF,IAAI,UACzC,IAAKgkF,EAAY,OAAOvlF,EAAOktC,oBAE/B,IAAIhmC,EAAgBwR,EAAQxR,cAC5B,IAAMA,IAAiBk7E,EAAS9sB,gBAAgBpuD,GAAiB,OAAOlH,EAAOktC,oBAEnD,MAAX9S,EACbgoD,EAAS1tB,kBAAkBt6B,EAASmrD,EAAU,KAC9CA,EAAW1nC,aAAa79C,GAEVoiF,EAAS1b,mBAAmB1T,EAAWlmD,MAAM3E,OAAOF,gBAGtE,OADAm6E,EAAShyB,YAAcvtD,EAAA6F,KAAKc,KACrBxJ,EAAOurC,YAAY,MACxBvrC,EAAO6sC,WACL3lC,EAAcwD,gBAKb,GAGH1K,EAAOktC,sBAwDX,SAAgB+5B,EACdmb,EACAlZ,WAEIxwD,EAAU0pE,EAAS1pE,QACvBlV,OAAO0lE,EAAc95D,KAAK6tC,UAAUvkC,IAIlC,IAAI8sE,EAAgBtc,EAAczqD,YAClC,IAA2B,GAAvB+mE,EAA0B,OAAOA,EAIvC,IAAI31E,EAAUq5D,EAAcr5D,QAC5B,GAAIq5D,EAAc5mE,UAAU8J,YAAYU,MAAM3E,OAAOiJ,WACnC,OAAZvB,GAAoBA,EAAQd,IAAI,QAAS,CAC3C,IAAI02E,EAAcjiF,OAAOqM,EAAQtO,IAAI,SACrCiC,OAAOiiF,EAAY16E,MAAQuxC,EAAAv2C,YAAYsJ,oBACvC,IAAIq2E,EAAaliF,OAAOkV,EAAQhR,SAASkI,gBAAmC61E,EAAa,OACzFjiF,OAAOkiF,EAAWt1E,GAAGzN,EAAA6M,YAAYuxC,QAAUp+C,EAAA6M,YAAYkM,WACvDlY,QAAQkiF,EAAWn2E,MAAM5M,EAAA6M,YAAYE,QAAU/M,EAAA6M,YAAYm2E,UAC3DniF,OAAqD,GAA9CkiF,EAAW51E,UAAUC,eAAetM,QAC3CD,OAAOkiF,EAAW51E,UAAUG,YAAcpN,EAAA6F,KAAKc,MAC/Ck8E,EAAWh7E,aAAew+D,EAAcx+D,aAAe,MACvDlH,OAAO4+E,EAAS9sB,gBAAgBowB,IAChC,IAAI1rE,EAAQooE,EAAS1rB,yBAAyBgvB,GAE9C,OADAxc,EAAczqD,YAAczE,EACrBA,EAIX,IAAIha,EAASoiF,EAASpiF,OAClByI,EAAU25E,EAAS35E,QACnB6pD,EAAiB7pD,EAAQ6pD,eACzBszB,EAAiBn9E,EAAQW,UAAU8G,SACnCmiB,EAAO,IAAIloB,MAGfkoB,EAAK7f,KACHxS,EAAOgsC,SACLhsC,EAAO4oC,YACLngC,EAAQkB,SACJ5G,EAAAwjB,QAAQE,OACR1jB,EAAAwjB,QAAQC,OACZxmB,EAAOqpC,eAAe,EAAGipB,IAE3BtyD,EAAOosC,iBAKX,IAAImkB,EAAgB6xB,EAAS7xB,cACzB9xC,EAAc8xC,EAAc9sD,OAChC8sD,EAAc/9C,KAAK,iBACnB02D,EAAczqD,YAAcA,EAG5B,IAAIonE,EAAe3c,EAAc5qD,KAyBjC,GAxBIunE,GACFriF,OAAOqiF,EAAaz2E,KAAK6tC,UAAUvkC,IACnC2Z,EAAK7f,KACHxS,EAAO+sC,mBACL/sC,EAAOgoC,UACLi/B,EAAamb,EAAiByD,EAAaz2E,KAAKutC,kBAGhD38C,EAAOqpC,eAAe,EAAGipB,IAEb,GAAdA,EAAmC,KAAO,QAM9CjgC,EAAK7f,KACHxS,EAAO6sC,WAAWrpC,OAAOkV,EAAQnR,gBAAgBmD,cAC/C1K,EAAOqpC,eAAe,EAAGipB,IAC1B,IAKDziD,MACF,IAAmB,IAAAmM,EAAA7O,EAAA0C,EAAQ4G,UAAQlJ,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAAhC,IAAIQ,EAAMN,EAAA5L,MACb,GAAIkM,EAAO9C,MAAQuxC,EAAAv2C,YAAYmY,MAC7B,GAAYrQ,EAAQd,SAAWm8D,EAE7B,GADmBr7D,EAAQuB,KAClB6tC,UAAUvkC,GAAU,CAC3B,IAAI4tB,EAAiBz4B,EAAQsQ,aAC7B3a,OAAO8iC,GAAU,GACjBjU,EAAK7f,KACHxS,EAAO6sC,WAAWrpC,OAAOkV,EAAQnR,gBAAgBmD,cAC/C1K,EAAO2pC,WACLi8C,GACA,EACA5lF,EAAOqpC,eAAe,EAAGipB,GACzBA,EACAhsB,IAEH,uGASb,IAAIsoC,EAAW1F,EAAcx+D,aAAe,MAQ5C,OAPA1K,EAAOytC,YACLmhC,EACAwT,EAAS/wB,mBAAmB,KAAMxuD,EAAA6F,KAAKc,KAAMf,EAAQW,WACrD,KACApJ,EAAOurC,YAAY,KAAMlZ,IAE3Bk+B,EAAc9xC,GAAemwD,EACtBnwD,EAvgGT1e,EAAAuiE,cAuwFAviE,EAAAipE,gBAAA,SACEoZ,EACAlZ,EACAlW,GAEA,IAAIt6C,EAAU0pE,EAAS1pE,QACvBlV,OAAO0lE,EAAcxwD,SAAWA,GAChC,IAAI1Y,EAASoiF,EAASpiF,OAClByI,EAAU25E,EAAS35E,QAGvB,GAAIiQ,EAAQtR,OAAS8hE,EAAc95D,KAAK6tC,UAAUvkC,GAAU,CAC1D,IAAIotE,EAAmBtiF,OAAOkV,EAAQrR,oBACtC,OAAK+6E,EAAS9sB,gBAAgBwwB,IAC9B1D,EAAShyB,YAAc8Y,EAAc95D,KAC9BpP,EAAO6sC,WACZi5C,EAAiBp7E,cACfjC,EAAQkB,SACJ3J,EAAOooC,UAAU8gC,EAAc3qD,qBAC/Bve,EAAOgoC,UAAUkhC,EAAc3qD,qBACnCve,EAAOgoC,UACLi/B,EAAamb,EAAUlZ,KAG3BzgE,EAAQ6pD,iBAX8CtyD,EAAOktC,oBAiB/D,OADI44C,EAAmBptE,EAAQvR,wBAQ1Bi7E,EAAS9sB,gBAAgBwwB,IAE9B1D,EAAShyB,YAAc8Y,EAAc95D,KAC9BpP,EAAO6sC,WACZi5C,EAAiBp7E,cACfjC,EAAQkB,SACJ3J,EAAOooC,UAAU8gC,EAAc3qD,qBAC/Bve,EAAOgoC,UAAUkhC,EAAc3qD,sBAErC9V,EAAQ6pD,iBAT8CtyD,EAAOktC,qBAN7Dx0B,EAAQ/L,MACN/J,EAAAgK,eAAemB,mBACfilD,EAAWlmD,MAAO,mBAEb9M,EAAOktC,sBAiBpBntC,EAAAk6D,eAoCAl6D,EAAA4xD,oBAAA,SAAoCywB,WAC9BpiF,EAASoiF,EAASpiF,OAClB8kE,EAAQ,IAAI36D,UAEhB,IAAoB,IAAA6R,EAAA7O,EAAAi1E,EAAS1pE,QAAQlS,eAAeiQ,UAAQlJ,EAAAyO,EAAA3O,QAAAE,EAAAD,KAAAC,EAAAyO,EAAA3O,OAAE,CAAzD,IAAIhB,EAAOkB,EAAA5L,MACd,GAAI0K,EAAQtB,MAAQuxC,EAAAv2C,YAAY4L,OAAhC,CACA,IAAI2G,EAAiBjM,EACjBswC,EAAiBrkC,EAAOlJ,KAAKutC,eACjC,GACErkC,EAAOlI,GAAGzN,EAAA6M,YAAY2iD,WACH,OAAnBxV,IACCA,EAAejrC,aAAa4qC,EAAAt2C,eAAekM,WAE5C,GAAIoG,EAAOlI,GAAGzN,EAAA6M,YAAYmK,SAAU,CAClC,IAAIhY,EAAQ2W,EAAOoB,qBACnBorD,EAAMtyD,KACJxS,EAAO+sC,mBACL/sC,EAAOqpC,eAAe,EAAC,IAErB+4C,EAAS35E,QAAQkB,SACb3J,EAAOooC,UAAUgI,QAAQzuC,GAAQ0uC,SAAS1uC,IAC1C3B,EAAOgoC,UAAUoI,QAAQzuC,KAE/B,YAIJmjE,EAAMtyD,KACJxS,EAAO+sC,mBACL/sC,EAAOqpC,eAAe,EAAC,IAErBrpC,EAAOypC,gBACLnxB,EAAO5N,aACP03E,EAAS35E,QAAQ6pD,iBAGrB,0GAMV,IAAItkB,EAAUo0C,EAAS/wB,oBAAqBxuD,EAAA6F,KAAKG,KAAOhG,EAAA6F,KAAKc,MAC7DxJ,EAAOytC,YAAY,gBAAiBO,KAClC82B,EAAMrhE,OACFzD,EAAOurC,YAAY,KAAMu5B,GACzB9kE,EAAOksC,cAKfnsC,EAAAknE,8FC/8FA,SAAkB8e,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkBhmF,EAAAgmF,WAAAhmF,EAAAgmF,cAuIlBhmF,EAAAs7B,YAAA,SAA4Bt6B,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAAwmD,aAAA,SAA6BxlD,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAA8kD,eAAA,SAA+B9jD,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAyoD,aAAA,SAA6BznD,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAimD,kBAAA,SAAkCjlD,GAChC,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACnB,IAADA,GACC,IAADA,GACAA,EAAI,KAiLb,SAAkCo5B,GAChC,QAAOA,EAAO,GAAKA,EAAO,QACnB6rD,EAAmB7rD,EAAa8rD,GAnLpBC,CAAyBnlF,IAI9ChB,EAAAkmD,mBAAA,SAAmCllD,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAAomD,iBAAA,SAAiCplD,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,KAuKb,SAAiCo5B,GAC/B,QAAOA,EAAO,GAAKA,EAAO,QACnB6rD,EAAmB7rD,EAAagsD,GAzKpBC,CAAwBrlF,IAI7C,IAAMklF,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__18__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low,\n  getGetGlobalName\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  AbiInfo\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  getAbiInfo(): AbiInfo {\n    var abiInfo = new AbiInfo(this);\n    return abiInfo;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          // this.warning( // TODO\n          //   DiagnosticCode.Operation_not_supported,\n          //   implementsTypes[i].range\n          // );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is a database */\n  DATABASE = 1 << 9,\n  /** Is a action */\n  ACTION = 1 << 10,\n  /** Is a ignore */\n  IGNORE = 1 << 11\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n    // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n    // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  _internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this._internalName = internalName;\n  }\n\n  static replaceComma(str: string): string {\n    if (!str) return str;\n    var result  =  \"\";\n    for (let ch of str) {\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  get internalName(): string {\n    return Element.replaceComma(this._internalName);\n  }\n\n  set internalName(internalName: string) {\n    this._internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(`duplicate local name: ${name}`);\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.currentFunction.program.elementsLookup.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    // case NodeKind.SUPER: // TODO\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.PARENTHESIZED: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.p: {\n        if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is an arrow function. */\n  ARROW = 1 << 19,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 20,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 21,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      console.log(<string>new Error(\"stack\").stack);\n      throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveGlobal(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration,\n    DecoratorNode,\n    Range,\n    TypeNode\n} from \"../ast\";\n\nimport {\n    ClassPrototype,\n    Program,\n    Element,\n    ElementKind\n} from \"../program\";\n\nimport {\n    Type\n} from \"../types\";\n\nimport {\n    Collections\n} from \"./collectionutil\";\n\nimport {\n    AbiHelper\n} from \"../abi\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param kind The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): bool {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static getSpecifyDecorator(statement: DeclarationStatement, kind: DecoratorKind): DecoratorNode | null {\n        if (statement.decorators) {\n            for (let decorator of statement.decorators) {\n                if (decorator.decoratorKind == kind) {\n                    return decorator;\n                }\n            }\n        }\n        return null;\n    }\n\n    static isString(typeName: string): bool {\n        return \"string\" == typeName || \"String\" == typeName;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName.replace(\",\", \"_\");\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getArrayTypeArgument(declareType: string): string {\n        assert(AstUtil.isArrayType(declareType));\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Test the declare type whether is array type or not.\n     * @param declareType The declare type\n     */\n    static isArrayType(declareType: string): bool {\n        return declareType == \"[]\" || declareType == \"Array\";\n    }\n\n    /**\n     * Whether the declare type is map\n     * @param declareType the declare type\n     */\n    static isMapType(declareType: string): bool {\n        return declareType == \"Map\" || declareType == \"ArrayMap\";\n    }\n\n    static isArrayMap(declareType: string): bool {\n        return \"ArrayMap\" == declareType;\n    }\n\n    /**\n     * Test the class whether to implement the Serializable interface or not.\n     */\n    static impledSerializable(classPrototype: ClassPrototype | null): bool {\n        if (!classPrototype) {\n            return false;\n        }\n        const interfaceName = \"Serializable\";\n        var havingInterface = AstUtil.impledInterface(classPrototype.declaration, interfaceName);\n        return havingInterface || AstUtil.impledSerializable(classPrototype.basePrototype);\n    }\n\n    /**\n     * Test the class whetherto implement the Returnable interface or not.\n     * @param classDeclaration The class declaration\n     */\n    static impledReturnable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Returnable\";\n        return AstUtil.impledInterface(classDeclaration, interfaceName);\n    }\n\n    private static impledInterface(classDeclaration: ClassDeclaration, interfaceName: string): bool {\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check the classPrototype whther have the contract class.\n     */\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.simpleName == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n    static isClassPrototype(element: Element): bool {\n        return element.kind == ElementKind.CLASS_PROTOTYPE;\n    }\n\n    static isSpecifyElement(element: Element, kind: ElementKind): bool {\n        return element.kind == kind;\n    }\n\n    /**\n     * Get interfaces that class prototype implements.\n     * @param classPrototype classPrototype\n     */\n    static impledInterfaces(classPrototype: ClassPrototype): string[] {\n        var tempClz: ClassPrototype | null = classPrototype;\n        var interfaces: string[] = new Array<string>();\n        while (tempClz != null) {\n            let implTypes = tempClz.declaration.implementsTypes;\n            if (implTypes) {\n                for (let type of implTypes) {\n                    interfaces.push(type.name.range.toString());\n                }\n            }\n            tempClz = tempClz.basePrototype;\n        }\n        return interfaces;\n    }\n\n    static location(range: Range): string {\n        return range.source.normalizedPath +\n            \":\" + range.line.toString(10) +\n            \":\" + range.column.toString(10);\n    }\n\n    static printTypeAliasInfo(program: Program): void {\n\n        var typesLookupKeys = program.typesLookup.keys();\n        for (let key of typesLookupKeys) {\n            let value = program.typesLookup.get(key);\n            if (value) {\n                console.log(`type look up key: ${key}. value: ${value.kind}`);\n            }\n        }\n        var typesAliasKeys = program.typeAliases.keys();\n        for (let key of typesAliasKeys) {\n            let value = program.typeAliases.get(key);\n            if (value) {\n                console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n            }\n        }\n    }\n\n    static printProgramInstances(program: Program): void {\n        var keys = program.instancesLookup.keys();\n        for (let key of keys) {\n            let value = program.instancesLookup.get(key);\n            if (value) {\n                console.log(`instance lookup key:${key}. Kind:${ElementKind[value.kind]}`);\n            }\n        }\n    }\n\n    static printProgramElements(program: Program): void {\n        var elements = program.elementsLookup;\n        for (let [key, element] of elements) {\n            console.log(`Element lookup key:${key}. Kind:${ElementKind[element.kind]}`);\n\n        }\n    }\n\n    static printClassPrototype(program: Program): void {\n        var elements = program.elementsLookup;\n        for (let [key, element] of elements) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classPrototype: ClassPrototype = <ClassPrototype>element;\n                if (classPrototype.instances) {\n                    for (let instance of classPrototype.instances) {\n                        console.log(`class instance: ${instance.toString()}`);\n                    }\n                }\n                if (classPrototype.basePrototype) {\n                    console.log(`Element lookup key:${key}. Base prototype:${classPrototype.basePrototype.simpleName}`);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Abi type enum\n */\nexport enum AbiTypeEnum {\n    NUMBER,\n    STRING,\n    ARRAY,\n    MAP,\n    CLASS\n}\n\ninterface TypeInfo {\n    getAbiTypeEnum(): void;\n    getAbiDeclareType(): string;\n    getArgs(): string[];\n    getSourceType(typeName: string): string;\n}\nexport class TypeNodeAnalyzer {\n\n    program: Program;\n    typeNode: TypeNode;\n    typeName: string;\n    abiType: AbiTypeEnum;\n\n    constructor(program: Program, typeNode: TypeNode) {\n        this.program = program;\n        this.typeNode = typeNode;\n        // Here various clz[]'s type name is clz[], not clz.\n        this.typeName = this.typeNode.name.range.toString();\n    }\n\n    getDeclareType(): string {\n        return this.typeNode.range.toString();\n    }\n\n    isVoid(): bool {\n        return this.typeName == \"void\";\n    }\n\n    get abiTypeEnum(): AbiTypeEnum {\n        var typeName = this.typeName;\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        if (AstUtil.isArrayType(typeName)) {\n            return AbiTypeEnum.ARRAY;\n        }\n        if (AstUtil.isMapType(typeName)) {\n            return AbiTypeEnum.MAP;\n        }\n        var type = this.findSourceAsType(typeName);\n        if (type == null) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isArray(): bool {\n        return this.abiTypeEnum == AbiTypeEnum.ARRAY;\n    }\n\n    getArrayArgAbiTypeEnum(): AbiTypeEnum {\n        var typeName = this.getArgs()[0];\n        if (AstUtil.isString(typeName)) {\n            return AbiTypeEnum.STRING;\n        }\n        var type = this.findSourceAsType(typeName);\n        if (type == null) {\n            return AbiTypeEnum.CLASS;\n        }\n        return AbiTypeEnum.NUMBER;\n    }\n\n    isPrimaryType(): bool {\n        if (this.abiTypeEnum == AbiTypeEnum.NUMBER) {\n            return this.findSourceAsTypeName(this.typeName) == \"u64\";\n        }\n        return false;\n    }\n\n    getArrayArg(): string {\n        if (this.typeNode.typeArguments) {\n            return this.typeNode.typeArguments[0].range.toString();\n        }\n        throw new Error(`The typenode is not array:${this.typeName}.`\n            + ` Location in ${AstUtil.location(this.typeNode.range)}`);\n    }\n\n    getAbiDeclareType(): string {\n        var abiType = this.abiTypeEnum;\n        var typeName = this.typeNode.name.range.toString();\n        switch (abiType) {\n            case AbiTypeEnum.STRING: {\n                return \"string\";\n            }\n            case AbiTypeEnum.NUMBER:\n            case AbiTypeEnum.CLASS: {\n                return typeName;\n            }\n            case AbiTypeEnum.ARRAY: {\n                return `${this.getArgs()[0]}[]`;\n            }\n            case AbiTypeEnum.MAP: {\n                if (AstUtil.isArrayMap(typeName)) {\n                    return `${this.getArgs().join(\",\")}[]{}`;\n                } else {\n                    return `${this.getArgs().join(\",\")}{}`;\n                }\n            }\n            default: {\n                return typeName;\n            }\n        }\n    }\n\n    private getArgs(): string[] {\n        var args = this.typeNode.typeArguments;\n        var argType = new Array<string>();\n        if (args) {\n            for (let arg of args) {\n                argType.push(arg.range.toString());\n            }\n        }\n        return argType;\n    }\n\n    getAsTypes(): string[] {\n        var args = this.getArgs();\n        if (!Collections.isEmptyArray(args)) {\n            return args;\n        }\n        return [this.typeName];\n    }\n\n    /**\n    * the typename maybe global scope or local scope.\n    * So search the local firtst, then search the global scope.\n    *\n    * @param typeName typename without type arguments\n    */\n    findElement(typeName: string): Element | null {\n        var internalPath = `${this.typeNode.range.source.internalPath}/${typeName}`;\n        var element = this.program.elementsLookup.get(internalPath);\n        return element ? element : this.program.elementsLookup.get(typeName);\n    }\n\n    /**\n     * Get the type {@type Type} by the type name\n     * @param asTypeName the AssemblyScript type name\n     */\n    findSourceAsType(asTypeName: string): Type | null {\n        var sourceTypeName = this.findSourceAsTypeName(asTypeName);\n        var sourceType: Type | null = this.program.typesLookup.get(sourceTypeName);\n        return sourceType;\n    }\n\n    /**\n     * Find the source type name,\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findSourceAsTypeName(\"account_name_alias\") return \"account_name\";\n     */\n    findSourceAsTypeName(typeName: string): string {\n        var typeAlias = this.program.typeAliases.get(typeName);\n        if (typeAlias) {\n            let aliasTypeName = typeAlias.type.range.toString();\n            return this.findSourceAsTypeName(aliasTypeName);\n        }\n        return typeName;\n    }\n\n    findSourceAbiType(typeName: string): string {\n        var abiType: string | null = AbiHelper.abiTypeLookup.get(typeName);\n        if (abiType) {\n            return abiType;\n        }\n        var typeAlias = this.program.typeAliases.get(typeName);\n        if (typeAlias) {\n            let aliasTypeName = typeAlias.type.range.toString();\n            return this.findSourceAbiType(aliasTypeName);\n        }\n        return typeName;\n    }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\nimport { AstUtil } from \"./util/astutil\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(\"HEAP_BASE\");\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    try {\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      // TODO To remove, to support the super();\n      // case NodeKind.SUPER: {\n      //   expr = this.compileNopExpression();\n      //   break;\n      // }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    } catch (exception) {\n      console.log(`Compile expression failed, the location in ${AstUtil.location(expression.range)}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY: {\n        indexArg = this.compileGetter(<Property>target, expression.expression);\n        let type = this.currentType;\n        signature = type.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return flow.is(FlowFlags.RETURNS)\n      ? module.createBlock(returnLabel, body, returnType.toNativeType())\n      : body.length > 1\n        ? module.createBlock(null, body, returnType.toNativeType())\n        : body.length\n          ? body[0]\n          : module.createNop();\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  compileNopExpression(): ExpressionRef {\n    var module = this.module;\n    return module.createNop();\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: {// instance property (here: getter)\n        return this.compileGetter(<Property>target, propertyAccess);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let parent = assert(instance.parent);\n        assert(parent.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = currentFunction.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    currentFunction.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = declaration.programLevelInternalName;\n\n  //change the namespace import method\n  if (declaration.parent && declaration.parent.kind == NodeKind.NAMESPACEDECLARATION) {\n    mangleImportName_moduleName = \"env\";\n    mangleImportName_elementName = declaration.name.range.toString();\n  }\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","import {\n  SerializeInserter,\n  InsertPoint,\n  SuperInserter\n} from \"./inserter\";\n\nimport {\n  Type,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  SignatureNode,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  CommonTypeNode,\n  TypeNode,\n  DecoratorNode,\n  Node\n} from \"./ast\";\n\nimport {\n  AstUtil,\n  TypeNodeAnalyzer,\n  AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n  Strings,\n  AbiUtils,\n  Indenter\n} from \"./util/primitiveutil\";\n\nclass StructDef {\n  name: string;\n  fields: Array<Object> = new Array<Object>();\n  base: string = \"\";\n\n  addField(name: string, type: string): void {\n    this.fields.push({ \"name\": name, \"type\": type });\n  }\n}\n\nexport class AbiAliasDef {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\n/**\n * Contract abi action. This class represents one action structure.\n * The field \"ability\" represents whether action would change the db status.\n * It has two values, normal and pureview.\n * Pureview represents readable action which would not change the db.\n */\nclass ActionDef {\n  name: string;\n  type: string;\n  ability: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string, ability: string = \"normal\") {\n    this.name = name;\n    this.type = type;\n    this.ability = ability;\n  }\n\n  static isValidAbility(ability: string): bool {\n    return ability == \"normal\" || ability == \"pureview\";\n  }\n}\n\nexport class AbiHelper {\n\n  static proposals: Set<string> = new Set<string>([\"UIP09\", \"UIP06\"]);\n\n  /**\n   * Main node support internal abi type\n   * bool\n   */\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"uin32\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"bool\", \"bool\"],\n    [\"boolean\", \"bool\"],\n    [\"string\", \"string\"],\n    [\"String\", \"string\"],\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass TableDef {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType: string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\n/**\n * Abi defination\n */\nclass AbiDef {\n  version: string = \"ultraio:1.0\";\n  types: Array<AbiAliasDef> = new Array<AbiAliasDef>();\n  structs: Array<StructDef> = new Array<StructDef>();\n  actions: Array<ActionDef> = new Array<ActionDef>();\n  tables: Array<TableDef> = new Array<TableDef>();\n}\n\nexport class AbiInfo {\n\n  abiInfo: AbiDef = new AbiDef();\n  dispatch: string;\n  program: Program;\n  abiTypeLookup: Map<string, string> = AbiHelper.abiTypeLookup;\n  typeAliasSet: Set<string> = new Set<string>();\n  structsLookup: Map<string, StructDef> = new Map();\n  elementLookup: Map<string, Element> = new Map();\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n    this.program = program;\n    this.resolve();\n  }\n\n  /**\n   *  Add abi struct for abi info.\n   * @param methodName the method name\n   * @param signature the signature node\n   */\n  parseSignatureToAbiStruct(methodName: string, signature: SignatureNode): StructDef {\n\n    var struct = new StructDef();\n    struct.name = methodName;\n\n    var parameters: ParameterNode[] = signature.parameters;\n    for (let parameter of parameters) {\n      let type: CommonTypeNode = parameter.type;\n      let typeInfo = new TypeNodeAnalyzer(this.program, <TypeNode>type);\n      struct.addField(parameter.name.range.toString(), typeInfo.getAbiDeclareType());\n      this.addAbiTypeAlias(typeInfo);\n    }\n    return struct;\n  }\n\n  addAbiTypeAlias(typeNodeAnalyzer: TypeNodeAnalyzer): void {\n    var asTypes = typeNodeAnalyzer.getAsTypes();\n    for (let asType of asTypes) {\n      if (this.typeAliasSet.has(asType)) {\n        return;\n      }\n      // if the as argument is basic type, get his alias type\n      let abiType = typeNodeAnalyzer.findSourceAbiType(asType);\n      if (abiType && asType != abiType) {\n        this.abiInfo.types.push(new AbiAliasDef(asType, abiType));\n      }\n      // If the as argument is class, convert it to struct\n      let element = typeNodeAnalyzer.findElement(asType);\n      if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let classPrototype = <ClassPrototype>element;\n        this.getStructFromClzPrototype(classPrototype);\n      }\n      this.typeAliasSet.add(asType);\n    }\n  }\n\n  /**\n   * Check that element whether it is functionPrototype\n   */\n  isActionFnPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator\n  */\n  resolveDatabaseDecorator(statement: DeclarationStatement): void {\n    if (!statement.decorators) {\n      return;\n    }\n    for (let decorator of statement.decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length != 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(decorator.arguments[1]);\n        AbiUtils.checkDatabaseName(name);\n        this.abiInfo.tables.push(new TableDef(name, type));\n        this.getStructFromNode(decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value\n   * @param expr\n   */\n  getExprValue(expr: Expression): string {\n    var arg: string = expr.range.toString();\n    if (Strings.isAroundQuotation(arg)) {\n      return arg.substring(1, arg.length - 1);\n    }\n    var internalName = AstUtil.getInternalName(expr);\n    var element: Element | null = this.program.elementsLookup.get(internalName);\n    if (element) {\n      let declaration: VariableLikeDeclarationStatement | null = (<VariableLikeElement>element).declaration;\n      if (declaration && declaration.initializer) {\n        let literal: StringLiteralExpression = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Can't find constant ${internalName}`);\n  }\n\n  getElementFromExpr(expr: Expression): Element {\n    var internalPath = expr.range.source.internalPath;\n    var name = expr.range.toString();\n    var internalName = `${internalPath}/${name}`;\n    var element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    return element;\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  getStructFromNode(node: Node): void {\n    var element = this.getElementFromExpr(node);\n    var classPrototype = <ClassPrototype>element;\n    this.getStructFromClzPrototype(classPrototype);\n  }\n\n  /**\n   * Add the field of the class to the structure\n   * @param classPrototype The class prototype\n   * @param struct The abi structure\n   */\n  addFieldsFromClassPrototype(classPrototype: ClassPrototype, struct: StructDef): void {\n    var members: DeclarationStatement[] = classPrototype.declaration.members;\n    if (classPrototype.basePrototype && AstUtil.impledSerializable(classPrototype.basePrototype)) {\n      this.addFieldsFromClassPrototype(classPrototype.basePrototype, struct);\n    }\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let memberName = member.name.range.toString();\n        let memberType: CommonTypeNode | null = fieldDeclare.type;\n        if (memberType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.program, <TypeNode>memberType);\n          let abiType = typeNodeAnalyzer.getAbiDeclareType();\n          struct.addField(memberName, abiType);\n          this.addAbiTypeAlias(typeNodeAnalyzer);\n        }\n      }\n    }\n  }\n\n  getStructFromClzPrototype(classPrototype: ClassPrototype): void {\n    if (!this.abiTypeLookup.get(classPrototype.simpleName) && !AstUtil.haveSpecifyDecorator(classPrototype.declaration, DecoratorKind.IGNORE)) {\n      let struct = new StructDef();\n      struct.name = classPrototype.simpleName;\n      this.addFieldsFromClassPrototype(classPrototype, struct);\n      this.addToStruct(struct);\n    }\n  }\n\n  /**\n   * It need to check the struct having fields.\n   * @param struct the struct to add\n   */\n  private addToStruct(struct: StructDef): void {\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`  ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`  if (${contractVarName}.filterAction(code)) {`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        if (this.isActionFnPrototype(instance)) {\n          hasActionDecorators = true;\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          let declaration: FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let params = declaration.signature.parameters; // FunctionDeclaration parameter types\n          let returnType = declaration.signature.returnType;\n\n          AbiUtils.checkActionName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < params.length; index++) {\n            let type: ParameterNode = params[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n            let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.program, <TypeNode>type.type);\n            if (typeNodeAnalyzer.isArray()) {\n              let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n              let argTypeName = typeNodeAnalyzer.getArrayArg();\n              if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${argTypeName}>();`);\n              } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${argTypeName}>();`);\n              }\n            } else {\n              let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n              if (abiTypeEnum == AbiTypeEnum.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n              } else {\n                this.getStructFromNode(type.type);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n\n          let rtnNodeAnly = new TypeNodeAnalyzer(this.program, <TypeNode>returnType);\n          if (rtnNodeAnly.isVoid()) {\n            body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          } else {\n            body.push(`      let result = ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n            let typeName = rtnNodeAnly.isArray() ? rtnNodeAnly.getArrayArg() : rtnNodeAnly.typeName;\n            let element = rtnNodeAnly.findElement(typeName);\n            if (element && AstUtil.isClassPrototype(element)) {\n              let declaration = (<ClassPrototype>element).declaration;\n              if (!AstUtil.impledReturnable(declaration)) {\n                throw new Error(`Class ${typeName} should implement the Returnable interface. Location in ${AstUtil.location(declaration.range)}`);\n              }\n            }\n            if (rtnNodeAnly.isArray()) {\n              body.push(`      ${contractVarName}.returnArray<${rtnNodeAnly.getArrayArg()}>(result);`);\n            } else {\n              body.push(`      ${contractVarName}.returnVal<${rtnNodeAnly.typeName}>(result);`);\n            }\n          }\n          body.push(\"    }\");\n        }\n      }\n      // to support onError\n      body.push(`    if (${contractVarName}.isAction(\"onerror\")) {`);\n      body.push(`        ${contractVarName}.onError();`);\n      body.push(`    }`);\n\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype.declaration);\n      if (hasActionDecorators) {\n        let impledInterfaces = AstUtil.impledInterfaces(clzPrototype);\n        // TODO To enhancement the code to add proprosal field\n        for (let impledInterface of impledInterfaces) {\n          if (AbiHelper.proposals.has(impledInterface)) {\n            // this.abiInfo.proposal = impledInterface;\n            this.abiInfo.version = `${this.abiInfo.version}:${impledInterface}`;\n            break;\n          }\n        }\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  getActionAbility(statement: DeclarationStatement): string {\n    var decoratorNode: DecoratorNode | null = AstUtil.getSpecifyDecorator(statement, DecoratorKind.ACTION);\n    if (!decoratorNode) {\n      throw new Error(`The function havn't action decoreator, location: ${AstUtil.location(statement.range)}.`);\n    }\n    var args: Expression[] | null = decoratorNode.arguments;\n    if (args && args.length > 0) {\n      let arg = this.getExprValue(args[0]);\n      if (!ActionDef.isValidAbility(arg)) {\n        throw new Error(`Invalid action ability arguments: ${arg}, location: ${AstUtil.location(statement.range)}.`);\n      }\n      return arg;\n    }\n    return \"normal\";\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = funcPrototype.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = funcPrototype.declaration.signature;\n    var struct = this.parseSignatureToAbiStruct(funcName, signature);\n    this.addToStruct(struct);\n    this.abiInfo.actions.push(new ActionDef(funcName, funcName, this.getActionAbility(declaration)));\n  }\n\n  private resolve(): void {\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.printInstanceLookupInfo();\n    // this.printClassProtoTypeInfo();\n\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var superInserter: SuperInserter = new SuperInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    var superPoints = superInserter.getInsertPoints();\n    var mergedPoints = serializePoints.concat(superPoints);\n    this.insertPointsLookup = InsertPoint.toSortedMap(mergedPoints);\n\n    var dispatchIndenter = new Indenter();\n    for (let element of this.program.elementsLookup.values()) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          dispatchIndenter.addAll(classDispatch);\n          this.elementLookup.set(clzPrototype.internalName, element);\n        }\n      }\n    }\n\n    // To check the dispatch whether having content or not\n    // if (dispatchIndenter.getContent().length == 0) {\n    //   throw new Error(`The smart contract must specify one action.`);\n    // }\n    this.dispatch = this.assemblyDispatch(dispatchIndenter.getContent());\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n    var dispatchIndenter = new Indenter();\n    dispatchIndenter.add(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n    dispatchIndenter.addAll(body);\n    dispatchIndenter.add(\"}\");\n    return dispatchIndenter.toString();\n  }\n}\n","export class Strings {\n\n    /**\n     * Judge the string whetehr aroud by qutation or not.\n     * The charcode of '\"' is 0x22\n     * @param str The string to judge\n     */\n    static isAroundQuotation(str: string): bool {\n        if (str == undefined || str == null) {\n            return false;\n        }\n        return str.charCodeAt(0) == 0x22 && str.charCodeAt(str.length - 1) == 0x22;\n    }\n\n    /**\n     * If the string around quotation, remove the quotation.\n     * @param str The source string\n     */\n    static removeQuotation(str: string): string {\n        if (Strings.isAroundQuotation(str)) {\n            return str.substring(1, str.length - 1);\n        }\n        return str;\n    }\n}\n\nexport class AbiUtils {\n    private static DATABASE_CHARSETS = \"abcdefghijklmnopqrstuvwxyz12345.\";\n\n    /**\n     * Check the action name whether is legal.\n     * The action name should be less or equal than 21 characters.\n     * @param str the action name\n     */\n    static checkActionName(str: string): void {\n        assert(str.length > 0, `Action name should not empty.`);\n        assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n    }\n\n    /**\n     * Check the database name whether is legal.\n     * The database name should be less or equal than 12 characters.\n     * @param name the database name\n     */\n    static checkDatabaseName(name: string): void {\n        assert(name.length > 0, `Table name should not empty.`);\n        assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n        for (let aChar of name) {\n            assert(AbiUtils.DATABASE_CHARSETS.includes(aChar), `Table name:${name} should only contain the chars:${AbiUtils.DATABASE_CHARSETS}`);\n        }\n    }\n}\n\nexport class Indenter {\n\n    private body: Array<string> = new Array<string>();\n    private indentX1: string = \"  \";\n    private indentX2: string = \"    \";\n    private indentX4: string = \"        \";\n    private padding: string = this.indentX1;\n\n    indent(level: i32): Indenter {\n        var padding = \"\";\n        while (level >= 4) {\n            padding += this.indentX4;\n            level -= 4;\n        }\n        if (level >= 2) {\n            padding += this.indentX2;\n            level -= 2;\n        }\n        if (level >= 1) {\n            padding += this.indentX1;\n        }\n        this.padding = padding;\n        return this;\n    }\n\n    increase(): Indenter {\n        this.padding += this.indentX1;\n        return this;\n    }\n\n    add(row: string): Indenter {\n        this.body.push(this.padding + row);\n        return this;\n    }\n\n    decrease(): Indenter {\n        this.padding = this.padding.replace(this.indentX1, \"\");\n        return this;\n    }\n\n    toString(): string {\n        return this.body.join(\"\\n\");\n    }\n\n    addAll(body: string[]): void {\n        for (let row of body) {\n            this.body.push(row);\n        }\n    }\n\n    getContent(): string[] {\n        return this.body;\n    }\n}\n\nexport class Verify {\n\n    static verify(expression: bool, message: string): void {\n        if (!expression) {\n            throw new Error(message);\n        }\n    }\n}\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n  \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n  \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n  \"NaN\": { value: NaN, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n  \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n  \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n  \"NaN\": { value: NaN, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n}\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        // messageArg,\n        // filenameArg,\n        // module.createI32(reportNode.range.line),\n        // module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    CommonTypeNode,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    BlockStatement,\n    Statement\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil,\n    TypeNodeAnalyzer,\n    AbiTypeEnum\n} from \"./util/astutil\";\n\nimport {\n    Collections\n} from \"./util/collectionutil\";\n\nimport {\n    Indenter, Verify\n} from \"./util/primitiveutil\";\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getCodes(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needDeserialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needPrimaryid: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.initialize();\n    }\n\n    private existing(): bool {\n        return this.needDeserialize || this.needSerialize || this.needPrimaryid;\n    }\n\n    private initialize(): void {\n        if (this.classPrototype.instanceMembers) {\n            for (let [_, element] of this.classPrototype.instanceMembers) {\n                if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                    let fnPrototype = <FunctionPrototype>element;\n                    let fnName = fnPrototype.declaration.name.range.toString();\n                    if (fnName == this.SERIALIZE_METHOD_NAME) {\n                        this.needSerialize = false;\n                    }\n                    if (fnName == this.DESERIALIZE_METHOD_NAME) {\n                        this.needDeserialize = false;\n                    }\n                    if (fnName == this.PRIMARY_METHOD_NAME) {\n                        this.needPrimaryid = false;\n                    }\n                }\n            }\n        }\n    }\n\n    checkSerializable(typeNode: CommonTypeNode): void {\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsLookup.get(internalName);\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element));\n            Verify.verify(hasImpl, `Class ${internalName} has not implement the interface serializable`);\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoint(): SerializePoint | null {\n        if (!this.existing()) {\n            return null;\n        }\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needDeserialize;\n        serializePoint.needSerialize = this.needSerialize;\n        serializePoint.needPrimaryid = this.needPrimaryid;\n\n        if (!this.classPrototype.instanceMembers) {\n            return null;\n        }\n        var countOfPkDecorator: u8 = 0;\n        if (AstUtil.impledSerializable(this.classPrototype.basePrototype)) {\n            serializePoint.serialize.increase().add(`super.serialize(ds);`);\n            serializePoint.deserialize.increase().add(`super.deserialize(ds);`);\n        }\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE &&\n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needSerialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.serialize.addAll(this.serializeField(fieldName, typeNode));\n                    }\n                    if (this.needDeserialize) {\n                        this.checkSerializable(commonType);\n                        serializePoint.deserialize.addAll(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.TYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID)) {\n                    countOfPkDecorator++;\n                    Verify.verify(countOfPkDecorator <= 1, `Class ${this.classPrototype.simpleName} should have only one primaryid decorator field.`);\n                    let typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype.program, <TypeNode>commonType);\n                    if (!typeNodeAnalyzer.isPrimaryType()) {\n                        throw new Error(`Class ${this.classPrototype.simpleName} member ${fieldName}'s type should be id_type or refer to id_type.`);\n                    }\n                    serializePoint.primaryKey.indent(4).add(`return this.${fieldName};`);\n                }\n            }\n        }\n\n        if (!countOfPkDecorator) {\n            serializePoint.primaryKey.indent(4).add(`return 0;`);\n        }\n        serializePoint.primaryKey.indent(2).add(`}`);\n        serializePoint.deserialize.indent(2).add(`}`);\n        serializePoint.serialize.indent(2).add(`}`);\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype.program, typeNode);\n        var indent: Indenter = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.writeVector<${argTypeName}>(this.${fieldName});`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeStringVector(this.${fieldName});`);\n            } else {\n                indent.add(`ds.writeComplexVector<${argTypeName}>(this.${fieldName});`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`ds.writeString(this.${fieldName});`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`ds.write<${typeNodeAnalyzer.getDeclareType()}>(this.${fieldName});`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string[] {\n        var typeNodeAnalyzer: TypeNodeAnalyzer = new TypeNodeAnalyzer(this.classPrototype.program, type);\n        var indent = new Indenter();\n        indent.indent(4);\n        if (typeNodeAnalyzer.isArray()) {\n            let argAbiTypeEnum = typeNodeAnalyzer.getArrayArgAbiTypeEnum();\n            let argTypeName = typeNodeAnalyzer.getArrayArg();\n\n            if (argAbiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.readVector<${argTypeName}>();`);\n            } else if (argAbiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readStringVector();`);\n            } else {\n                indent.add(`this.${fieldName} = ds.readComplexVector<${argTypeName}>();`);\n            }\n        } else {\n            let abiTypeEnum = typeNodeAnalyzer.abiTypeEnum;\n            if (abiTypeEnum == AbiTypeEnum.STRING) {\n                indent.add(`this.${fieldName} = ds.readString();`);\n            } else if (abiTypeEnum == AbiTypeEnum.NUMBER) {\n                indent.add(`this.${fieldName} = ds.read<${typeNodeAnalyzer.typeName}>();`);\n            } else {\n                indent.add(`if (!this.${fieldName}) {`);\n                indent.increase().add(`this.${fieldName} = { } as ${typeNodeAnalyzer.getDeclareType()};`);\n                indent.decrease().add(`}`);\n                indent.add(`this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return indent.getContent();\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    serialize: Indenter = new Indenter();\n    deserialize: Indenter = new Indenter();\n    primaryKey: Indenter = new Indenter();\n\n    needSerialize: bool = false;\n    needDeserialize: bool = false;\n    needPrimaryid: bool = false;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.indent(2).add(`serialize(ds: DataStream): void {`);\n        this.deserialize.indent(2).add(`deserialize(ds: DataStream): void {`);\n        this.primaryKey.indent(2).add(`primaryKey(): id_type {`);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getCodes(): string {\n        var result = [];\n        if (this.needDeserialize) {\n            result.push(this.deserialize.toString());\n        }\n        if (this.needSerialize) {\n            result.push(this.serialize.toString());\n        }\n        if (this.needPrimaryid) {\n            result.push(this.primaryKey.toString());\n        }\n        return result.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n    private serializeClassname: Set<string> = new Set<string>();\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                if (AstUtil.impledSerializable(<ClassPrototype>element)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n\n                    let serializePoint = generator.getSerializePoint();\n                    if (serializePoint && !this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n}\n\nexport class SuperInserter {\n\n    program: Program;\n    private insertPoints: Array<InsertPoint> = [];\n    private classNames: Set<string> = new Set<string>();\n    private baseClassNames: Set<string> = new Set<string>();\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    private resolve(): void {\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classPrototype = <ClassPrototype>element;\n                let classDeclaration = classPrototype.declaration;\n                let identity = classDeclaration.range.source.normalizedPath + classDeclaration.range.toString() + classDeclaration.name.range.toString();\n                // console.log(`${classPrototype.simpleName}: atEnd line: ${classPrototype.declaration.range.atEnd.line} line: ${classPrototype.declaration.range.line} end: ${classPrototype.declaration.range.end} column:${classPrototype.declaration.range.column}`);\n                if (classPrototype.basePrototype && !this.classNames.has(identity)) {\n                    this.processConstructor(classPrototype);\n                    this.classNames.add(identity);\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n\n    /**\n     * The class prototype has base class.\n     * @param classPrototype the classPrototype\n     */\n    private processConstructor(classPrototype: ClassPrototype): void {\n        var constructorPrototype = classPrototype.constructorPrototype;\n        if (!constructorPrototype) {\n            return;\n        }\n        if (!classPrototype.basePrototype) {\n            return;\n        }\n        if (!classPrototype.basePrototype.constructorPrototype) {\n            return;\n        }\n\n        // Add call super method\n        var constructorResolver = new ConstructorResolver(constructorPrototype);\n        var superInserter = constructorResolver.generateSuperExprInserter();\n        this.insertPoints.push(superInserter);\n\n        // Add constructor replaced method\n        var baseConstructorResolver = new ConstructorResolver(classPrototype.basePrototype.constructorPrototype);\n        if (!this.baseClassNames.has(baseConstructorResolver.getClassIdentity())) {\n            this.insertPoints.push(baseConstructorResolver.generateConstructorInsert());\n            this.baseClassNames.add(baseConstructorResolver.getClassIdentity());\n        }\n    }\n}\n\nclass ConstructorResolver {\n    private classPrototype: ClassPrototype;\n    private constructorPrototype: FunctionPrototype;\n    private stmtsWithoutComments: Statement[];\n    private havingSuperExpr: bool;\n\n    constructor(constructorPrototype: FunctionPrototype) {\n\n        if (constructorPrototype.classPrototype) {\n            this.classPrototype = constructorPrototype.classPrototype;\n        } else {\n            throw new Error(`Function ${constructorPrototype.simpleName} should belong a class prototype`);\n        }\n\n        this.constructorPrototype = constructorPrototype;\n        this.setStmtsWithoutComments();\n        this.setHavingSuperExpr();\n    }\n\n    private setHavingSuperExpr(): void {\n        if (this.stmtsWithoutComments.length == 0) {\n            this.havingSuperExpr = false;\n        } else {\n            this.havingSuperExpr = this.stmtsWithoutComments[0].range.toString() == \"super\";\n        }\n    }\n\n    private location(range: Range): string {\n        return \"in \" +\n            range.source.normalizedPath +\n            \":\" +\n            range.line.toString(10) +\n            \":\" +\n            range.column.toString(10);\n    }\n\n    getClassIdentity(): string {\n        var range = this.classPrototype.declaration.range;\n        return range.source.normalizedPath + range.toString();\n    }\n\n    private setStmtsWithoutComments(): void {\n        var body = this.constructorPrototype.declaration.body;\n        var isBlockBody = (body != null && body.kind == NodeKind.BLOCK);\n        this.stmtsWithoutComments = new Array<Statement>();\n        if (isBlockBody) {\n            let blockStatements = <BlockStatement>this.constructorPrototype.declaration.body;\n            for (let _stmt of blockStatements.statements) {\n                if (_stmt.kind != NodeKind.COMMENT) {\n                    this.stmtsWithoutComments.push(_stmt);\n                }\n            }\n        }\n    }\n\n    getSuperExpr(): string {\n        if (!this.havingSuperExpr) {\n            throw new Error(`Class ${this.getClassName()} should have super expression, at ${this.location(this.constructorPrototype.declaration.range)}`);\n        }\n        var keyword = this.stmtsWithoutComments[0].range.toString();\n        if (this.stmtsWithoutComments.length == 1) {\n            return `${keyword}()`;\n        }\n        var params = this.stmtsWithoutComments[1].range.toString();\n        return (params.startsWith(\"(\")) ? `${keyword}${params}` : `${keyword}()`;\n    }\n\n    private havingBaseConstructorMethod(): bool {\n        if (this.classPrototype.basePrototype\n            && this.classPrototype.basePrototype.constructorPrototype) {\n            return true;\n        }\n        return false;\n    }\n\n    generateConstructor(): string {\n        var index = 0;\n        var contents = new Array<string>();\n        if (this.havingSuperExpr) {\n            index = 1;\n            if (this.havingBaseConstructorMethod()) {\n                let callSuperExpr = this.generateCallSuperExpr();\n                contents.push(callSuperExpr);\n            }\n            if (this.stmtsWithoutComments.length >= 2) {\n                index = this.stmtsWithoutComments[1].range.toString().startsWith(\"(\") ? 2 : index;\n            }\n        }\n        for (let i = index; i < this.stmtsWithoutComments.length; i++) {\n            contents.push(this.stmtsWithoutComments[i].range.toString());\n        }\n        return `_${this.getClassName()}_super${this.getSignature()} : void { ${contents.join(\";\\n\")}; }`;\n    }\n\n    generateConstructorInsert(): InsertPoint {\n        var range = this.classPrototype.declaration.range;\n        return new InsertPoint(range, this.generateConstructor());\n    }\n\n    private generateCallSuperExpr(): string {\n        return `this._${this.getBaseClassName()}_${this.getSuperExpr()};`;\n    }\n\n    generateSuperExprInserter(): InsertPoint {\n        var expr = this.generateCallSuperExpr();\n        return new InsertPoint(this.stmtsWithoutComments[1].range, expr);\n    }\n\n    private getClassName(): string {\n        return this.classPrototype.simpleName;\n    }\n\n    private getBaseClassName(): string {\n        if (!this.classPrototype.basePrototype) {\n            throw new Error(`Class ${this.getClassName()} should have super class.`);\n        }\n        return this.classPrototype.basePrototype.simpleName;\n    }\n\n    private getSignature(): string {\n        return this.constructorPrototype.declaration.signature.range.toString();\n    }\n}\n","export class Collections {\n\n    /**\n     * Check the array is empty\n     * @param arr parameter array\n     */\n    static isEmptyArray<T>(arr: T[]): bool {\n        return arr.length == 0;\n    }\n\n    static newArray<T>(arg1: T): T[] {\n        var arr = new Array<T>();\n        arr.push(arg1);\n        return arr;\n    }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    // TODO To support super()\n    } else if (tn.skip(Token.SEMICOLON)) {\n      returnType = null;\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n"],"sourceRoot":""}